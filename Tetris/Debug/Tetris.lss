
Tetris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  00001994  00001a28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001994  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001cd  00800176  00800176  00001a9e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a9e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001afc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000338  00000000  00000000  00001b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a52  00000000  00000000  00001e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e23  00000000  00000000  000048c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000188f  00000000  00000000  000056e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008d0  00000000  00000000  00006f78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d5c  00000000  00000000  00007848  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020a3  00000000  00000000  000085a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000310  00000000  00000000  0000a647  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__ctors_end>
       4:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
       8:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
       c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      10:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      14:	0c 94 b9 01 	jmp	0x372	; 0x372 <__vector_5>
      18:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      1c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      20:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      24:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      28:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      2c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      30:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      34:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      38:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      3c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      40:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <__vector_16>
      44:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      48:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      4c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      50:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__vector_20>
      54:	0c 94 aa 07 	jmp	0xf54	; 0xf54 <__vector_21>
      58:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      5c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      60:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      64:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      68:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      6c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      70:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      74:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      78:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	61 20       	and	r6, r1
      84:	62 75       	andi	r22, 0x52	; 82
      86:	74 74       	andi	r23, 0x44	; 68
      88:	6f 6e       	ori	r22, 0xEF	; 239
      8a:	20 74       	andi	r18, 0x40	; 64
      8c:	6f 20       	and	r6, r15
      8e:	73 74       	andi	r23, 0x43	; 67
      90:	61 72       	andi	r22, 0x21	; 33
      92:	74 20       	and	r7, r4
      94:	61 67       	ori	r22, 0x71	; 113
      96:	61 69       	ori	r22, 0x91	; 145
      98:	6e 00       	.word	0x006e	; ????

0000009a <__c.2321>:
      9a:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000a4 <__c.2292>:
      a4:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 54 65     CSSE2010/7201 Te
      b4:	74 72 69 73 20 50 72 6f 6a 65 63 74 20 62 79 20     tris Project by 
      c4:	4a 61 6d 65 73 20 42 65 6e 74 6c 65 79 00           James Bentley.

000000d2 <__c.2290>:
      d2:	54 65 74 72 69 73 00                                Tetris.

000000d9 <numbers>:
      d9:	44 01 41 01 3d 01 39 01 35 01 31 01 2d 01 29 01     D.A.=.9.5.1.-.).
      e9:	25 01 21 01                                         %.!.

000000ed <letters>:
      ed:	b3 01 af 01 ab 01 a7 01 a3 01 9f 01 9b 01 97 01     ................
      fd:	94 01 90 01 8c 01 88 01 83 01 7f 01 7b 01 77 01     ............{.w.
     10d:	72 01 6e 01 6a 01 65 01 61 01 5c 01 57 01 52 01     r.n.j.e.a.\.W.R.
     11d:	4d 01 48 01                                         M.H.

00000121 <cols_9>:
     121:	64 92 92 7d                                         d..}

00000125 <cols_8>:
     125:	6c 92 92 6d                                         l..m

00000129 <cols_7>:
     129:	80 9e a0 c1                                         ....

0000012d <cols_6>:
     12d:	7c 92 92 4d                                         |..M

00000131 <cols_5>:
     131:	e4 a2 a2 9d                                         ....

00000135 <cols_4>:
     135:	18 28 48 ff                                         .(H.

00000139 <cols_3>:
     139:	44 92 92 6d                                         D..m

0000013d <cols_2>:
     13d:	46 8a 92 63                                         F..c

00000141 <cols_1>:
     141:	42 fe 03                                            B..

00000144 <cols_0>:
     144:	7c 92 a2 7d                                         |..}

00000148 <cols_Z>:
     148:	86 8a 92 a2 c3                                      .....

0000014d <cols_Y>:
     14d:	e0 10 0e 10 e1                                      .....

00000152 <cols_X>:
     152:	c6 28 10 28 c7                                      .(.(.

00000157 <cols_W>:
     157:	fc 02 1c 02 fd                                      .....

0000015c <cols_V>:
     15c:	f8 04 02 04 f9                                      .....

00000161 <cols_U>:
     161:	fc 02 02 fd                                         ....

00000165 <cols_T>:
     165:	80 80 fe 80 81                                      .....

0000016a <cols_S>:
     16a:	64 92 92 4d                                         d..M

0000016e <cols_R>:
     16e:	fe 90 98 67                                         ...g

00000172 <cols_Q>:
     172:	7c 82 8a 7c 03                                      |..|.

00000177 <cols_P>:
     177:	fe 90 90 61                                         ...a

0000017b <cols_O>:
     17b:	7c 82 82 7d                                         |..}

0000017f <cols_N>:
     17f:	fe 20 10 ff                                         . ..

00000183 <cols_M>:
     183:	fe 40 30 40 ff                                      .@0@.

00000188 <cols_L>:
     188:	fe 02 02 03                                         ....

0000018c <cols_K>:
     18c:	fe 10 28 c7                                         ..(.

00000190 <cols_J>:
     190:	04 02 02 fd                                         ....

00000194 <cols_I>:
     194:	82 fe 83                                            ...

00000197 <cols_H>:
     197:	fe 10 10 ff                                         ....

0000019b <cols_G>:
     19b:	7c 82 92 5d                                         |..]

0000019f <cols_F>:
     19f:	fe 90 90 81                                         ....

000001a3 <cols_E>:
     1a3:	fe 92 92 83                                         ....

000001a7 <cols_D>:
     1a7:	fe 82 82 7d                                         ...}

000001ab <cols_C>:
     1ab:	7c 82 82 45                                         |..E

000001af <cols_B>:
     1af:	fe 92 92 6d                                         ...m

000001b3 <cols_A>:
     1b3:	7e 90 90 7f                                         ~...

000001b7 <__c.1935>:
     1b7:	1b 5b 3f 32 35 6c 00                                .[?25l.

000001be <__c.1931>:
     1be:	1b 5b 25 64 6d 00                                   .[%dm.

000001c4 <__c.1921>:
     1c4:	1b 5b 32 4a 00                                      .[2J.

000001c9 <__c.1906>:
     1c9:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

000001d2 <__ctors_end>:
     1d2:	11 24       	eor	r1, r1
     1d4:	1f be       	out	0x3f, r1	; 63
     1d6:	cf ef       	ldi	r28, 0xFF	; 255
     1d8:	d8 e0       	ldi	r29, 0x08	; 8
     1da:	de bf       	out	0x3e, r29	; 62
     1dc:	cd bf       	out	0x3d, r28	; 61

000001de <__do_copy_data>:
     1de:	11 e0       	ldi	r17, 0x01	; 1
     1e0:	a0 e0       	ldi	r26, 0x00	; 0
     1e2:	b1 e0       	ldi	r27, 0x01	; 1
     1e4:	e4 e9       	ldi	r30, 0x94	; 148
     1e6:	f9 e1       	ldi	r31, 0x19	; 25
     1e8:	02 c0       	rjmp	.+4      	; 0x1ee <__do_copy_data+0x10>
     1ea:	05 90       	lpm	r0, Z+
     1ec:	0d 92       	st	X+, r0
     1ee:	a6 37       	cpi	r26, 0x76	; 118
     1f0:	b1 07       	cpc	r27, r17
     1f2:	d9 f7       	brne	.-10     	; 0x1ea <__do_copy_data+0xc>

000001f4 <__do_clear_bss>:
     1f4:	23 e0       	ldi	r18, 0x03	; 3
     1f6:	a6 e7       	ldi	r26, 0x76	; 118
     1f8:	b1 e0       	ldi	r27, 0x01	; 1
     1fa:	01 c0       	rjmp	.+2      	; 0x1fe <.do_clear_bss_start>

000001fc <.do_clear_bss_loop>:
     1fc:	1d 92       	st	X+, r1

000001fe <.do_clear_bss_start>:
     1fe:	a3 34       	cpi	r26, 0x43	; 67
     200:	b2 07       	cpc	r27, r18
     202:	e1 f7       	brne	.-8      	; 0x1fc <.do_clear_bss_loop>
     204:	0e 94 0c 06 	call	0xc18	; 0xc18 <main>
     208:	0c 94 c8 0c 	jmp	0x1990	; 0x1990 <_exit>

0000020c <__bad_interrupt>:
     20c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000210 <generate_random_block>:
		{ block_4_rot_0, block_4_rot_1, block_4_rot_2, block_4_rot_3 }	
	}
};
	
	
FallingBlock generate_random_block(void) {
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
     214:	ec 01       	movw	r28, r24
	FallingBlock block;	// This will be our return value

	// Pick a random block
	block.blocknum = random() % NUM_BLOCKS_IN_LIBRARY;
     216:	0e 94 7f 09 	call	0x12fe	; 0x12fe <random>
     21a:	25 e0       	ldi	r18, 0x05	; 5
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	40 e0       	ldi	r20, 0x00	; 0
     220:	50 e0       	ldi	r21, 0x00	; 0
     222:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__divmodsi4>
	
	// Initial rotation (no rotation by default)
	block.rotation = 0;	
	
	// Copy the relevant details of the block to our return value
	block.pattern = block_library[block.blocknum].patterns[block.rotation];
     226:	8b e0       	ldi	r24, 0x0B	; 11
     228:	68 02       	muls	r22, r24
     22a:	f0 01       	movw	r30, r0
     22c:	11 24       	eor	r1, r1
     22e:	e2 5d       	subi	r30, 0xD2	; 210
     230:	fe 4f       	sbci	r31, 0xFE	; 254
     232:	43 81       	ldd	r20, Z+3	; 0x03
     234:	54 81       	ldd	r21, Z+4	; 0x04
	block.colour = block_library[block.blocknum].colour;
     236:	20 81       	ld	r18, Z
	block.row = 0;		// top row
	block.column = 0;	// rightmost column
	
	// Record the height and width of the block. We're using the default
	// rotation so this is just the height and width as in the block library
	block.height = block_library[block.blocknum].height;
     238:	81 81       	ldd	r24, Z+1	; 0x01
	block.width = block_library[block.blocknum].width;
     23a:	92 81       	ldd	r25, Z+2	; 0x02
	
	return block;
     23c:	68 83       	st	Y, r22
     23e:	5a 83       	std	Y+2, r21	; 0x02
     240:	49 83       	std	Y+1, r20	; 0x01
     242:	2b 83       	std	Y+3, r18	; 0x03
     244:	1c 82       	std	Y+4, r1	; 0x04
     246:	1d 82       	std	Y+5, r1	; 0x05
     248:	1e 82       	std	Y+6, r1	; 0x06
     24a:	9f 83       	std	Y+7, r25	; 0x07
     24c:	88 87       	std	Y+8, r24	; 0x08
}
     24e:	ce 01       	movw	r24, r28
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	08 95       	ret

00000256 <rotate_block>:
 * Returns 1 if successful (and modifies the given block) otherwise
 * returns 0 (and leaves the given block unchanged).
 * This method is only unsuccessful if the block is too close to the
 * left hand side to be rotated.
 */
int8_t rotate_block(FallingBlock* blockPtr) {
     256:	fc 01       	movw	r30, r24
 	/* New block width will be the old height. New block height 
	 * will be the old width
	 */
	uint8_t new_width = blockPtr->height;
     258:	20 85       	ldd	r18, Z+8	; 0x08
	uint8_t new_height = blockPtr->width;
     25a:	47 81       	ldd	r20, Z+7	; 0x07
	
	if(blockPtr->column + new_width > BOARD_WIDTH) {
     25c:	35 81       	ldd	r19, Z+5	; 0x05
     25e:	82 2f       	mov	r24, r18
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	83 0f       	add	r24, r19
     264:	91 1d       	adc	r25, r1
     266:	09 97       	sbiw	r24, 0x09	; 9
     268:	4c f5       	brge	.+82     	; 0x2bc <rotate_block+0x66>
		return 0;	// Block won't fit on the board if rotated
	}
	if(blockPtr->row + new_height > BOARD_ROWS) {
     26a:	34 81       	ldd	r19, Z+4	; 0x04
     26c:	84 2f       	mov	r24, r20
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	83 0f       	add	r24, r19
     272:	91 1d       	adc	r25, r1
     274:	41 97       	sbiw	r24, 0x11	; 17
     276:	24 f5       	brge	.+72     	; 0x2c0 <rotate_block+0x6a>
		return 0;	// Block will rotate off the bottom of the board
	}
	
	// Perform the rotation. We increment the rotation value (0 to 3)
	// and wrap back to 0 if we reach 4, i.e. add 1 and take mod 4.
	uint8_t new_rotation = (blockPtr->rotation + 1) % NUM_ROTATIONS;
     278:	86 81       	ldd	r24, Z+6	; 0x06
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	01 96       	adiw	r24, 0x01	; 1
     27e:	83 70       	andi	r24, 0x03	; 3
     280:	90 78       	andi	r25, 0x80	; 128
     282:	99 23       	and	r25, r25
     284:	24 f4       	brge	.+8      	; 0x28e <rotate_block+0x38>
     286:	01 97       	sbiw	r24, 0x01	; 1
     288:	8c 6f       	ori	r24, 0xFC	; 252
     28a:	9f 6f       	ori	r25, 0xFF	; 255
     28c:	01 96       	adiw	r24, 0x01	; 1
	
	blockPtr->pattern = block_library[blockPtr->blocknum].patterns[new_rotation];
     28e:	dc 01       	movw	r26, r24
     290:	bb 27       	eor	r27, r27
     292:	90 81       	ld	r25, Z
     294:	aa 0f       	add	r26, r26
     296:	bb 1f       	adc	r27, r27
     298:	3b e0       	ldi	r19, 0x0B	; 11
     29a:	93 02       	muls	r25, r19
     29c:	a0 0d       	add	r26, r0
     29e:	b1 1d       	adc	r27, r1
     2a0:	11 24       	eor	r1, r1
     2a2:	a2 5d       	subi	r26, 0xD2	; 210
     2a4:	be 4f       	sbci	r27, 0xFE	; 254
     2a6:	13 96       	adiw	r26, 0x03	; 3
     2a8:	6d 91       	ld	r22, X+
     2aa:	7c 91       	ld	r23, X
     2ac:	14 97       	sbiw	r26, 0x04	; 4
     2ae:	72 83       	std	Z+2, r23	; 0x02
     2b0:	61 83       	std	Z+1, r22	; 0x01
		return 0;	// Block will rotate off the bottom of the board
	}
	
	// Perform the rotation. We increment the rotation value (0 to 3)
	// and wrap back to 0 if we reach 4, i.e. add 1 and take mod 4.
	uint8_t new_rotation = (blockPtr->rotation + 1) % NUM_ROTATIONS;
     2b2:	86 83       	std	Z+6, r24	; 0x06
	
	blockPtr->pattern = block_library[blockPtr->blocknum].patterns[new_rotation];
	blockPtr->rotation = new_rotation;
	blockPtr->width = new_width;
     2b4:	27 83       	std	Z+7, r18	; 0x07
	blockPtr->height = new_height;
     2b6:	40 87       	std	Z+8, r20	; 0x08
	
	// Rotation was successful
	return 1;
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	08 95       	ret
	 */
	uint8_t new_width = blockPtr->height;
	uint8_t new_height = blockPtr->width;
	
	if(blockPtr->column + new_width > BOARD_WIDTH) {
		return 0;	// Block won't fit on the board if rotated
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	08 95       	ret
	}
	if(blockPtr->row + new_height > BOARD_ROWS) {
		return 0;	// Block will rotate off the bottom of the board
     2c0:	80 e0       	ldi	r24, 0x00	; 0
	blockPtr->width = new_width;
	blockPtr->height = new_height;
	
	// Rotation was successful
	return 1;
}
     2c2:	08 95       	ret

000002c4 <move_block_left>:

int8_t move_block_left(FallingBlock* blockPtr) {
     2c4:	fc 01       	movw	r30, r24
	/* Check if the block is all the way to the left. If so, return 0
	 * because we can't shift it further to the left.
	 */
	if(blockPtr->column + blockPtr->width >= BOARD_WIDTH) {
     2c6:	95 81       	ldd	r25, Z+5	; 0x05
     2c8:	27 81       	ldd	r18, Z+7	; 0x07
     2ca:	30 e0       	ldi	r19, 0x00	; 0
     2cc:	29 0f       	add	r18, r25
     2ce:	31 1d       	adc	r19, r1
     2d0:	28 30       	cpi	r18, 0x08	; 8
     2d2:	31 05       	cpc	r19, r1
     2d4:	24 f4       	brge	.+8      	; 0x2de <move_block_left+0x1a>
	}

	/*
	 * Make the move.
	 */
	blockPtr->column += 1;
     2d6:	9f 5f       	subi	r25, 0xFF	; 255
     2d8:	95 83       	std	Z+5, r25	; 0x05
	return 1;
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	08 95       	ret
int8_t move_block_left(FallingBlock* blockPtr) {
	/* Check if the block is all the way to the left. If so, return 0
	 * because we can't shift it further to the left.
	 */
	if(blockPtr->column + blockPtr->width >= BOARD_WIDTH) {
		return 0;
     2de:	80 e0       	ldi	r24, 0x00	; 0
	/*
	 * Make the move.
	 */
	blockPtr->column += 1;
	return 1;
}
     2e0:	08 95       	ret

000002e2 <move_block_right>:

int8_t move_block_right(FallingBlock* blockPtr) {
     2e2:	fc 01       	movw	r30, r24
	/* Check if the block is all the way to the right. If so, return 0
	 * because we can't shift it further to the right.
	 */
	if(blockPtr->column <= 0) {
     2e4:	95 81       	ldd	r25, Z+5	; 0x05
     2e6:	99 23       	and	r25, r25
     2e8:	21 f0       	breq	.+8      	; 0x2f2 <move_block_right+0x10>
	}

	/*
	 * Make the move.
	 */
	blockPtr->column -= 1;
     2ea:	91 50       	subi	r25, 0x01	; 1
     2ec:	95 83       	std	Z+5, r25	; 0x05
	return 1;
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	08 95       	ret
int8_t move_block_right(FallingBlock* blockPtr) {
	/* Check if the block is all the way to the right. If so, return 0
	 * because we can't shift it further to the right.
	 */
	if(blockPtr->column <= 0) {
		return 0;
     2f2:	80 e0       	ldi	r24, 0x00	; 0
	 * Make the move.
	 */
	blockPtr->column -= 1;
	return 1;

}
     2f4:	08 95       	ret

000002f6 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 69)
	PCICR |= (1<<PCIE1);
     2f6:	e8 e6       	ldi	r30, 0x68	; 104
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	80 81       	ld	r24, Z
     2fc:	82 60       	ori	r24, 0x02	; 2
     2fe:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 69)
	PCIFR |= (1<<PCIF1);
     300:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 70)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     302:	ec e6       	ldi	r30, 0x6C	; 108
     304:	f0 e0       	ldi	r31, 0x00	; 0
     306:	80 81       	ld	r24, Z
     308:	8f 60       	ori	r24, 0x0F	; 15
     30a:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     30c:	10 92 76 01 	sts	0x0176, r1
     310:	08 95       	ret

00000312 <empty_button_queue>:
}

void empty_button_queue(void) {
	queue_length = 0;
     312:	10 92 76 01 	sts	0x0176, r1
     316:	08 95       	ret

00000318 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
	if(queue_length > 0) {
     318:	80 91 76 01 	lds	r24, 0x0176
     31c:	18 16       	cp	r1, r24
     31e:	3c f5       	brge	.+78     	; 0x36e <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     320:	80 91 77 01 	lds	r24, 0x0177
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     324:	6f b7       	in	r22, 0x3f	; 63
		cli();
     326:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     328:	90 91 76 01 	lds	r25, 0x0176
     32c:	92 30       	cpi	r25, 0x02	; 2
     32e:	b4 f0       	brlt	.+44     	; 0x35c <button_pushed+0x44>
     330:	21 e0       	ldi	r18, 0x01	; 1
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     336:	f9 01       	movw	r30, r18
     338:	e9 58       	subi	r30, 0x89	; 137
     33a:	fe 4f       	sbci	r31, 0xFE	; 254
     33c:	40 81       	ld	r20, Z
     33e:	f9 01       	movw	r30, r18
     340:	ea 58       	subi	r30, 0x8A	; 138
     342:	fe 4f       	sbci	r31, 0xFE	; 254
     344:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     346:	9f 5f       	subi	r25, 0xFF	; 255
     348:	29 2f       	mov	r18, r25
     34a:	30 e0       	ldi	r19, 0x00	; 0
     34c:	40 91 76 01 	lds	r20, 0x0176
     350:	04 2e       	mov	r0, r20
     352:	00 0c       	add	r0, r0
     354:	55 0b       	sbc	r21, r21
     356:	24 17       	cp	r18, r20
     358:	35 07       	cpc	r19, r21
     35a:	6c f3       	brlt	.-38     	; 0x336 <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     35c:	90 91 76 01 	lds	r25, 0x0176
     360:	91 50       	subi	r25, 0x01	; 1
     362:	90 93 76 01 	sts	0x0176, r25
		
		if(interrupts_were_enabled) {
     366:	66 23       	and	r22, r22
     368:	1c f4       	brge	.+6      	; 0x370 <button_pushed+0x58>
			// Turn them back on again
			sei();
     36a:	78 94       	sei
     36c:	08 95       	ret
void empty_button_queue(void) {
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
     36e:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     370:	08 95       	ret

00000372 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     372:	1f 92       	push	r1
     374:	0f 92       	push	r0
     376:	0f b6       	in	r0, 0x3f	; 63
     378:	0f 92       	push	r0
     37a:	11 24       	eor	r1, r1
     37c:	2f 93       	push	r18
     37e:	3f 93       	push	r19
     380:	4f 93       	push	r20
     382:	5f 93       	push	r21
     384:	6f 93       	push	r22
     386:	7f 93       	push	r23
     388:	8f 93       	push	r24
     38a:	9f 93       	push	r25
     38c:	ef 93       	push	r30
     38e:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     390:	43 b1       	in	r20, 0x03	; 3
     392:	4f 70       	andi	r20, 0x0F	; 15

	// If we have space in the queue, then iterate over all the buttons
	// and see which ones have changed.	If we have no space in the queue
	// we don't bother - we just ignore the button event.  (Ideally
	// this should never happen.)
	if(queue_length < BUTTON_QUEUE_SIZE) {
     394:	80 91 76 01 	lds	r24, 0x0176
     398:	88 30       	cpi	r24, 0x08	; 8
     39a:	64 f5       	brge	.+88     	; 0x3f4 <__vector_5+0x82>
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	90 e0       	ldi	r25, 0x00	; 0
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
			if((button_state & (1<<pin)) &&	!(last_button_state & (1<<pin))) {
     3a0:	64 2f       	mov	r22, r20
     3a2:	70 e0       	ldi	r23, 0x00	; 0
     3a4:	9b 01       	movw	r18, r22
     3a6:	08 2e       	mov	r0, r24
     3a8:	02 c0       	rjmp	.+4      	; 0x3ae <__vector_5+0x3c>
     3aa:	35 95       	asr	r19
     3ac:	27 95       	ror	r18
     3ae:	0a 94       	dec	r0
     3b0:	e2 f7       	brpl	.-8      	; 0x3aa <__vector_5+0x38>
     3b2:	20 ff       	sbrs	r18, 0
     3b4:	1b c0       	rjmp	.+54     	; 0x3ec <__vector_5+0x7a>
     3b6:	20 91 7f 01 	lds	r18, 0x017F
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	08 2e       	mov	r0, r24
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <__vector_5+0x52>
     3c0:	35 95       	asr	r19
     3c2:	27 95       	ror	r18
     3c4:	0a 94       	dec	r0
     3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <__vector_5+0x4e>
     3c8:	20 fd       	sbrc	r18, 0
     3ca:	10 c0       	rjmp	.+32     	; 0x3ec <__vector_5+0x7a>
				// Add the button push to the queue (and update the
				// length of the queue). If the queue is now full, we stop
				// processing (i.e. ignore other button events if there
				// are any)
				button_queue[queue_length++] = pin;
     3cc:	e0 91 76 01 	lds	r30, 0x0176
     3d0:	21 e0       	ldi	r18, 0x01	; 1
     3d2:	2e 0f       	add	r18, r30
     3d4:	20 93 76 01 	sts	0x0176, r18
     3d8:	0e 2e       	mov	r0, r30
     3da:	00 0c       	add	r0, r0
     3dc:	ff 0b       	sbc	r31, r31
     3de:	e9 58       	subi	r30, 0x89	; 137
     3e0:	fe 4f       	sbci	r31, 0xFE	; 254
     3e2:	80 83       	st	Z, r24
				if(queue_length >= BUTTON_QUEUE_SIZE) {
     3e4:	20 91 76 01 	lds	r18, 0x0176
     3e8:	28 30       	cpi	r18, 0x08	; 8
     3ea:	24 f4       	brge	.+8      	; 0x3f4 <__vector_5+0x82>
     3ec:	01 96       	adiw	r24, 0x01	; 1
		// Iterate over all the buttons and see which ones have changed.
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
     3ee:	84 30       	cpi	r24, 0x04	; 4
     3f0:	91 05       	cpc	r25, r1
     3f2:	c1 f6       	brne	.-80     	; 0x3a4 <__vector_5+0x32>
			}
		}
	}
		
	// Remember this button state so we can detect changes next time
	last_button_state = button_state;
     3f4:	40 93 7f 01 	sts	0x017F, r20
}
     3f8:	ff 91       	pop	r31
     3fa:	ef 91       	pop	r30
     3fc:	9f 91       	pop	r25
     3fe:	8f 91       	pop	r24
     400:	7f 91       	pop	r23
     402:	6f 91       	pop	r22
     404:	5f 91       	pop	r21
     406:	4f 91       	pop	r20
     408:	3f 91       	pop	r19
     40a:	2f 91       	pop	r18
     40c:	0f 90       	pop	r0
     40e:	0f be       	out	0x3f, r0	; 63
     410:	0f 90       	pop	r0
     412:	1f 90       	pop	r1
     414:	18 95       	reti

00000416 <block_collides>:
/*
 * Check whether the given block collides (intersects with) with
 * the fixed blocks on the board. Return 1 if it does collide, 0
 * otherwise.
 */
static uint8_t block_collides(FallingBlock block) {
     416:	ef 92       	push	r14
     418:	ff 92       	push	r15
     41a:	0f 93       	push	r16
     41c:	1f 93       	push	r17
     41e:	cf 93       	push	r28
     420:	df 93       	push	r29
     422:	cd b7       	in	r28, 0x3d	; 61
     424:	de b7       	in	r29, 0x3e	; 62
     426:	29 97       	sbiw	r28, 0x09	; 9
     428:	0f b6       	in	r0, 0x3f	; 63
     42a:	f8 94       	cli
     42c:	de bf       	out	0x3e, r29	; 62
     42e:	0f be       	out	0x3f, r0	; 63
     430:	cd bf       	out	0x3d, r28	; 61
     432:	09 83       	std	Y+1, r16	; 0x01
     434:	1a 83       	std	Y+2, r17	; 0x02
     436:	2b 83       	std	Y+3, r18	; 0x03
     438:	3c 83       	std	Y+4, r19	; 0x04
     43a:	4d 83       	std	Y+5, r20	; 0x05
     43c:	5e 83       	std	Y+6, r21	; 0x06
     43e:	6f 83       	std	Y+7, r22	; 0x07
     440:	78 87       	std	Y+8, r23	; 0x08
     442:	89 87       	std	Y+9, r24	; 0x09
     444:	ea 80       	ldd	r14, Y+2	; 0x02
     446:	fb 80       	ldd	r15, Y+3	; 0x03
     448:	98 2f       	mov	r25, r24
	// We work out the bit patterns for the block in each row
	// and use a bitwise AND to determine whether there is an
	// intersection or not
	for(uint8_t row = 0; row < block.height; row++) {
     44a:	88 23       	and	r24, r24
     44c:	71 f1       	breq	.+92     	; 0x4aa <block_collides+0x94>
		rowtype bit_pattern_for_row = block.pattern[row] << block.column;
     44e:	05 2f       	mov	r16, r21
     450:	f7 01       	movw	r30, r14
     452:	20 81       	ld	r18, Z
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	02 c0       	rjmp	.+4      	; 0x45c <block_collides+0x46>
     458:	22 0f       	add	r18, r18
     45a:	33 1f       	adc	r19, r19
     45c:	5a 95       	dec	r21
     45e:	e2 f7       	brpl	.-8      	; 0x458 <block_collides+0x42>
		// The bit pattern to check this against will be that on the board
		// at the position where the block is located
		if(bit_pattern_for_row & board[block.row + row]) {
     460:	e4 2f       	mov	r30, r20
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	e0 5f       	subi	r30, 0xF0	; 240
     466:	fd 4f       	sbci	r31, 0xFD	; 253
     468:	80 81       	ld	r24, Z
     46a:	82 23       	and	r24, r18
     46c:	01 f5       	brne	.+64     	; 0x4ae <block_collides+0x98>
     46e:	f7 01       	movw	r30, r14
     470:	31 96       	adiw	r30, 0x01	; 1
     472:	a4 2f       	mov	r26, r20
     474:	b0 e0       	ldi	r27, 0x00	; 0
     476:	af 5e       	subi	r26, 0xEF	; 239
     478:	bd 4f       	sbci	r27, 0xFD	; 253
     47a:	91 50       	subi	r25, 0x01	; 1
     47c:	69 2f       	mov	r22, r25
     47e:	70 e0       	ldi	r23, 0x00	; 0
     480:	6f 5f       	subi	r22, 0xFF	; 255
     482:	7f 4f       	sbci	r23, 0xFF	; 255
     484:	6e 0d       	add	r22, r14
     486:	7f 1d       	adc	r23, r15
     488:	0c c0       	rjmp	.+24     	; 0x4a2 <block_collides+0x8c>
static uint8_t block_collides(FallingBlock block) {
	// We work out the bit patterns for the block in each row
	// and use a bitwise AND to determine whether there is an
	// intersection or not
	for(uint8_t row = 0; row < block.height; row++) {
		rowtype bit_pattern_for_row = block.pattern[row] << block.column;
     48a:	91 91       	ld	r25, Z+
		// The bit pattern to check this against will be that on the board
		// at the position where the block is located
		if(bit_pattern_for_row & board[block.row + row]) {
     48c:	4d 91       	ld	r20, X+
static uint8_t block_collides(FallingBlock block) {
	// We work out the bit patterns for the block in each row
	// and use a bitwise AND to determine whether there is an
	// intersection or not
	for(uint8_t row = 0; row < block.height; row++) {
		rowtype bit_pattern_for_row = block.pattern[row] << block.column;
     48e:	29 2f       	mov	r18, r25
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	00 2e       	mov	r0, r16
     494:	02 c0       	rjmp	.+4      	; 0x49a <block_collides+0x84>
     496:	22 0f       	add	r18, r18
     498:	33 1f       	adc	r19, r19
     49a:	0a 94       	dec	r0
     49c:	e2 f7       	brpl	.-8      	; 0x496 <block_collides+0x80>
		// The bit pattern to check this against will be that on the board
		// at the position where the block is located
		if(bit_pattern_for_row & board[block.row + row]) {
     49e:	24 23       	and	r18, r20
     4a0:	41 f4       	brne	.+16     	; 0x4b2 <block_collides+0x9c>
 */
static uint8_t block_collides(FallingBlock block) {
	// We work out the bit patterns for the block in each row
	// and use a bitwise AND to determine whether there is an
	// intersection or not
	for(uint8_t row = 0; row < block.height; row++) {
     4a2:	e6 17       	cp	r30, r22
     4a4:	f7 07       	cpc	r31, r23
     4a6:	89 f7       	brne	.-30     	; 0x48a <block_collides+0x74>
     4a8:	05 c0       	rjmp	.+10     	; 0x4b4 <block_collides+0x9e>
		if(bit_pattern_for_row & board[block.row + row]) {
			// This row collides - we can stop now
			return 1;
		}
	}
	return 0;	// No collisions detected
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	03 c0       	rjmp	.+6      	; 0x4b4 <block_collides+0x9e>
		rowtype bit_pattern_for_row = block.pattern[row] << block.column;
		// The bit pattern to check this against will be that on the board
		// at the position where the block is located
		if(bit_pattern_for_row & board[block.row + row]) {
			// This row collides - we can stop now
			return 1;
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	01 c0       	rjmp	.+2      	; 0x4b4 <block_collides+0x9e>
     4b2:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;	// No collisions detected
}
     4b4:	29 96       	adiw	r28, 0x09	; 9
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	f8 94       	cli
     4ba:	de bf       	out	0x3e, r29	; 62
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	cd bf       	out	0x3d, r28	; 61
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	1f 91       	pop	r17
     4c6:	0f 91       	pop	r16
     4c8:	ff 90       	pop	r15
     4ca:	ef 90       	pop	r14
     4cc:	08 95       	ret

000004ce <remove_current_block_from_board_display>:

/*
 * Remove the current block from the display structure
 */
static void remove_current_block_from_board_display(void) {
     4ce:	ff 92       	push	r15
     4d0:	0f 93       	push	r16
     4d2:	1f 93       	push	r17
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
	for(uint8_t row = 0; row < current_block.height; row++) {
     4d8:	d0 91 28 02 	lds	r29, 0x0228
     4dc:	dd 23       	and	r29, r29
     4de:	99 f1       	breq	.+102    	; 0x546 <remove_current_block_from_board_display+0x78>
		uint8_t board_row = row + current_block.row;
     4e0:	e0 e2       	ldi	r30, 0x20	; 32
     4e2:	f2 e0       	ldi	r31, 0x02	; 2
     4e4:	14 81       	ldd	r17, Z+4	; 0x04
		for(uint8_t col = 0; col < current_block.width; col++) {
     4e6:	47 81       	ldd	r20, Z+7	; 0x07
     4e8:	85 81       	ldd	r24, Z+5	; 0x05
     4ea:	57 e0       	ldi	r21, 0x07	; 7
     4ec:	58 1b       	sub	r21, r24
     4ee:	a1 81       	ldd	r26, Z+1	; 0x01
     4f0:	b2 81       	ldd	r27, Z+2	; 0x02
			if(current_block.pattern[row] & (1 << col)) {
				// This position in the block is occupied - zero it out
				// in the display
				uint8_t board_column = col + current_block.column;
     4f2:	c0 e0       	ldi	r28, 0x00	; 0
 * Remove the current block from the display structure
 */
static void remove_current_block_from_board_display(void) {
	for(uint8_t row = 0; row < current_block.height; row++) {
		uint8_t board_row = row + current_block.row;
		for(uint8_t col = 0; col < current_block.width; col++) {
     4f4:	f1 2c       	mov	r15, r1
     4f6:	00 e0       	ldi	r16, 0x00	; 0
     4f8:	6c 2f       	mov	r22, r28
     4fa:	61 0f       	add	r22, r17
     4fc:	44 23       	and	r20, r20
     4fe:	f9 f0       	breq	.+62     	; 0x53e <remove_current_block_from_board_display+0x70>
     500:	2f 2d       	mov	r18, r15
     502:	30 2f       	mov	r19, r16
			if(current_block.pattern[row] & (1 << col)) {
				// This position in the block is occupied - zero it out
				// in the display
				uint8_t board_column = col + current_block.column;
				uint8_t display_column = BOARD_WIDTH - board_column - 1;
				board_display[board_row][display_column] = 0;
     504:	70 e0       	ldi	r23, 0x00	; 0
     506:	66 0f       	add	r22, r22
     508:	77 1f       	adc	r23, r23
     50a:	66 0f       	add	r22, r22
     50c:	77 1f       	adc	r23, r23
     50e:	66 0f       	add	r22, r22
     510:	77 1f       	adc	r23, r23
 */
static void remove_current_block_from_board_display(void) {
	for(uint8_t row = 0; row < current_block.height; row++) {
		uint8_t board_row = row + current_block.row;
		for(uint8_t col = 0; col < current_block.width; col++) {
			if(current_block.pattern[row] & (1 << col)) {
     512:	8c 91       	ld	r24, X
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	02 2e       	mov	r0, r18
     518:	02 c0       	rjmp	.+4      	; 0x51e <remove_current_block_from_board_display+0x50>
     51a:	95 95       	asr	r25
     51c:	87 95       	ror	r24
     51e:	0a 94       	dec	r0
     520:	e2 f7       	brpl	.-8      	; 0x51a <remove_current_block_from_board_display+0x4c>
     522:	80 ff       	sbrs	r24, 0
     524:	08 c0       	rjmp	.+16     	; 0x536 <remove_current_block_from_board_display+0x68>
     526:	85 2f       	mov	r24, r21
     528:	82 1b       	sub	r24, r18
				// This position in the block is occupied - zero it out
				// in the display
				uint8_t board_column = col + current_block.column;
				uint8_t display_column = BOARD_WIDTH - board_column - 1;
				board_display[board_row][display_column] = 0;
     52a:	fb 01       	movw	r30, r22
     52c:	e8 0f       	add	r30, r24
     52e:	f1 1d       	adc	r31, r1
     530:	e0 57       	subi	r30, 0x70	; 112
     532:	fe 4f       	sbci	r31, 0xFE	; 254
     534:	10 82       	st	Z, r1
     536:	2f 5f       	subi	r18, 0xFF	; 255
     538:	3f 4f       	sbci	r19, 0xFF	; 255
 * Remove the current block from the display structure
 */
static void remove_current_block_from_board_display(void) {
	for(uint8_t row = 0; row < current_block.height; row++) {
		uint8_t board_row = row + current_block.row;
		for(uint8_t col = 0; col < current_block.width; col++) {
     53a:	24 17       	cp	r18, r20
     53c:	50 f3       	brcs	.-44     	; 0x512 <remove_current_block_from_board_display+0x44>

/*
 * Remove the current block from the display structure
 */
static void remove_current_block_from_board_display(void) {
	for(uint8_t row = 0; row < current_block.height; row++) {
     53e:	cf 5f       	subi	r28, 0xFF	; 255
     540:	11 96       	adiw	r26, 0x01	; 1
     542:	cd 17       	cp	r28, r29
     544:	c8 f2       	brcs	.-78     	; 0x4f8 <remove_current_block_from_board_display+0x2a>
				uint8_t display_column = BOARD_WIDTH - board_column - 1;
				board_display[board_row][display_column] = 0;
			}
		}
	}
}
     546:	df 91       	pop	r29
     548:	cf 91       	pop	r28
     54a:	1f 91       	pop	r17
     54c:	0f 91       	pop	r16
     54e:	ff 90       	pop	r15
     550:	08 95       	ret

00000552 <add_current_block_to_board_display>:

/*
 * Add the current block to the display structure
 */
static void add_current_block_to_board_display(void) {
     552:	ef 92       	push	r14
     554:	ff 92       	push	r15
     556:	0f 93       	push	r16
     558:	1f 93       	push	r17
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
	for(uint8_t row = 0; row < current_block.height; row++) {
     55e:	10 91 28 02 	lds	r17, 0x0228
     562:	11 23       	and	r17, r17
     564:	a1 f1       	breq	.+104    	; 0x5ce <add_current_block_to_board_display+0x7c>
		uint8_t board_row = row + current_block.row;
     566:	e0 e2       	ldi	r30, 0x20	; 32
     568:	f2 e0       	ldi	r31, 0x02	; 2
     56a:	04 81       	ldd	r16, Z+4	; 0x04
		for(uint8_t col = 0; col < current_block.width; col++) {
     56c:	47 81       	ldd	r20, Z+7	; 0x07
     56e:	85 81       	ldd	r24, Z+5	; 0x05
     570:	57 e0       	ldi	r21, 0x07	; 7
     572:	58 1b       	sub	r21, r24
			if(current_block.pattern[row] & (1 << col)) {
				// This position in the block is occupied - add it to
				// the board display 
				uint8_t board_column = col + current_block.column;
				uint8_t display_column = BOARD_WIDTH - board_column - 1;
				board_display[board_row][display_column] = current_block.colour;
     574:	c3 81       	ldd	r28, Z+3	; 0x03
     576:	a1 81       	ldd	r26, Z+1	; 0x01
     578:	b2 81       	ldd	r27, Z+2	; 0x02
     57a:	d0 e0       	ldi	r29, 0x00	; 0
 * Add the current block to the display structure
 */
static void add_current_block_to_board_display(void) {
	for(uint8_t row = 0; row < current_block.height; row++) {
		uint8_t board_row = row + current_block.row;
		for(uint8_t col = 0; col < current_block.width; col++) {
     57c:	e1 2c       	mov	r14, r1
     57e:	f1 2c       	mov	r15, r1
     580:	6d 2f       	mov	r22, r29
     582:	60 0f       	add	r22, r16
     584:	44 23       	and	r20, r20
     586:	f9 f0       	breq	.+62     	; 0x5c6 <add_current_block_to_board_display+0x74>
     588:	2e 2d       	mov	r18, r14
     58a:	3f 2d       	mov	r19, r15
			if(current_block.pattern[row] & (1 << col)) {
				// This position in the block is occupied - add it to
				// the board display 
				uint8_t board_column = col + current_block.column;
				uint8_t display_column = BOARD_WIDTH - board_column - 1;
				board_display[board_row][display_column] = current_block.colour;
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	66 0f       	add	r22, r22
     590:	77 1f       	adc	r23, r23
     592:	66 0f       	add	r22, r22
     594:	77 1f       	adc	r23, r23
     596:	66 0f       	add	r22, r22
     598:	77 1f       	adc	r23, r23
 */
static void add_current_block_to_board_display(void) {
	for(uint8_t row = 0; row < current_block.height; row++) {
		uint8_t board_row = row + current_block.row;
		for(uint8_t col = 0; col < current_block.width; col++) {
			if(current_block.pattern[row] & (1 << col)) {
     59a:	8c 91       	ld	r24, X
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	02 2e       	mov	r0, r18
     5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <add_current_block_to_board_display+0x54>
     5a2:	95 95       	asr	r25
     5a4:	87 95       	ror	r24
     5a6:	0a 94       	dec	r0
     5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <add_current_block_to_board_display+0x50>
     5aa:	80 ff       	sbrs	r24, 0
     5ac:	08 c0       	rjmp	.+16     	; 0x5be <add_current_block_to_board_display+0x6c>
     5ae:	85 2f       	mov	r24, r21
     5b0:	82 1b       	sub	r24, r18
				// This position in the block is occupied - add it to
				// the board display 
				uint8_t board_column = col + current_block.column;
				uint8_t display_column = BOARD_WIDTH - board_column - 1;
				board_display[board_row][display_column] = current_block.colour;
     5b2:	fb 01       	movw	r30, r22
     5b4:	e8 0f       	add	r30, r24
     5b6:	f1 1d       	adc	r31, r1
     5b8:	e0 57       	subi	r30, 0x70	; 112
     5ba:	fe 4f       	sbci	r31, 0xFE	; 254
     5bc:	c0 83       	st	Z, r28
     5be:	2f 5f       	subi	r18, 0xFF	; 255
     5c0:	3f 4f       	sbci	r19, 0xFF	; 255
 * Add the current block to the display structure
 */
static void add_current_block_to_board_display(void) {
	for(uint8_t row = 0; row < current_block.height; row++) {
		uint8_t board_row = row + current_block.row;
		for(uint8_t col = 0; col < current_block.width; col++) {
     5c2:	24 17       	cp	r18, r20
     5c4:	50 f3       	brcs	.-44     	; 0x59a <add_current_block_to_board_display+0x48>

/*
 * Add the current block to the display structure
 */
static void add_current_block_to_board_display(void) {
	for(uint8_t row = 0; row < current_block.height; row++) {
     5c6:	df 5f       	subi	r29, 0xFF	; 255
     5c8:	11 96       	adiw	r26, 0x01	; 1
     5ca:	d1 17       	cp	r29, r17
     5cc:	c8 f2       	brcs	.-78     	; 0x580 <add_current_block_to_board_display+0x2e>
				uint8_t display_column = BOARD_WIDTH - board_column - 1;
				board_display[board_row][display_column] = current_block.colour;
			}
		}
	}
}
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	1f 91       	pop	r17
     5d4:	0f 91       	pop	r16
     5d6:	ff 90       	pop	r15
     5d8:	ef 90       	pop	r14
     5da:	08 95       	ret

000005dc <update_rows_on_display>:
/* 
 * Copy board to LED display for the rows given.
 * Note that each "row" in the board corresponds to a column for
 * the LED matrix.
 */
void update_rows_on_display(uint8_t row_start, uint8_t num_rows) {
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	c8 2f       	mov	r28, r24
     5e2:	df ef       	ldi	r29, 0xFF	; 255
     5e4:	d6 0f       	add	r29, r22
	uint8_t row_end = row_start + num_rows - 1;
     5e6:	d8 0f       	add	r29, r24
	for(uint8_t row_num = row_start; row_num <= row_end; row_num++) {
     5e8:	d8 17       	cp	r29, r24
     5ea:	80 f0       	brcs	.+32     	; 0x60c <update_rows_on_display+0x30>
		ledmatrix_update_column(row_num, board_display[row_num]);
     5ec:	6c 2f       	mov	r22, r28
     5ee:	70 e0       	ldi	r23, 0x00	; 0
     5f0:	66 0f       	add	r22, r22
     5f2:	77 1f       	adc	r23, r23
     5f4:	66 0f       	add	r22, r22
     5f6:	77 1f       	adc	r23, r23
     5f8:	66 0f       	add	r22, r22
     5fa:	77 1f       	adc	r23, r23
     5fc:	60 57       	subi	r22, 0x70	; 112
     5fe:	7e 4f       	sbci	r23, 0xFE	; 254
     600:	8c 2f       	mov	r24, r28
     602:	0e 94 8d 04 	call	0x91a	; 0x91a <ledmatrix_update_column>
 * Note that each "row" in the board corresponds to a column for
 * the LED matrix.
 */
void update_rows_on_display(uint8_t row_start, uint8_t num_rows) {
	uint8_t row_end = row_start + num_rows - 1;
	for(uint8_t row_num = row_start; row_num <= row_end; row_num++) {
     606:	cf 5f       	subi	r28, 0xFF	; 255
     608:	dc 17       	cp	r29, r28
     60a:	80 f7       	brcc	.-32     	; 0x5ec <update_rows_on_display+0x10>
		ledmatrix_update_column(row_num, board_display[row_num]);
	}
}
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	08 95       	ret

00000612 <add_random_block>:

/*
 * Add random block, return false (0) if we can't add the block - this
 * means the game is over, otherwise we return 1.
 */
static uint8_t add_random_block(void) {
     612:	0f 93       	push	r16
     614:	1f 93       	push	r17
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62
     61e:	29 97       	sbiw	r28, 0x09	; 9
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	f8 94       	cli
     624:	de bf       	out	0x3e, r29	; 62
     626:	0f be       	out	0x3f, r0	; 63
     628:	cd bf       	out	0x3d, r28	; 61
	current_block = generate_random_block();
     62a:	ce 01       	movw	r24, r28
     62c:	01 96       	adiw	r24, 0x01	; 1
     62e:	0e 94 08 01 	call	0x210	; 0x210 <generate_random_block>
     632:	89 e0       	ldi	r24, 0x09	; 9
     634:	fe 01       	movw	r30, r28
     636:	31 96       	adiw	r30, 0x01	; 1
     638:	a0 e2       	ldi	r26, 0x20	; 32
     63a:	b2 e0       	ldi	r27, 0x02	; 2
     63c:	01 90       	ld	r0, Z+
     63e:	0d 92       	st	X+, r0
     640:	8a 95       	dec	r24
     642:	e1 f7       	brne	.-8      	; 0x63c <add_random_block+0x2a>
	// Check if the block will collide with the fixed blocks on the board
	if(block_collides(current_block)) {
     644:	00 91 20 02 	lds	r16, 0x0220
     648:	10 91 21 02 	lds	r17, 0x0221
     64c:	20 91 22 02 	lds	r18, 0x0222
     650:	30 91 23 02 	lds	r19, 0x0223
     654:	40 91 24 02 	lds	r20, 0x0224
     658:	50 91 25 02 	lds	r21, 0x0225
     65c:	60 91 26 02 	lds	r22, 0x0226
     660:	70 91 27 02 	lds	r23, 0x0227
     664:	80 91 28 02 	lds	r24, 0x0228
     668:	0e 94 0b 02 	call	0x416	; 0x416 <block_collides>
     66c:	81 11       	cpse	r24, r1
     66e:	0a c0       	rjmp	.+20     	; 0x684 <add_random_block+0x72>
	}
	
	/* Block won't collide with fixed blocks on the board so 
	 * we update our board display.
	 */
	add_current_block_to_board_display();
     670:	0e 94 a9 02 	call	0x552	; 0x552 <add_current_block_to_board_display>
	
	// Update the display for the rows which are affected
	update_rows_on_display(current_block.row, current_block.height);
     674:	e0 e2       	ldi	r30, 0x20	; 32
     676:	f2 e0       	ldi	r31, 0x02	; 2
     678:	60 85       	ldd	r22, Z+8	; 0x08
     67a:	84 81       	ldd	r24, Z+4	; 0x04
     67c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <update_rows_on_display>
	
	// The addition succeeded - return true
	return 1;
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	01 c0       	rjmp	.+2      	; 0x686 <add_random_block+0x74>
	// Check if the block will collide with the fixed blocks on the board
	if(block_collides(current_block)) {
		/* Block will collide. We don't add the block - just return 0 - 
		 * the game is over.
		 */
		return 0;
     684:	80 e0       	ldi	r24, 0x00	; 0
	// Update the display for the rows which are affected
	update_rows_on_display(current_block.row, current_block.height);
	
	// The addition succeeded - return true
	return 1;
}
     686:	29 96       	adiw	r28, 0x09	; 9
     688:	0f b6       	in	r0, 0x3f	; 63
     68a:	f8 94       	cli
     68c:	de bf       	out	0x3e, r29	; 62
     68e:	0f be       	out	0x3f, r0	; 63
     690:	cd bf       	out	0x3d, r28	; 61
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	1f 91       	pop	r17
     698:	0f 91       	pop	r16
     69a:	08 95       	ret

0000069c <init_game>:
 * Initialise board - all the row data will be empty (0) and we
 * create an initial random block and add it to the top of the board.
 */
void init_game(void) {	
	// Clear the LED matrix
	ledmatrix_clear();
     69c:	0e 94 af 04 	call	0x95e	; 0x95e <ledmatrix_clear>
     6a0:	a0 e1       	ldi	r26, 0x10	; 16
     6a2:	b2 e0       	ldi	r27, 0x02	; 2
     6a4:	20 e9       	ldi	r18, 0x90	; 144
     6a6:	31 e0       	ldi	r19, 0x01	; 1
     6a8:	40 e1       	ldi	r20, 0x10	; 16
     6aa:	52 e0       	ldi	r21, 0x02	; 2

	for(uint8_t row=0; row < BOARD_ROWS; row++) {
		board[row] = 0;
		for(uint8_t col=0; col < MATRIX_NUM_ROWS; col++) {
     6ac:	90 e0       	ldi	r25, 0x00	; 0
void init_game(void) {	
	// Clear the LED matrix
	ledmatrix_clear();

	for(uint8_t row=0; row < BOARD_ROWS; row++) {
		board[row] = 0;
     6ae:	1d 92       	st	X+, r1
     6b0:	f9 01       	movw	r30, r18
		for(uint8_t col=0; col < MATRIX_NUM_ROWS; col++) {
     6b2:	89 2f       	mov	r24, r25
			board_display[row][col] = 0;
     6b4:	11 92       	st	Z+, r1
	// Clear the LED matrix
	ledmatrix_clear();

	for(uint8_t row=0; row < BOARD_ROWS; row++) {
		board[row] = 0;
		for(uint8_t col=0; col < MATRIX_NUM_ROWS; col++) {
     6b6:	8f 5f       	subi	r24, 0xFF	; 255
     6b8:	88 30       	cpi	r24, 0x08	; 8
     6ba:	e1 f7       	brne	.-8      	; 0x6b4 <init_game+0x18>
     6bc:	28 5f       	subi	r18, 0xF8	; 248
     6be:	3f 4f       	sbci	r19, 0xFF	; 255
 */
void init_game(void) {	
	// Clear the LED matrix
	ledmatrix_clear();

	for(uint8_t row=0; row < BOARD_ROWS; row++) {
     6c0:	24 17       	cp	r18, r20
     6c2:	35 07       	cpc	r19, r21
     6c4:	a1 f7       	brne	.-24     	; 0x6ae <init_game+0x12>
	// Adding a random block will update the "current_block" and 
	// add it to the board.	With an empty board this will always
	// succeed so we ignore the return value - this is indicated 
	// by the (void) cast. This function will update the display
	// for the required rows.
	(void)add_random_block();
     6c6:	0e 94 09 03 	call	0x612	; 0x612 <add_random_block>
     6ca:	08 95       	ret

000006cc <attempt_move>:
 * This succeeds if
 * (1) the block isn't all the way to the side, and
 * (2) the board contains no blocks in that position.
 * Returns 1 if move successful, 0 otherwise.
 */
uint8_t attempt_move(int8_t direction) {	
     6cc:	0f 93       	push	r16
     6ce:	1f 93       	push	r17
     6d0:	cf 93       	push	r28
     6d2:	df 93       	push	r29
     6d4:	cd b7       	in	r28, 0x3d	; 61
     6d6:	de b7       	in	r29, 0x3e	; 62
     6d8:	29 97       	sbiw	r28, 0x09	; 9
     6da:	0f b6       	in	r0, 0x3f	; 63
     6dc:	f8 94       	cli
     6de:	de bf       	out	0x3e, r29	; 62
     6e0:	0f be       	out	0x3f, r0	; 63
     6e2:	cd bf       	out	0x3d, r28	; 61
	// Make a copy of the current block - we carry out the 
	// operations on the copy and copy it over to the current_block
	// if all is successful
	FallingBlock tmp_block = current_block;
     6e4:	99 e0       	ldi	r25, 0x09	; 9
     6e6:	e0 e2       	ldi	r30, 0x20	; 32
     6e8:	f2 e0       	ldi	r31, 0x02	; 2
     6ea:	de 01       	movw	r26, r28
     6ec:	11 96       	adiw	r26, 0x01	; 1
     6ee:	01 90       	ld	r0, Z+
     6f0:	0d 92       	st	X+, r0
     6f2:	9a 95       	dec	r25
     6f4:	e1 f7       	brne	.-8      	; 0x6ee <attempt_move+0x22>
	
	if(direction == MOVE_LEFT) {
     6f6:	81 11       	cpse	r24, r1
     6f8:	07 c0       	rjmp	.+14     	; 0x708 <attempt_move+0x3c>
		if(!move_block_left(&tmp_block)) {
     6fa:	ce 01       	movw	r24, r28
     6fc:	01 96       	adiw	r24, 0x01	; 1
     6fe:	0e 94 62 01 	call	0x2c4	; 0x2c4 <move_block_left>
     702:	81 11       	cpse	r24, r1
     704:	07 c0       	rjmp	.+14     	; 0x714 <attempt_move+0x48>
     706:	28 c0       	rjmp	.+80     	; 0x758 <attempt_move+0x8c>
			// Block was too far left - can't be moved
			return 0;
		}
	} else {
		// Attempt a move to the right
		if(!move_block_right(&tmp_block)) {
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <move_block_right>
     710:	88 23       	and	r24, r24
     712:	21 f1       	breq	.+72     	; 0x75c <attempt_move+0x90>
		}
	}
	
	// The temporary block wasn't at the edge and has been moved
	// Now check whether it collides with any blocks on the board.
	if(block_collides(tmp_block)) {
     714:	09 81       	ldd	r16, Y+1	; 0x01
     716:	1a 81       	ldd	r17, Y+2	; 0x02
     718:	2b 81       	ldd	r18, Y+3	; 0x03
     71a:	3c 81       	ldd	r19, Y+4	; 0x04
     71c:	4d 81       	ldd	r20, Y+5	; 0x05
     71e:	5e 81       	ldd	r21, Y+6	; 0x06
     720:	6f 81       	ldd	r22, Y+7	; 0x07
     722:	78 85       	ldd	r23, Y+8	; 0x08
     724:	89 85       	ldd	r24, Y+9	; 0x09
     726:	0e 94 0b 02 	call	0x416	; 0x416 <block_collides>
     72a:	81 11       	cpse	r24, r1
     72c:	19 c0       	rjmp	.+50     	; 0x760 <attempt_move+0x94>
	}
	
	// Block won't collide with other blocks so we can lock in the move.
	// First remove the current block from the display, update the current
	// block, then add it back to the board display
	remove_current_block_from_board_display();
     72e:	0e 94 67 02 	call	0x4ce	; 0x4ce <remove_current_block_from_board_display>
	current_block = tmp_block;
     732:	89 e0       	ldi	r24, 0x09	; 9
     734:	fe 01       	movw	r30, r28
     736:	31 96       	adiw	r30, 0x01	; 1
     738:	a0 e2       	ldi	r26, 0x20	; 32
     73a:	b2 e0       	ldi	r27, 0x02	; 2
     73c:	01 90       	ld	r0, Z+
     73e:	0d 92       	st	X+, r0
     740:	8a 95       	dec	r24
     742:	e1 f7       	brne	.-8      	; 0x73c <attempt_move+0x70>
	add_current_block_to_board_display();
     744:	0e 94 a9 02 	call	0x552	; 0x552 <add_current_block_to_board_display>
	
	// Update the rows which are affected
	update_rows_on_display(current_block.row, current_block.height);
     748:	e0 e2       	ldi	r30, 0x20	; 32
     74a:	f2 e0       	ldi	r31, 0x02	; 2
     74c:	60 85       	ldd	r22, Z+8	; 0x08
     74e:	84 81       	ldd	r24, Z+4	; 0x04
     750:	0e 94 ee 02 	call	0x5dc	; 0x5dc <update_rows_on_display>
	return 1;
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	05 c0       	rjmp	.+10     	; 0x762 <attempt_move+0x96>
	FallingBlock tmp_block = current_block;
	
	if(direction == MOVE_LEFT) {
		if(!move_block_left(&tmp_block)) {
			// Block was too far left - can't be moved
			return 0;
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	03 c0       	rjmp	.+6      	; 0x762 <attempt_move+0x96>
		}
	} else {
		// Attempt a move to the right
		if(!move_block_right(&tmp_block)) {
			// Block was too far right - can't be moved
			return 0;
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	01 c0       	rjmp	.+2      	; 0x762 <attempt_move+0x96>
	// The temporary block wasn't at the edge and has been moved
	// Now check whether it collides with any blocks on the board.
	if(block_collides(tmp_block)) {
		// Block will collide with other blocks so the move can't be
		// made.
		return 0;
     760:	80 e0       	ldi	r24, 0x00	; 0
	add_current_block_to_board_display();
	
	// Update the rows which are affected
	update_rows_on_display(current_block.row, current_block.height);
	return 1;
}
     762:	29 96       	adiw	r28, 0x09	; 9
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	f8 94       	cli
     768:	de bf       	out	0x3e, r29	; 62
     76a:	0f be       	out	0x3f, r0	; 63
     76c:	cd bf       	out	0x3d, r28	; 61
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	1f 91       	pop	r17
     774:	0f 91       	pop	r16
     776:	08 95       	ret

00000778 <attempt_drop_block_one_row>:
 * Attempt to drop the current block by one row. This succeeds unless there
 * are squares blocked on the row below or we're at the bottom of
 * the board. Returns 1 if drop succeeded,  0 otherwise. 
 * (If the drop fails, the caller should add the block to the board.)
*/
uint8_t attempt_drop_block_one_row(void) {
     778:	ff 92       	push	r15
     77a:	0f 93       	push	r16
     77c:	1f 93       	push	r17
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
     782:	cd b7       	in	r28, 0x3d	; 61
     784:	de b7       	in	r29, 0x3e	; 62
     786:	29 97       	sbiw	r28, 0x09	; 9
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	f8 94       	cli
     78c:	de bf       	out	0x3e, r29	; 62
     78e:	0f be       	out	0x3f, r0	; 63
     790:	cd bf       	out	0x3d, r28	; 61
	/*
	 * Check if the block has reached the bottom of the board.
	 * If so, do nothing and return false
	 */
	if(current_block.row + current_block.height >= BOARD_ROWS) {
     792:	e0 e2       	ldi	r30, 0x20	; 32
     794:	f2 e0       	ldi	r31, 0x02	; 2
     796:	44 81       	ldd	r20, Z+4	; 0x04
     798:	80 85       	ldd	r24, Z+8	; 0x08
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	84 0f       	add	r24, r20
     79e:	91 1d       	adc	r25, r1
     7a0:	40 97       	sbiw	r24, 0x10	; 16
     7a2:	7c f5       	brge	.+94     	; 0x802 <attempt_drop_block_one_row+0x8a>
	
	/* Create a temporary block as a copy of the current block.
	 * Move it down 1 row and check whether it collides with
	 * any fixed blocks.
	 */
	FallingBlock tmp_block = current_block;
     7a4:	89 e0       	ldi	r24, 0x09	; 9
     7a6:	de 01       	movw	r26, r28
     7a8:	11 96       	adiw	r26, 0x01	; 1
     7aa:	01 90       	ld	r0, Z+
     7ac:	0d 92       	st	X+, r0
     7ae:	8a 95       	dec	r24
     7b0:	e1 f7       	brne	.-8      	; 0x7aa <attempt_drop_block_one_row+0x32>
	tmp_block.row += 1;
     7b2:	ff 24       	eor	r15, r15
     7b4:	f3 94       	inc	r15
     7b6:	f4 0e       	add	r15, r20
	if(block_collides(tmp_block)) {
     7b8:	09 81       	ldd	r16, Y+1	; 0x01
     7ba:	1a 81       	ldd	r17, Y+2	; 0x02
     7bc:	2b 81       	ldd	r18, Y+3	; 0x03
     7be:	3c 81       	ldd	r19, Y+4	; 0x04
     7c0:	4f 2d       	mov	r20, r15
     7c2:	5e 81       	ldd	r21, Y+6	; 0x06
     7c4:	6f 81       	ldd	r22, Y+7	; 0x07
     7c6:	78 85       	ldd	r23, Y+8	; 0x08
     7c8:	89 85       	ldd	r24, Y+9	; 0x09
     7ca:	0e 94 0b 02 	call	0x416	; 0x416 <block_collides>
     7ce:	81 11       	cpse	r24, r1
     7d0:	1a c0       	rjmp	.+52     	; 0x806 <attempt_drop_block_one_row+0x8e>
		// Block will collide if moved down - so we can't move it
		return 0;
	}
	
	// Move would succeed - so we make it happen
	remove_current_block_from_board_display();
     7d2:	0e 94 67 02 	call	0x4ce	; 0x4ce <remove_current_block_from_board_display>
	current_block = tmp_block;
     7d6:	fd 82       	std	Y+5, r15	; 0x05
     7d8:	89 e0       	ldi	r24, 0x09	; 9
     7da:	fe 01       	movw	r30, r28
     7dc:	31 96       	adiw	r30, 0x01	; 1
     7de:	a0 e2       	ldi	r26, 0x20	; 32
     7e0:	b2 e0       	ldi	r27, 0x02	; 2
     7e2:	01 90       	ld	r0, Z+
     7e4:	0d 92       	st	X+, r0
     7e6:	8a 95       	dec	r24
     7e8:	e1 f7       	brne	.-8      	; 0x7e2 <attempt_drop_block_one_row+0x6a>
	add_current_block_to_board_display();
     7ea:	0e 94 a9 02 	call	0x552	; 0x552 <add_current_block_to_board_display>
	
	// Update the rows which are affected - starting from the row before
	// where the current block is.
	update_rows_on_display(current_block.row - 1, current_block.height + 1);
     7ee:	e0 e2       	ldi	r30, 0x20	; 32
     7f0:	f2 e0       	ldi	r31, 0x02	; 2
     7f2:	60 85       	ldd	r22, Z+8	; 0x08
     7f4:	6f 5f       	subi	r22, 0xFF	; 255
     7f6:	84 81       	ldd	r24, Z+4	; 0x04
     7f8:	81 50       	subi	r24, 0x01	; 1
     7fa:	0e 94 ee 02 	call	0x5dc	; 0x5dc <update_rows_on_display>
	
	// Move was successful - indicate so
	return 1;
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	03 c0       	rjmp	.+6      	; 0x808 <attempt_drop_block_one_row+0x90>
	/*
	 * Check if the block has reached the bottom of the board.
	 * If so, do nothing and return false
	 */
	if(current_block.row + current_block.height >= BOARD_ROWS) {
		return 0;
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	01 c0       	rjmp	.+2      	; 0x808 <attempt_drop_block_one_row+0x90>
	 */
	FallingBlock tmp_block = current_block;
	tmp_block.row += 1;
	if(block_collides(tmp_block)) {
		// Block will collide if moved down - so we can't move it
		return 0;
     806:	80 e0       	ldi	r24, 0x00	; 0
	// where the current block is.
	update_rows_on_display(current_block.row - 1, current_block.height + 1);
	
	// Move was successful - indicate so
	return 1;
}
     808:	29 96       	adiw	r28, 0x09	; 9
     80a:	0f b6       	in	r0, 0x3f	; 63
     80c:	f8 94       	cli
     80e:	de bf       	out	0x3e, r29	; 62
     810:	0f be       	out	0x3f, r0	; 63
     812:	cd bf       	out	0x3d, r28	; 61
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	ff 90       	pop	r15
     81e:	08 95       	ret

00000820 <attempt_drop_block>:

uint8_t attempt_drop_block(void) {
	while(attempt_drop_block_one_row()){
     820:	0e 94 bc 03 	call	0x778	; 0x778 <attempt_drop_block_one_row>
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	81 11       	cpse	r24, r1
     828:	01 c0       	rjmp	.+2      	; 0x82c <attempt_drop_block+0xc>
     82a:	90 e0       	ldi	r25, 0x00	; 0
		return 1;
	}
	return 0;
}
     82c:	89 2f       	mov	r24, r25
     82e:	08 95       	ret

00000830 <attempt_rotation>:
 * Attempt to rotate the block clockwise 90 degrees. Returns 1 if the
 * rotation is successful, 0 otherwise (e.g. a block on the board
 * blocks the rotation or the block is too close to the left edge to 
 * rotate).
 */
uint8_t attempt_rotation(void) {
     830:	0f 93       	push	r16
     832:	1f 93       	push	r17
     834:	cf 93       	push	r28
     836:	df 93       	push	r29
     838:	cd b7       	in	r28, 0x3d	; 61
     83a:	de b7       	in	r29, 0x3e	; 62
     83c:	29 97       	sbiw	r28, 0x09	; 9
     83e:	0f b6       	in	r0, 0x3f	; 63
     840:	f8 94       	cli
     842:	de bf       	out	0x3e, r29	; 62
     844:	0f be       	out	0x3f, r0	; 63
     846:	cd bf       	out	0x3d, r28	; 61
	// Make a copy of the current block - we carry out the
	// operations on the copy and copy it back to the current_block
	// if all is successful
	FallingBlock tmp_block = current_block;
     848:	89 e0       	ldi	r24, 0x09	; 9
     84a:	e0 e2       	ldi	r30, 0x20	; 32
     84c:	f2 e0       	ldi	r31, 0x02	; 2
     84e:	de 01       	movw	r26, r28
     850:	11 96       	adiw	r26, 0x01	; 1
     852:	01 90       	ld	r0, Z+
     854:	0d 92       	st	X+, r0
     856:	8a 95       	dec	r24
     858:	e1 f7       	brne	.-8      	; 0x852 <attempt_rotation+0x22>
	
	if(!rotate_block(&tmp_block)) {
     85a:	ce 01       	movw	r24, r28
     85c:	01 96       	adiw	r24, 0x01	; 1
     85e:	0e 94 2b 01 	call	0x256	; 0x256 <rotate_block>
     862:	88 23       	and	r24, r24
     864:	39 f1       	breq	.+78     	; 0x8b4 <attempt_rotation+0x84>
		return 0;
	}
	
	// The temporary block has been rotated. 
	// Now check whether it collides with any blocks on the board.
	if(block_collides(tmp_block)) {
     866:	09 81       	ldd	r16, Y+1	; 0x01
     868:	1a 81       	ldd	r17, Y+2	; 0x02
     86a:	2b 81       	ldd	r18, Y+3	; 0x03
     86c:	3c 81       	ldd	r19, Y+4	; 0x04
     86e:	4d 81       	ldd	r20, Y+5	; 0x05
     870:	5e 81       	ldd	r21, Y+6	; 0x06
     872:	6f 81       	ldd	r22, Y+7	; 0x07
     874:	78 85       	ldd	r23, Y+8	; 0x08
     876:	89 85       	ldd	r24, Y+9	; 0x09
     878:	0e 94 0b 02 	call	0x416	; 0x416 <block_collides>
     87c:	81 11       	cpse	r24, r1
     87e:	1c c0       	rjmp	.+56     	; 0x8b8 <attempt_rotation+0x88>
	}
	
	// Block won't collide with other blocks so we can lock in the move.
	// First determine the number of rows affected (to be redrawn) -
	// will be maximum of those in block before and after rotation
	uint8_t rows_affected = tmp_block.height;
     880:	89 85       	ldd	r24, Y+9	; 0x09
	if(current_block.height > tmp_block.height) {
     882:	10 91 28 02 	lds	r17, 0x0228
     886:	18 17       	cp	r17, r24
     888:	08 f4       	brcc	.+2      	; 0x88c <attempt_rotation+0x5c>
     88a:	18 2f       	mov	r17, r24
		rows_affected = current_block.height;
	}	
	
	// Second remove the current block from the display, update the current
	// block to the rotated version, then add it back to the board display
	remove_current_block_from_board_display();
     88c:	0e 94 67 02 	call	0x4ce	; 0x4ce <remove_current_block_from_board_display>
	current_block = tmp_block;
     890:	89 e0       	ldi	r24, 0x09	; 9
     892:	fe 01       	movw	r30, r28
     894:	31 96       	adiw	r30, 0x01	; 1
     896:	a0 e2       	ldi	r26, 0x20	; 32
     898:	b2 e0       	ldi	r27, 0x02	; 2
     89a:	01 90       	ld	r0, Z+
     89c:	0d 92       	st	X+, r0
     89e:	8a 95       	dec	r24
     8a0:	e1 f7       	brne	.-8      	; 0x89a <attempt_rotation+0x6a>
	add_current_block_to_board_display();
     8a2:	0e 94 a9 02 	call	0x552	; 0x552 <add_current_block_to_board_display>

	update_rows_on_display(current_block.row, rows_affected);
     8a6:	61 2f       	mov	r22, r17
     8a8:	80 91 24 02 	lds	r24, 0x0224
     8ac:	0e 94 ee 02 	call	0x5dc	; 0x5dc <update_rows_on_display>
	
	// Rotation has happened - return true
	return 1;
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	03 c0       	rjmp	.+6      	; 0x8ba <attempt_rotation+0x8a>
	// if all is successful
	FallingBlock tmp_block = current_block;
	
	if(!rotate_block(&tmp_block)) {
		// Block was too far left to rotate	- abort
		return 0;
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	01 c0       	rjmp	.+2      	; 0x8ba <attempt_rotation+0x8a>
	// The temporary block has been rotated. 
	// Now check whether it collides with any blocks on the board.
	if(block_collides(tmp_block)) {
		// Block will collide with other blocks so the rotate can't be
		// made.
		return 0;
     8b8:	80 e0       	ldi	r24, 0x00	; 0

	update_rows_on_display(current_block.row, rows_affected);
	
	// Rotation has happened - return true
	return 1;
}
     8ba:	29 96       	adiw	r28, 0x09	; 9
     8bc:	0f b6       	in	r0, 0x3f	; 63
     8be:	f8 94       	cli
     8c0:	de bf       	out	0x3e, r29	; 62
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	cd bf       	out	0x3d, r28	; 61
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	1f 91       	pop	r17
     8cc:	0f 91       	pop	r16
     8ce:	08 95       	ret

000008d0 <fix_block_to_board_and_add_new_block>:
 * bitwise OR for each row that contains the block.	No display update is
 * required. We then attempt to add a new block to the top of the board.
 * If this suceeds, we return 1, otherwise we return 0 (meaning game over).
 */
uint8_t fix_block_to_board_and_add_new_block(void) {
	for(uint8_t row = 0; row < current_block.height; row++) {
     8d0:	30 91 28 02 	lds	r19, 0x0228
     8d4:	33 23       	and	r19, r19
     8d6:	d1 f0       	breq	.+52     	; 0x90c <__stack+0xd>
		uint8_t board_row = current_block.row + row;
     8d8:	e0 e2       	ldi	r30, 0x20	; 32
     8da:	f2 e0       	ldi	r31, 0x02	; 2
     8dc:	64 81       	ldd	r22, Z+4	; 0x04
		board[board_row] |= 
				(current_block.pattern[row]	<< current_block.column);
     8de:	45 81       	ldd	r20, Z+5	; 0x05
     8e0:	a1 81       	ldd	r26, Z+1	; 0x01
     8e2:	b2 81       	ldd	r27, Z+2	; 0x02
     8e4:	20 e0       	ldi	r18, 0x00	; 0
     8e6:	e2 2f       	mov	r30, r18
     8e8:	e6 0f       	add	r30, r22
 * If this suceeds, we return 1, otherwise we return 0 (meaning game over).
 */
uint8_t fix_block_to_board_and_add_new_block(void) {
	for(uint8_t row = 0; row < current_block.height; row++) {
		uint8_t board_row = current_block.row + row;
		board[board_row] |= 
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
				(current_block.pattern[row]	<< current_block.column);
     8ec:	8d 91       	ld	r24, X+
 * If this suceeds, we return 1, otherwise we return 0 (meaning game over).
 */
uint8_t fix_block_to_board_and_add_new_block(void) {
	for(uint8_t row = 0; row < current_block.height; row++) {
		uint8_t board_row = current_block.row + row;
		board[board_row] |= 
     8ee:	e0 5f       	subi	r30, 0xF0	; 240
     8f0:	fd 4f       	sbci	r31, 0xFD	; 253
				(current_block.pattern[row]	<< current_block.column);
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	04 2e       	mov	r0, r20
     8f6:	02 c0       	rjmp	.+4      	; 0x8fc <fix_block_to_board_and_add_new_block+0x2c>
     8f8:	88 0f       	add	r24, r24
     8fa:	99 1f       	adc	r25, r25
     8fc:	0a 94       	dec	r0
     8fe:	e2 f7       	brpl	.-8      	; 0x8f8 <fix_block_to_board_and_add_new_block+0x28>
 * If this suceeds, we return 1, otherwise we return 0 (meaning game over).
 */
uint8_t fix_block_to_board_and_add_new_block(void) {
	for(uint8_t row = 0; row < current_block.height; row++) {
		uint8_t board_row = current_block.row + row;
		board[board_row] |= 
     900:	90 81       	ld	r25, Z
     902:	89 2b       	or	r24, r25
     904:	80 83       	st	Z, r24
 * bitwise OR for each row that contains the block.	No display update is
 * required. We then attempt to add a new block to the top of the board.
 * If this suceeds, we return 1, otherwise we return 0 (meaning game over).
 */
uint8_t fix_block_to_board_and_add_new_block(void) {
	for(uint8_t row = 0; row < current_block.height; row++) {
     906:	2f 5f       	subi	r18, 0xFF	; 255
     908:	23 17       	cp	r18, r19
     90a:	68 f3       	brcs	.-38     	; 0x8e6 <fix_block_to_board_and_add_new_block+0x16>
		uint8_t board_row = current_block.row + row;
		board[board_row] |= 
				(current_block.pattern[row]	<< current_block.column);
	}
	check_for_completed_rows();
	return add_random_block();
     90c:	0e 94 09 03 	call	0x612	; 0x612 <add_random_block>
}
     910:	08 95       	ret

00000912 <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     912:	80 e8       	ldi	r24, 0x80	; 128
     914:	0e 94 3f 08 	call	0x107e	; 0x107e <spi_setup_master>
     918:	08 95       	ret

0000091a <ledmatrix_update_column>:
     91a:	0f 93       	push	r16
     91c:	1f 93       	push	r17
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
     922:	c8 2f       	mov	r28, r24
     924:	8b 01       	movw	r16, r22
     926:	83 e0       	ldi	r24, 0x03	; 3
     928:	0e 94 67 08 	call	0x10ce	; 0x10ce <spi_send_byte>
     92c:	8c 2f       	mov	r24, r28
     92e:	8f 70       	andi	r24, 0x0F	; 15
     930:	0e 94 67 08 	call	0x10ce	; 0x10ce <spi_send_byte>
     934:	e8 01       	movw	r28, r16
     936:	08 5f       	subi	r16, 0xF8	; 248
     938:	1f 4f       	sbci	r17, 0xFF	; 255
     93a:	89 91       	ld	r24, Y+
     93c:	0e 94 67 08 	call	0x10ce	; 0x10ce <spi_send_byte>
     940:	c0 17       	cp	r28, r16
     942:	d1 07       	cpc	r29, r17
     944:	d1 f7       	brne	.-12     	; 0x93a <ledmatrix_update_column+0x20>
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	08 95       	ret

00000950 <ledmatrix_shift_display_left>:
     950:	84 e0       	ldi	r24, 0x04	; 4
     952:	0e 94 67 08 	call	0x10ce	; 0x10ce <spi_send_byte>
     956:	82 e0       	ldi	r24, 0x02	; 2
     958:	0e 94 67 08 	call	0x10ce	; 0x10ce <spi_send_byte>
     95c:	08 95       	ret

0000095e <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     95e:	8f e0       	ldi	r24, 0x0F	; 15
     960:	0e 94 67 08 	call	0x10ce	; 0x10ce <spi_send_byte>
     964:	08 95       	ret

00000966 <initialise_hardware>:
		handle_game_over();
	}
}

void initialise_hardware(void) {
	ledmatrix_setup();
     966:	0e 94 89 04 	call	0x912	; 0x912 <ledmatrix_setup>
	init_button_interrupts();
     96a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <init_button_interrupts>
	
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200,0);
     96e:	40 e0       	ldi	r20, 0x00	; 0
     970:	60 e0       	ldi	r22, 0x00	; 0
     972:	7b e4       	ldi	r23, 0x4B	; 75
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 57 07 	call	0xeae	; 0xeae <init_serial_stdio>
	
	// Set up our main timer to give us an interrupt every millisecond
	init_timer0();
     97c:	0e 94 a5 08 	call	0x114a	; 0x114a <init_timer0>
	
	// Turn on global interrupts
	sei();
     980:	78 94       	sei
     982:	08 95       	ret

00000984 <splash_screen>:
}

void splash_screen(void) {
     984:	ff 92       	push	r15
     986:	0f 93       	push	r16
     988:	1f 93       	push	r17
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
	// Reset display attributes and clear terminal screen then output a message
	set_display_attribute(TERM_RESET);
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	0e 94 8f 08 	call	0x111e	; 0x111e <set_display_attribute>
	clear_terminal();
     994:	0e 94 86 08 	call	0x110c	; 0x110c <clear_terminal>
	
	hide_cursor();	// We don't need to see the cursor when we're just doing output
     998:	0e 94 9c 08 	call	0x1138	; 0x1138 <hide_cursor>
	move_cursor(3,3);
     99c:	63 e0       	ldi	r22, 0x03	; 3
     99e:	83 e0       	ldi	r24, 0x03	; 3
     9a0:	0e 94 6d 08 	call	0x10da	; 0x10da <move_cursor>
	printf_P(PSTR("Tetris"));
     9a4:	82 ed       	ldi	r24, 0xD2	; 210
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	9f 93       	push	r25
     9aa:	8f 93       	push	r24
     9ac:	0e 94 cb 09 	call	0x1396	; 0x1396 <printf_P>
	
	move_cursor(3,5);
     9b0:	65 e0       	ldi	r22, 0x05	; 5
     9b2:	83 e0       	ldi	r24, 0x03	; 3
     9b4:	0e 94 6d 08 	call	0x10da	; 0x10da <move_cursor>
	set_display_attribute(FG_GREEN);	// Make the text green
     9b8:	80 e2       	ldi	r24, 0x20	; 32
     9ba:	0e 94 8f 08 	call	0x111e	; 0x111e <set_display_attribute>
	printf_P(PSTR("CSSE2010/7201 Tetris Project by James Bentley"));	
     9be:	84 ea       	ldi	r24, 0xA4	; 164
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	9f 93       	push	r25
     9c4:	8f 93       	push	r24
     9c6:	0e 94 cb 09 	call	0x1396	; 0x1396 <printf_P>
	set_display_attribute(FG_WHITE);	// Return to default colour (White)
     9ca:	85 e2       	ldi	r24, 0x25	; 37
     9cc:	0e 94 8f 08 	call	0x111e	; 0x111e <set_display_attribute>
	
	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
     9d0:	0e 94 af 04 	call	0x95e	; 0x95e <ledmatrix_clear>
     9d4:	0f 90       	pop	r0
     9d6:	0f 90       	pop	r0
     9d8:	0f 90       	pop	r0
     9da:	0f 90       	pop	r0
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
     9dc:	cf e0       	ldi	r28, 0x0F	; 15
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
			case 1: colour = COLOUR_RED; break;
     9de:	0f 2e       	mov	r0, r31
     9e0:	ff e0       	ldi	r31, 0x0F	; 15
     9e2:	ff 2e       	mov	r15, r31
     9e4:	f0 2d       	mov	r31, r0
			case 2: colour = COLOUR_YELLOW; break;
     9e6:	0f ef       	ldi	r16, 0xFF	; 255
			case 3: colour = COLOUR_GREEN; break;
     9e8:	10 ef       	ldi	r17, 0xF0	; 240
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
     9ea:	d5 e1       	ldi	r29, 0x15	; 21
	ledmatrix_clear();
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("TETRIS 43682225", colour);
     9ec:	6c 2f       	mov	r22, r28
     9ee:	85 e6       	ldi	r24, 0x65	; 101
     9f0:	91 e0       	ldi	r25, 0x01	; 1
     9f2:	0e 94 20 06 	call	0xc40	; 0xc40 <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
     9f6:	0d c0       	rjmp	.+26     	; 0xa12 <splash_screen+0x8e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9f8:	2f e7       	ldi	r18, 0x7F	; 127
     9fa:	8c e2       	ldi	r24, 0x2C	; 44
     9fc:	93 e0       	ldi	r25, 0x03	; 3
     9fe:	21 50       	subi	r18, 0x01	; 1
     a00:	80 40       	sbci	r24, 0x00	; 0
     a02:	90 40       	sbci	r25, 0x00	; 0
     a04:	e1 f7       	brne	.-8      	; 0x9fe <splash_screen+0x7a>
     a06:	00 c0       	rjmp	.+0      	; 0xa08 <splash_screen+0x84>
     a08:	00 00       	nop
			_delay_ms(130);
			if(button_pushed() != -1) {
     a0a:	0e 94 8c 01 	call	0x318	; 0x318 <button_pushed>
     a0e:	8f 3f       	cpi	r24, 0xFF	; 255
     a10:	a9 f5       	brne	.+106    	; 0xa7c <splash_screen+0xf8>
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("TETRIS 43682225", colour);
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
     a12:	0e 94 2f 06 	call	0xc5e	; 0xc5e <scroll_display>
     a16:	81 11       	cpse	r24, r1
     a18:	ef cf       	rjmp	.-34     	; 0x9f8 <splash_screen+0x74>
				return;
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
     a1a:	0e 94 7f 09 	call	0x12fe	; 0x12fe <random>
     a1e:	dc 01       	movw	r26, r24
     a20:	cb 01       	movw	r24, r22
     a22:	83 70       	andi	r24, 0x03	; 3
     a24:	99 27       	eor	r25, r25
     a26:	aa 27       	eor	r26, r26
     a28:	b0 78       	andi	r27, 0x80	; 128
     a2a:	bb 23       	and	r27, r27
     a2c:	54 f4       	brge	.+20     	; 0xa42 <splash_screen+0xbe>
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	a1 09       	sbc	r26, r1
     a32:	b1 09       	sbc	r27, r1
     a34:	8c 6f       	ori	r24, 0xFC	; 252
     a36:	9f 6f       	ori	r25, 0xFF	; 255
     a38:	af 6f       	ori	r26, 0xFF	; 255
     a3a:	bf 6f       	ori	r27, 0xFF	; 255
     a3c:	01 96       	adiw	r24, 0x01	; 1
     a3e:	a1 1d       	adc	r26, r1
     a40:	b1 1d       	adc	r27, r1
     a42:	81 30       	cpi	r24, 0x01	; 1
     a44:	91 05       	cpc	r25, r1
     a46:	a1 05       	cpc	r26, r1
     a48:	b1 05       	cpc	r27, r1
     a4a:	91 f0       	breq	.+36     	; 0xa70 <splash_screen+0xec>
     a4c:	2c f4       	brge	.+10     	; 0xa58 <splash_screen+0xd4>
     a4e:	89 2b       	or	r24, r25
     a50:	8a 2b       	or	r24, r26
     a52:	8b 2b       	or	r24, r27
     a54:	59 f0       	breq	.+22     	; 0xa6c <splash_screen+0xe8>
     a56:	ca cf       	rjmp	.-108    	; 0x9ec <splash_screen+0x68>
     a58:	82 30       	cpi	r24, 0x02	; 2
     a5a:	91 05       	cpc	r25, r1
     a5c:	a1 05       	cpc	r26, r1
     a5e:	b1 05       	cpc	r27, r1
     a60:	49 f0       	breq	.+18     	; 0xa74 <splash_screen+0xf0>
     a62:	03 97       	sbiw	r24, 0x03	; 3
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f0       	breq	.+14     	; 0xa78 <splash_screen+0xf4>
     a6a:	c0 cf       	rjmp	.-128    	; 0x9ec <splash_screen+0x68>
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
     a6c:	cd 2f       	mov	r28, r29
     a6e:	be cf       	rjmp	.-132    	; 0x9ec <splash_screen+0x68>
			case 1: colour = COLOUR_RED; break;
     a70:	cf 2d       	mov	r28, r15
     a72:	bc cf       	rjmp	.-136    	; 0x9ec <splash_screen+0x68>
			case 2: colour = COLOUR_YELLOW; break;
     a74:	c0 2f       	mov	r28, r16
     a76:	ba cf       	rjmp	.-140    	; 0x9ec <splash_screen+0x68>
			case 3: colour = COLOUR_GREEN; break;
     a78:	c1 2f       	mov	r28, r17
     a7a:	b8 cf       	rjmp	.-144    	; 0x9ec <splash_screen+0x68>
		}
	}
}
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	1f 91       	pop	r17
     a82:	0f 91       	pop	r16
     a84:	ff 90       	pop	r15
     a86:	08 95       	ret

00000a88 <new_game>:

void new_game(void) {
	// Initialise the game and display
	init_game();
     a88:	0e 94 4e 03 	call	0x69c	; 0x69c <init_game>
	
	// Clear the serial terminal
	clear_terminal();
     a8c:	0e 94 86 08 	call	0x110c	; 0x110c <clear_terminal>
	
	// Initialise the score
	init_score();
     a90:	0e 94 17 06 	call	0xc2e	; 0xc2e <init_score>
	
	// Delete any pending button pushes or serial input
	empty_button_queue();
     a94:	0e 94 89 01 	call	0x312	; 0x312 <empty_button_queue>
	clear_serial_input_buffer();
     a98:	0e 94 a5 07 	call	0xf4a	; 0xf4a <clear_serial_input_buffer>
     a9c:	08 95       	ret

00000a9e <play_game>:
}

void play_game(void) {
     a9e:	4f 92       	push	r4
     aa0:	5f 92       	push	r5
     aa2:	6f 92       	push	r6
     aa4:	7f 92       	push	r7
     aa6:	8f 92       	push	r8
     aa8:	9f 92       	push	r9
     aaa:	af 92       	push	r10
     aac:	cf 92       	push	r12
     aae:	df 92       	push	r13
     ab0:	ef 92       	push	r14
     ab2:	ff 92       	push	r15
     ab4:	1f 93       	push	r17
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	
	// Record the last time a block was dropped as the current time -
	// this ensures we don't drop a block immediately.
	last_drop_time = get_clock_ticks();
     aba:	0e 94 bd 08 	call	0x117a	; 0x117a <get_clock_ticks>
     abe:	6b 01       	movw	r12, r22
     ac0:	7c 01       	movw	r14, r24

void play_game(void) {
	uint32_t last_drop_time;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
     ac2:	10 e0       	ldi	r17, 0x00	; 0
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     ac4:	df ef       	ldi	r29, 0xFF	; 255
		
		if(button == -1) {
			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
     ac6:	0f 2e       	mov	r0, r31
     ac8:	fd e3       	ldi	r31, 0x3D	; 61
     aca:	8f 2e       	mov	r8, r31
     acc:	f3 e0       	ldi	r31, 0x03	; 3
     ace:	9f 2e       	mov	r9, r31
     ad0:	f0 2d       	mov	r31, r0
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
     ad2:	68 94       	set
     ad4:	aa 24       	eor	r10, r10
     ad6:	a1 f8       	bld	r10, 1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		button = button_pushed();
     ad8:	0e 94 8c 01 	call	0x318	; 0x318 <button_pushed>
     adc:	c8 2f       	mov	r28, r24
		
		if(button == -1) {
     ade:	8f 3f       	cpi	r24, 0xFF	; 255
     ae0:	09 f0       	breq	.+2      	; 0xae4 <play_game+0x46>
     ae2:	61 c0       	rjmp	.+194    	; 0xba6 <play_game+0x108>
			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
     ae4:	0e 94 9e 07 	call	0xf3c	; 0xf3c <serial_input_available>
     ae8:	88 23       	and	r24, r24
     aea:	d1 f1       	breq	.+116    	; 0xb60 <play_game+0xc2>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
     aec:	f4 01       	movw	r30, r8
     aee:	80 81       	ld	r24, Z
     af0:	91 81       	ldd	r25, Z+1	; 0x01
     af2:	0e 94 8d 09 	call	0x131a	; 0x131a <fgetc>
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
     af6:	11 11       	cpse	r17, r1
     af8:	05 c0       	rjmp	.+10     	; 0xb04 <play_game+0x66>
     afa:	8b 31       	cpi	r24, 0x1B	; 27
     afc:	09 f4       	brne	.+2      	; 0xb00 <play_game+0x62>
     afe:	4d c0       	rjmp	.+154    	; 0xb9a <play_game+0xfc>
     b00:	8d 2f       	mov	r24, r29
     b02:	0a c0       	rjmp	.+20     	; 0xb18 <play_game+0x7a>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
     b04:	11 30       	cpi	r17, 0x01	; 1
     b06:	29 f4       	brne	.+10     	; 0xb12 <play_game+0x74>
     b08:	8b 35       	cpi	r24, 0x5B	; 91
     b0a:	09 f4       	brne	.+2      	; 0xb0e <play_game+0x70>
     b0c:	48 c0       	rjmp	.+144    	; 0xb9e <play_game+0x100>
     b0e:	8d 2f       	mov	r24, r29
     b10:	03 c0       	rjmp	.+6      	; 0xb18 <play_game+0x7a>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
     b12:	12 30       	cpi	r17, 0x02	; 2
     b14:	09 f0       	breq	.+2      	; 0xb18 <play_game+0x7a>
     b16:	45 c0       	rjmp	.+138    	; 0xba2 <play_game+0x104>
				}
			}
		}
		
		// Process the input. 
		if(button==3 || escape_sequence_char=='D') {
     b18:	84 34       	cpi	r24, 0x44	; 68
     b1a:	09 f0       	breq	.+2      	; 0xb1e <play_game+0x80>
     b1c:	47 c0       	rjmp	.+142    	; 0xbac <play_game+0x10e>
     b1e:	10 e0       	ldi	r17, 0x00	; 0
			// Attempt to move left
			(void)attempt_move(MOVE_LEFT);
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	0e 94 66 03 	call	0x6cc	; 0x6cc <attempt_move>
     b26:	1c c0       	rjmp	.+56     	; 0xb60 <play_game+0xc2>
     b28:	10 e0       	ldi	r17, 0x00	; 0
		} else if(button==0 || escape_sequence_char=='C') {
			// Attempt to move right
			(void)attempt_move(MOVE_RIGHT);
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	0e 94 66 03 	call	0x6cc	; 0x6cc <attempt_move>
     b30:	17 c0       	rjmp	.+46     	; 0xb60 <play_game+0xc2>
		} else if (button==2 || escape_sequence_char == 'A') {
     b32:	c2 30       	cpi	r28, 0x02	; 2
     b34:	11 f0       	breq	.+4      	; 0xb3a <play_game+0x9c>
     b36:	81 34       	cpi	r24, 0x41	; 65
     b38:	19 f4       	brne	.+6      	; 0xb40 <play_game+0xa2>
			// Attempt to rotate
			(void)attempt_rotation();
     b3a:	0e 94 18 04 	call	0x830	; 0x830 <attempt_rotation>
     b3e:	10 c0       	rjmp	.+32     	; 0xb60 <play_game+0xc2>
		} else if (button==1 || escape_sequence_char == 'B') {
     b40:	c1 30       	cpi	r28, 0x01	; 1
     b42:	11 f0       	breq	.+4      	; 0xb48 <play_game+0xaa>
     b44:	82 34       	cpi	r24, 0x42	; 66
     b46:	61 f4       	brne	.+24     	; 0xb60 <play_game+0xc2>
			// Attempt to drop block
			if(!attempt_drop_block()) {
     b48:	0e 94 10 04 	call	0x820	; 0x820 <attempt_drop_block>
     b4c:	89 2b       	or	r24, r25
     b4e:	21 f4       	brne	.+8      	; 0xb58 <play_game+0xba>
				// Drop failed - fix block to board and add new block
				if(!fix_block_to_board_and_add_new_block()) {
     b50:	0e 94 68 04 	call	0x8d0	; 0x8d0 <fix_block_to_board_and_add_new_block>
     b54:	88 23       	and	r24, r24
     b56:	a1 f1       	breq	.+104    	; 0xbc0 <play_game+0x122>
					break;	// GAME OVER
				}
			} 
			last_drop_time = get_clock_ticks();
     b58:	0e 94 bd 08 	call	0x117a	; 0x117a <get_clock_ticks>
     b5c:	6b 01       	movw	r12, r22
     b5e:	7c 01       	movw	r14, r24
		} 
		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		
		// Check for timer related events here
		if(get_clock_ticks() >= last_drop_time + 600) {
     b60:	0e 94 bd 08 	call	0x117a	; 0x117a <get_clock_ticks>
     b64:	26 01       	movw	r4, r12
     b66:	37 01       	movw	r6, r14
     b68:	f8 e5       	ldi	r31, 0x58	; 88
     b6a:	4f 0e       	add	r4, r31
     b6c:	f2 e0       	ldi	r31, 0x02	; 2
     b6e:	5f 1e       	adc	r5, r31
     b70:	61 1c       	adc	r6, r1
     b72:	71 1c       	adc	r7, r1
     b74:	64 15       	cp	r22, r4
     b76:	75 05       	cpc	r23, r5
     b78:	86 05       	cpc	r24, r6
     b7a:	97 05       	cpc	r25, r7
     b7c:	08 f4       	brcc	.+2      	; 0xb80 <play_game+0xe2>
     b7e:	ac cf       	rjmp	.-168    	; 0xad8 <play_game+0x3a>
			// 600ms (0.6 second) has passed since the last time we dropped
			// a block, so drop it now.
			if(!attempt_drop_block_one_row()) {
     b80:	0e 94 bc 03 	call	0x778	; 0x778 <attempt_drop_block_one_row>
     b84:	81 11       	cpse	r24, r1
     b86:	04 c0       	rjmp	.+8      	; 0xb90 <play_game+0xf2>
				// Drop failed - fix block to board and add new block
				if(!fix_block_to_board_and_add_new_block()) {
     b88:	0e 94 68 04 	call	0x8d0	; 0x8d0 <fix_block_to_board_and_add_new_block>
     b8c:	88 23       	and	r24, r24
     b8e:	c1 f0       	breq	.+48     	; 0xbc0 <play_game+0x122>
					break;	// GAME OVER
				}
			}
			last_drop_time = get_clock_ticks();
     b90:	0e 94 bd 08 	call	0x117a	; 0x117a <get_clock_ticks>
     b94:	6b 01       	movw	r12, r22
     b96:	7c 01       	movw	r14, r24
     b98:	9f cf       	rjmp	.-194    	; 0xad8 <play_game+0x3a>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
     b9a:	11 e0       	ldi	r17, 0x01	; 1
     b9c:	e1 cf       	rjmp	.-62     	; 0xb60 <play_game+0xc2>
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
     b9e:	1a 2d       	mov	r17, r10
     ba0:	df cf       	rjmp	.-66     	; 0xb60 <play_game+0xc2>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
     ba2:	10 e0       	ldi	r17, 0x00	; 0
     ba4:	dd cf       	rjmp	.-70     	; 0xb60 <play_game+0xc2>
				}
			}
		}
		
		// Process the input. 
		if(button==3 || escape_sequence_char=='D') {
     ba6:	83 30       	cpi	r24, 0x03	; 3
     ba8:	31 f4       	brne	.+12     	; 0xbb6 <play_game+0x118>
     baa:	ba cf       	rjmp	.-140    	; 0xb20 <play_game+0x82>
			// Attempt to move left
			(void)attempt_move(MOVE_LEFT);
		} else if(button==0 || escape_sequence_char=='C') {
     bac:	83 34       	cpi	r24, 0x43	; 67
     bae:	09 f4       	brne	.+2      	; 0xbb2 <play_game+0x114>
     bb0:	bb cf       	rjmp	.-138    	; 0xb28 <play_game+0x8a>
     bb2:	10 e0       	ldi	r17, 0x00	; 0
     bb4:	be cf       	rjmp	.-132    	; 0xb32 <play_game+0x94>
     bb6:	88 23       	and	r24, r24
     bb8:	09 f4       	brne	.+2      	; 0xbbc <play_game+0x11e>
     bba:	b7 cf       	rjmp	.-146    	; 0xb2a <play_game+0x8c>
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     bbc:	8d 2f       	mov	r24, r29
     bbe:	b9 cf       	rjmp	.-142    	; 0xb32 <play_game+0x94>
			}
			last_drop_time = get_clock_ticks();
		}
	}
	// If we get here the game is over. 
}
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	1f 91       	pop	r17
     bc6:	ff 90       	pop	r15
     bc8:	ef 90       	pop	r14
     bca:	df 90       	pop	r13
     bcc:	cf 90       	pop	r12
     bce:	af 90       	pop	r10
     bd0:	9f 90       	pop	r9
     bd2:	8f 90       	pop	r8
     bd4:	7f 90       	pop	r7
     bd6:	6f 90       	pop	r6
     bd8:	5f 90       	pop	r5
     bda:	4f 90       	pop	r4
     bdc:	08 95       	ret

00000bde <handle_game_over>:

void handle_game_over() {
	move_cursor(10,14);
     bde:	6e e0       	ldi	r22, 0x0E	; 14
     be0:	8a e0       	ldi	r24, 0x0A	; 10
     be2:	0e 94 6d 08 	call	0x10da	; 0x10da <move_cursor>
	// Print a message to the terminal. 
	printf_P(PSTR("GAME OVER"));
     be6:	8a e9       	ldi	r24, 0x9A	; 154
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	9f 93       	push	r25
     bec:	8f 93       	push	r24
     bee:	0e 94 cb 09 	call	0x1396	; 0x1396 <printf_P>
	move_cursor(10,15);
     bf2:	6f e0       	ldi	r22, 0x0F	; 15
     bf4:	8a e0       	ldi	r24, 0x0A	; 10
     bf6:	0e 94 6d 08 	call	0x10da	; 0x10da <move_cursor>
	printf_P(PSTR("Press a button to start again"));
     bfa:	8c e7       	ldi	r24, 0x7C	; 124
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	9f 93       	push	r25
     c00:	8f 93       	push	r24
     c02:	0e 94 cb 09 	call	0x1396	; 0x1396 <printf_P>
	while(button_pushed() == -1) {
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
     c0e:	0e 94 8c 01 	call	0x318	; 0x318 <button_pushed>
     c12:	8f 3f       	cpi	r24, 0xFF	; 255
     c14:	e1 f3       	breq	.-8      	; 0xc0e <handle_game_over+0x30>
		; // wait until a button has been pushed
	}
	
     c16:	08 95       	ret

00000c18 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
     c18:	0e 94 b3 04 	call	0x966	; 0x966 <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
     c1c:	0e 94 c2 04 	call	0x984	; 0x984 <splash_screen>
	
	while(1) {
		new_game();
     c20:	0e 94 44 05 	call	0xa88	; 0xa88 <new_game>
		play_game();
     c24:	0e 94 4f 05 	call	0xa9e	; 0xa9e <play_game>
		handle_game_over();
     c28:	0e 94 ef 05 	call	0xbde	; 0xbde <handle_game_over>
	}
     c2c:	f9 cf       	rjmp	.-14     	; 0xc20 <main+0x8>

00000c2e <init_score>:
// modules should call the functions below to modify/access the
// variable.
static uint32_t score;

void init_score(void) {
	score = 0;
     c2e:	10 92 80 01 	sts	0x0180, r1
     c32:	10 92 81 01 	sts	0x0181, r1
     c36:	10 92 82 01 	sts	0x0182, r1
     c3a:	10 92 83 01 	sts	0x0183, r1
     c3e:	08 95       	ret

00000c40 <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
     c40:	60 93 1f 01 	sts	0x011F, r22
	display_string = string_to_display;
     c44:	90 93 88 01 	sts	0x0188, r25
     c48:	80 93 87 01 	sts	0x0187, r24
	next_col_ptr = 0;
     c4c:	10 92 8a 01 	sts	0x018A, r1
     c50:	10 92 89 01 	sts	0x0189, r1
	next_char_to_display = 0;
     c54:	10 92 86 01 	sts	0x0186, r1
     c58:	10 92 85 01 	sts	0x0185, r1
     c5c:	08 95       	ret

00000c5e <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
     c5e:	0f 93       	push	r16
     c60:	1f 93       	push	r17
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
     c6a:	28 97       	sbiw	r28, 0x08	; 8
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	f8 94       	cli
     c70:	de bf       	out	0x3e, r29	; 62
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
     c76:	e0 91 89 01 	lds	r30, 0x0189
     c7a:	f0 91 8a 01 	lds	r31, 0x018A
     c7e:	30 97       	sbiw	r30, 0x00	; 0
     c80:	81 f0       	breq	.+32     	; 0xca2 <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
     c82:	14 91       	lpm	r17, Z

		if(col_data & 1) {
     c84:	10 ff       	sbrs	r17, 0
     c86:	06 c0       	rjmp	.+12     	; 0xc94 <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
     c88:	10 92 8a 01 	sts	0x018A, r1
     c8c:	10 92 89 01 	sts	0x0189, r1
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     c90:	00 e0       	ldi	r16, 0x00	; 0
     c92:	6b c0       	rjmp	.+214    	; 0xd6a <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
     c94:	31 96       	adiw	r30, 0x01	; 1
     c96:	f0 93 8a 01 	sts	0x018A, r31
     c9a:	e0 93 89 01 	sts	0x0189, r30
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     c9e:	00 e0       	ldi	r16, 0x00	; 0
     ca0:	64 c0       	rjmp	.+200    	; 0xd6a <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
     ca2:	e0 91 85 01 	lds	r30, 0x0185
     ca6:	f0 91 86 01 	lds	r31, 0x0186
     caa:	30 97       	sbiw	r30, 0x00	; 0
     cac:	09 f4       	brne	.+2      	; 0xcb0 <scroll_display+0x52>
     cae:	49 c0       	rjmp	.+146    	; 0xd42 <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
     cb0:	cf 01       	movw	r24, r30
     cb2:	01 96       	adiw	r24, 0x01	; 1
     cb4:	90 93 86 01 	sts	0x0186, r25
     cb8:	80 93 85 01 	sts	0x0185, r24
     cbc:	e0 81       	ld	r30, Z
		if(next_char == 0) {
     cbe:	e1 11       	cpse	r30, r1
     cc0:	0a c0       	rjmp	.+20     	; 0xcd6 <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
     cc2:	10 92 86 01 	sts	0x0186, r1
     cc6:	10 92 85 01 	sts	0x0185, r1
			shift_countdown = 16;
     cca:	80 e1       	ldi	r24, 0x10	; 16
     ccc:	80 93 84 01 	sts	0x0184, r24
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     cd0:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     cd2:	10 e0       	ldi	r17, 0x00	; 0
     cd4:	4a c0       	rjmp	.+148    	; 0xd6a <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
     cd6:	8f e9       	ldi	r24, 0x9F	; 159
     cd8:	8e 0f       	add	r24, r30
     cda:	8a 31       	cpi	r24, 0x1A	; 26
     cdc:	70 f4       	brcc	.+28     	; 0xcfa <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	ee 0f       	add	r30, r30
     ce2:	ff 1f       	adc	r31, r31
     ce4:	e5 5d       	subi	r30, 0xD5	; 213
     ce6:	ff 4f       	sbci	r31, 0xFF	; 255
     ce8:	85 91       	lpm	r24, Z+
     cea:	94 91       	lpm	r25, Z
     cec:	90 93 8a 01 	sts	0x018A, r25
     cf0:	80 93 89 01 	sts	0x0189, r24
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     cf4:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     cf6:	10 e0       	ldi	r17, 0x00	; 0
     cf8:	38 c0       	rjmp	.+112    	; 0xd6a <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
     cfa:	8f eb       	ldi	r24, 0xBF	; 191
     cfc:	8e 0f       	add	r24, r30
     cfe:	8a 31       	cpi	r24, 0x1A	; 26
     d00:	70 f4       	brcc	.+28     	; 0xd1e <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	ee 0f       	add	r30, r30
     d06:	ff 1f       	adc	r31, r31
     d08:	e5 59       	subi	r30, 0x95	; 149
     d0a:	ff 4f       	sbci	r31, 0xFF	; 255
     d0c:	85 91       	lpm	r24, Z+
     d0e:	94 91       	lpm	r25, Z
     d10:	90 93 8a 01 	sts	0x018A, r25
     d14:	80 93 89 01 	sts	0x0189, r24
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     d18:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     d1a:	10 e0       	ldi	r17, 0x00	; 0
     d1c:	26 c0       	rjmp	.+76     	; 0xd6a <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
     d1e:	80 ed       	ldi	r24, 0xD0	; 208
     d20:	8e 0f       	add	r24, r30
     d22:	8a 30       	cpi	r24, 0x0A	; 10
     d24:	00 f5       	brcc	.+64     	; 0xd66 <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	ee 0f       	add	r30, r30
     d2a:	ff 1f       	adc	r31, r31
     d2c:	e7 58       	subi	r30, 0x87	; 135
     d2e:	ff 4f       	sbci	r31, 0xFF	; 255
     d30:	85 91       	lpm	r24, Z+
     d32:	94 91       	lpm	r25, Z
     d34:	90 93 8a 01 	sts	0x018A, r25
     d38:	80 93 89 01 	sts	0x0189, r24
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     d3c:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     d3e:	10 e0       	ldi	r17, 0x00	; 0
     d40:	14 c0       	rjmp	.+40     	; 0xd6a <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
     d42:	80 91 87 01 	lds	r24, 0x0187
     d46:	90 91 88 01 	lds	r25, 0x0188
     d4a:	01 e0       	ldi	r16, 0x01	; 1
     d4c:	00 97       	sbiw	r24, 0x00	; 0
     d4e:	09 f0       	breq	.+2      	; 0xd52 <scroll_display+0xf4>
     d50:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
     d52:	90 93 86 01 	sts	0x0186, r25
     d56:	80 93 85 01 	sts	0x0185, r24
		display_string = 0;
     d5a:	10 92 88 01 	sts	0x0188, r1
     d5e:	10 92 87 01 	sts	0x0187, r1
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     d62:	10 e0       	ldi	r17, 0x00	; 0
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     d66:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     d68:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
     d6a:	0e 94 a8 04 	call	0x950	; 0x950 <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
     d6e:	20 91 1f 01 	lds	r18, 0x011F
     d72:	fe 01       	movw	r30, r28
     d74:	38 96       	adiw	r30, 0x08	; 8
     d76:	ce 01       	movw	r24, r28
     d78:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
     d7a:	11 23       	and	r17, r17
     d7c:	14 f4       	brge	.+4      	; 0xd82 <scroll_display+0x124>
			column_colour_data[i] = colour;
     d7e:	20 83       	st	Z, r18
     d80:	01 c0       	rjmp	.+2      	; 0xd84 <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
     d82:	10 82       	st	Z, r1
		}
		col_data <<= 1;
     d84:	11 0f       	add	r17, r17
     d86:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
     d88:	e8 17       	cp	r30, r24
     d8a:	f9 07       	cpc	r31, r25
     d8c:	b1 f7       	brne	.-20     	; 0xd7a <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
     d8e:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
     d90:	be 01       	movw	r22, r28
     d92:	6f 5f       	subi	r22, 0xFF	; 255
     d94:	7f 4f       	sbci	r23, 0xFF	; 255
     d96:	8f e0       	ldi	r24, 0x0F	; 15
     d98:	0e 94 8d 04 	call	0x91a	; 0x91a <ledmatrix_update_column>
	if(shift_countdown > 0) {
     d9c:	80 91 84 01 	lds	r24, 0x0184
     da0:	88 23       	and	r24, r24
     da2:	89 f0       	breq	.+34     	; 0xdc6 <scroll_display+0x168>
		shift_countdown--;
     da4:	81 50       	subi	r24, 0x01	; 1
     da6:	80 93 84 01 	sts	0x0184, r24
	}
	finished = finished && (shift_countdown == 0);
     daa:	00 23       	and	r16, r16
     dac:	11 f0       	breq	.+4      	; 0xdb2 <scroll_display+0x154>
     dae:	88 23       	and	r24, r24
     db0:	11 f0       	breq	.+4      	; 0xdb6 <scroll_display+0x158>
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	03 c0       	rjmp	.+6      	; 0xdbc <scroll_display+0x15e>
     db6:	91 e0       	ldi	r25, 0x01	; 1
     db8:	01 c0       	rjmp	.+2      	; 0xdbc <scroll_display+0x15e>
     dba:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	99 23       	and	r25, r25
     dc0:	29 f0       	breq	.+10     	; 0xdcc <scroll_display+0x16e>
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	03 c0       	rjmp	.+6      	; 0xdcc <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
     dc6:	01 11       	cpse	r16, r1
     dc8:	f8 cf       	rjmp	.-16     	; 0xdba <scroll_display+0x15c>
     dca:	f3 cf       	rjmp	.-26     	; 0xdb2 <scroll_display+0x154>
	return !finished;
}
     dcc:	28 96       	adiw	r28, 0x08	; 8
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	f8 94       	cli
     dd2:	de bf       	out	0x3e, r29	; 62
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	cd bf       	out	0x3d, r28	; 61
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	1f 91       	pop	r17
     dde:	0f 91       	pop	r16
     de0:	08 95       	ret

00000de2 <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
     de2:	cf 93       	push	r28
     de4:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
     de6:	8a 30       	cpi	r24, 0x0A	; 10
     de8:	19 f4       	brne	.+6      	; 0xdf0 <uart_put_char+0xe>
		uart_put_char('\r', stream);
     dea:	8d e0       	ldi	r24, 0x0D	; 13
     dec:	0e 94 f1 06 	call	0xde2	; 0xde2 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
     df0:	2f b7       	in	r18, 0x3f	; 63
     df2:	20 78       	andi	r18, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <uart_put_char+0x18>
		if(!interrupts_enabled) {
     df6:	22 23       	and	r18, r18
     df8:	29 f1       	breq	.+74     	; 0xe44 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     dfa:	90 91 2a 02 	lds	r25, 0x022A
     dfe:	9f 3f       	cpi	r25, 0xFF	; 255
     e00:	d1 f3       	breq	.-12     	; 0xdf6 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
     e02:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
     e04:	e0 91 29 02 	lds	r30, 0x0229
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	8e 0f       	add	r24, r30
     e0c:	80 93 29 02 	sts	0x0229, r24
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	e5 5d       	subi	r30, 0xD5	; 213
     e14:	fd 4f       	sbci	r31, 0xFD	; 253
     e16:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
     e18:	80 91 2a 02 	lds	r24, 0x022A
     e1c:	8f 5f       	subi	r24, 0xFF	; 255
     e1e:	80 93 2a 02 	sts	0x022A, r24
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
     e22:	80 91 29 02 	lds	r24, 0x0229
     e26:	8f 3f       	cpi	r24, 0xFF	; 255
     e28:	11 f4       	brne	.+4      	; 0xe2e <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
     e2a:	10 92 29 02 	sts	0x0229, r1
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) */
	UCSR0B |= (1 << UDRIE0);
     e2e:	e1 ec       	ldi	r30, 0xC1	; 193
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	80 62       	ori	r24, 0x20	; 32
     e36:	80 83       	st	Z, r24
	if(interrupts_enabled) {
     e38:	22 23       	and	r18, r18
     e3a:	39 f0       	breq	.+14     	; 0xe4a <uart_put_char+0x68>
		sei();
     e3c:	78 94       	sei
	}
	return 0;
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	05 c0       	rjmp	.+10     	; 0xe4e <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <uart_put_char+0x6c>
	 * disabled) */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	90 e0       	ldi	r25, 0x00	; 0
}
     e4e:	cf 91       	pop	r28
     e50:	08 95       	ret

00000e52 <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
     e52:	80 91 3c 03 	lds	r24, 0x033C
     e56:	88 23       	and	r24, r24
     e58:	e1 f3       	breq	.-8      	; 0xe52 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
     e5a:	2f b7       	in	r18, 0x3f	; 63
     e5c:	20 78       	andi	r18, 0x80	; 128
	cli();
     e5e:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
     e60:	80 91 2a 03 	lds	r24, 0x032A
     e64:	30 91 3c 03 	lds	r19, 0x033C
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	83 1b       	sub	r24, r19
     e6c:	91 09       	sbc	r25, r1
     e6e:	5a f4       	brpl	.+22     	; 0xe86 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
     e70:	e0 91 2a 03 	lds	r30, 0x032A
     e74:	80 91 3c 03 	lds	r24, 0x033C
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	e8 1b       	sub	r30, r24
     e7c:	f1 09       	sbc	r31, r1
     e7e:	e5 5c       	subi	r30, 0xC5	; 197
     e80:	fc 4f       	sbci	r31, 0xFC	; 252
     e82:	80 81       	ld	r24, Z
     e84:	0a c0       	rjmp	.+20     	; 0xe9a <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
     e86:	e0 91 2a 03 	lds	r30, 0x032A
     e8a:	80 91 3c 03 	lds	r24, 0x033C
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	e8 1b       	sub	r30, r24
     e92:	f1 09       	sbc	r31, r1
     e94:	e5 5d       	subi	r30, 0xD5	; 213
     e96:	fc 4f       	sbci	r31, 0xFC	; 252
     e98:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
     e9a:	90 91 3c 03 	lds	r25, 0x033C
     e9e:	91 50       	subi	r25, 0x01	; 1
     ea0:	90 93 3c 03 	sts	0x033C, r25
	if(interrupts_enabled) {
     ea4:	22 23       	and	r18, r18
     ea6:	09 f0       	breq	.+2      	; 0xeaa <uart_get_char+0x58>
		sei();
     ea8:	78 94       	sei
	}	
	return c;
}
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	08 95       	ret

00000eae <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
     eae:	10 92 29 02 	sts	0x0229, r1
	bytes_in_out_buffer = 0;
     eb2:	10 92 2a 02 	sts	0x022A, r1
	input_insert_pos = 0;
     eb6:	10 92 2a 03 	sts	0x032A, r1
	bytes_in_input_buffer = 0;
     eba:	10 92 3c 03 	sts	0x033C, r1
	input_overrun = 0;
     ebe:	10 92 3b 03 	sts	0x033B, r1
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
     ec2:	40 93 8b 01 	sts	0x018B, r20
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
     ec6:	dc 01       	movw	r26, r24
     ec8:	cb 01       	movw	r24, r22
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	aa 1f       	adc	r26, r26
     ed0:	bb 1f       	adc	r27, r27
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	aa 1f       	adc	r26, r26
     ed8:	bb 1f       	adc	r27, r27
     eda:	9c 01       	movw	r18, r24
     edc:	ad 01       	movw	r20, r26
     ede:	22 0f       	add	r18, r18
     ee0:	33 1f       	adc	r19, r19
     ee2:	44 1f       	adc	r20, r20
     ee4:	55 1f       	adc	r21, r21
     ee6:	60 e0       	ldi	r22, 0x00	; 0
     ee8:	72 e1       	ldi	r23, 0x12	; 18
     eea:	8a e7       	ldi	r24, 0x7A	; 122
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__divmodsi4>
     ef2:	ba 01       	movw	r22, r20
     ef4:	a9 01       	movw	r20, r18
     ef6:	4f 5f       	subi	r20, 0xFF	; 255
     ef8:	5f 4f       	sbci	r21, 0xFF	; 255
     efa:	6f 4f       	sbci	r22, 0xFF	; 255
     efc:	7f 4f       	sbci	r23, 0xFF	; 255
     efe:	db 01       	movw	r26, r22
     f00:	ca 01       	movw	r24, r20
     f02:	1a f4       	brpl	.+6      	; 0xf0a <init_serial_stdio+0x5c>
     f04:	01 96       	adiw	r24, 0x01	; 1
     f06:	a1 1d       	adc	r26, r1
     f08:	b1 1d       	adc	r27, r1
     f0a:	b5 95       	asr	r27
     f0c:	a7 95       	ror	r26
     f0e:	97 95       	ror	r25
     f10:	87 95       	ror	r24
     f12:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
     f14:	90 93 c5 00 	sts	0x00C5, r25
     f18:	80 93 c4 00 	sts	0x00C4, r24
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     f1c:	e1 ec       	ldi	r30, 0xC1	; 193
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	88 e1       	ldi	r24, 0x18	; 24
     f22:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
     f24:	80 81       	ld	r24, Z
     f26:	80 68       	ori	r24, 0x80	; 128
     f28:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
     f2a:	ed e3       	ldi	r30, 0x3D	; 61
     f2c:	f3 e0       	ldi	r31, 0x03	; 3
     f2e:	80 e2       	ldi	r24, 0x20	; 32
     f30:	91 e0       	ldi	r25, 0x01	; 1
     f32:	93 83       	std	Z+3, r25	; 0x03
     f34:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
     f36:	91 83       	std	Z+1, r25	; 0x01
     f38:	80 83       	st	Z, r24
     f3a:	08 95       	ret

00000f3c <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
     f3c:	90 91 3c 03 	lds	r25, 0x033C
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	91 11       	cpse	r25, r1
     f44:	01 c0       	rjmp	.+2      	; 0xf48 <serial_input_available+0xc>
     f46:	80 e0       	ldi	r24, 0x00	; 0
}
     f48:	08 95       	ret

00000f4a <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
     f4a:	10 92 2a 03 	sts	0x032A, r1
	bytes_in_input_buffer = 0;
     f4e:	10 92 3c 03 	sts	0x033C, r1
     f52:	08 95       	ret

00000f54 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
     f54:	1f 92       	push	r1
     f56:	0f 92       	push	r0
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	0f 92       	push	r0
     f5c:	11 24       	eor	r1, r1
     f5e:	2f 93       	push	r18
     f60:	8f 93       	push	r24
     f62:	9f 93       	push	r25
     f64:	ef 93       	push	r30
     f66:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
     f68:	80 91 2a 02 	lds	r24, 0x022A
     f6c:	88 23       	and	r24, r24
     f6e:	29 f1       	breq	.+74     	; 0xfba <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
     f70:	80 91 29 02 	lds	r24, 0x0229
     f74:	20 91 2a 02 	lds	r18, 0x022A
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	82 1b       	sub	r24, r18
     f7c:	91 09       	sbc	r25, r1
     f7e:	5a f4       	brpl	.+22     	; 0xf96 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     f80:	e0 91 29 02 	lds	r30, 0x0229
     f84:	80 91 2a 02 	lds	r24, 0x022A
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	e8 1b       	sub	r30, r24
     f8c:	f1 09       	sbc	r31, r1
     f8e:	e6 5d       	subi	r30, 0xD6	; 214
     f90:	fc 4f       	sbci	r31, 0xFC	; 252
     f92:	90 81       	ld	r25, Z
     f94:	0a c0       	rjmp	.+20     	; 0xfaa <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
     f96:	e0 91 29 02 	lds	r30, 0x0229
     f9a:	80 91 2a 02 	lds	r24, 0x022A
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	e8 1b       	sub	r30, r24
     fa2:	f1 09       	sbc	r31, r1
     fa4:	e5 5d       	subi	r30, 0xD5	; 213
     fa6:	fd 4f       	sbci	r31, 0xFD	; 253
     fa8:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
     faa:	80 91 2a 02 	lds	r24, 0x022A
     fae:	81 50       	subi	r24, 0x01	; 1
     fb0:	80 93 2a 02 	sts	0x022A, r24
		
		/* Output the character via the UART */
		UDR0 = c;
     fb4:	90 93 c6 00 	sts	0x00C6, r25
     fb8:	05 c0       	rjmp	.+10     	; 0xfc4 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
     fba:	e1 ec       	ldi	r30, 0xC1	; 193
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	8f 7d       	andi	r24, 0xDF	; 223
     fc2:	80 83       	st	Z, r24
	}
}
     fc4:	ff 91       	pop	r31
     fc6:	ef 91       	pop	r30
     fc8:	9f 91       	pop	r25
     fca:	8f 91       	pop	r24
     fcc:	2f 91       	pop	r18
     fce:	0f 90       	pop	r0
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	0f 90       	pop	r0
     fd4:	1f 90       	pop	r1
     fd6:	18 95       	reti

00000fd8 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
     fd8:	1f 92       	push	r1
     fda:	0f 92       	push	r0
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	0f 92       	push	r0
     fe0:	11 24       	eor	r1, r1
     fe2:	2f 93       	push	r18
     fe4:	3f 93       	push	r19
     fe6:	4f 93       	push	r20
     fe8:	5f 93       	push	r21
     fea:	6f 93       	push	r22
     fec:	7f 93       	push	r23
     fee:	8f 93       	push	r24
     ff0:	9f 93       	push	r25
     ff2:	af 93       	push	r26
     ff4:	bf 93       	push	r27
     ff6:	cf 93       	push	r28
     ff8:	ef 93       	push	r30
     ffa:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
     ffc:	c0 91 c6 00 	lds	r28, 0x00C6
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    1000:	80 91 8b 01 	lds	r24, 0x018B
    1004:	88 23       	and	r24, r24
    1006:	49 f0       	breq	.+18     	; 0x101a <__vector_20+0x42>
    1008:	80 91 2a 02 	lds	r24, 0x022A
    100c:	8f 3f       	cpi	r24, 0xFF	; 255
    100e:	29 f0       	breq	.+10     	; 0x101a <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    1010:	60 e0       	ldi	r22, 0x00	; 0
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	8c 2f       	mov	r24, r28
    1016:	0e 94 f1 06 	call	0xde2	; 0xde2 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    101a:	80 91 3c 03 	lds	r24, 0x033C
    101e:	80 31       	cpi	r24, 0x10	; 16
    1020:	20 f0       	brcs	.+8      	; 0x102a <__vector_20+0x52>
		input_overrun = 1;
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	80 93 3b 03 	sts	0x033B, r24
    1028:	18 c0       	rjmp	.+48     	; 0x105a <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    102a:	cd 30       	cpi	r28, 0x0D	; 13
    102c:	09 f4       	brne	.+2      	; 0x1030 <__vector_20+0x58>
			c = '\n';
    102e:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    1030:	e0 91 2a 03 	lds	r30, 0x032A
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	8e 0f       	add	r24, r30
    1038:	80 93 2a 03 	sts	0x032A, r24
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	e5 5d       	subi	r30, 0xD5	; 213
    1040:	fc 4f       	sbci	r31, 0xFC	; 252
    1042:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    1044:	80 91 3c 03 	lds	r24, 0x033C
    1048:	8f 5f       	subi	r24, 0xFF	; 255
    104a:	80 93 3c 03 	sts	0x033C, r24
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    104e:	80 91 2a 03 	lds	r24, 0x032A
    1052:	80 31       	cpi	r24, 0x10	; 16
    1054:	11 f4       	brne	.+4      	; 0x105a <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    1056:	10 92 2a 03 	sts	0x032A, r1
		}
	}
}
    105a:	ff 91       	pop	r31
    105c:	ef 91       	pop	r30
    105e:	cf 91       	pop	r28
    1060:	bf 91       	pop	r27
    1062:	af 91       	pop	r26
    1064:	9f 91       	pop	r25
    1066:	8f 91       	pop	r24
    1068:	7f 91       	pop	r23
    106a:	6f 91       	pop	r22
    106c:	5f 91       	pop	r21
    106e:	4f 91       	pop	r20
    1070:	3f 91       	pop	r19
    1072:	2f 91       	pop	r18
    1074:	0f 90       	pop	r0
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	0f 90       	pop	r0
    107a:	1f 90       	pop	r1
    107c:	18 95       	reti

0000107e <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    107e:	94 b1       	in	r25, 0x04	; 4
    1080:	90 6b       	ori	r25, 0xB0	; 176
    1082:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    1084:	2c 9a       	sbi	0x05, 4	; 5
	// from datasheet names for these registers/bits.)
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    1086:	90 e5       	ldi	r25, 0x50	; 80
    1088:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    108a:	88 30       	cpi	r24, 0x08	; 8
    108c:	21 f0       	breq	.+8      	; 0x1096 <spi_setup_master+0x18>
    108e:	80 32       	cpi	r24, 0x20	; 32
    1090:	11 f0       	breq	.+4      	; 0x1096 <spi_setup_master+0x18>
    1092:	82 30       	cpi	r24, 0x02	; 2
    1094:	19 f4       	brne	.+6      	; 0x109c <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    1096:	91 e0       	ldi	r25, 0x01	; 1
    1098:	9d bd       	out	0x2d, r25	; 45
			break;
    109a:	01 c0       	rjmp	.+2      	; 0x109e <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    109c:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    109e:	80 32       	cpi	r24, 0x20	; 32
    10a0:	69 f0       	breq	.+26     	; 0x10bc <spi_setup_master+0x3e>
    10a2:	28 f4       	brcc	.+10     	; 0x10ae <spi_setup_master+0x30>
    10a4:	88 30       	cpi	r24, 0x08	; 8
    10a6:	71 f0       	breq	.+28     	; 0x10c4 <spi_setup_master+0x46>
    10a8:	80 31       	cpi	r24, 0x10	; 16
    10aa:	61 f0       	breq	.+24     	; 0x10c4 <spi_setup_master+0x46>
    10ac:	0e c0       	rjmp	.+28     	; 0x10ca <spi_setup_master+0x4c>
    10ae:	80 34       	cpi	r24, 0x40	; 64
    10b0:	29 f0       	breq	.+10     	; 0x10bc <spi_setup_master+0x3e>
    10b2:	80 38       	cpi	r24, 0x80	; 128
    10b4:	51 f4       	brne	.+20     	; 0x10ca <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    10b6:	8c b5       	in	r24, 0x2c	; 44
    10b8:	81 60       	ori	r24, 0x01	; 1
    10ba:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    10bc:	8c b5       	in	r24, 0x2c	; 44
    10be:	82 60       	ori	r24, 0x02	; 2
    10c0:	8c bd       	out	0x2c, r24	; 44
			break;
    10c2:	03 c0       	rjmp	.+6      	; 0x10ca <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    10c4:	8c b5       	in	r24, 0x2c	; 44
    10c6:	81 60       	ori	r24, 0x01	; 1
    10c8:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    10ca:	2c 98       	cbi	0x05, 4	; 5
    10cc:	08 95       	ret

000010ce <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR (SPIF bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR followed by a read of SPDR
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    10ce:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    10d0:	0d b4       	in	r0, 0x2d	; 45
    10d2:	07 fe       	sbrs	r0, 7
    10d4:	fd cf       	rjmp	.-6      	; 0x10d0 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    10d6:	8e b5       	in	r24, 0x2e	; 46
    10d8:	08 95       	ret

000010da <move_cursor>:
void clear_terminal(void) {
	printf_P(PSTR("\x1b[2J"));
}

void clear_to_end_of_line(void) {
	printf_P(PSTR("\x1b[K"));
    10da:	28 2f       	mov	r18, r24
    10dc:	08 2e       	mov	r0, r24
    10de:	00 0c       	add	r0, r0
    10e0:	33 0b       	sbc	r19, r19
    10e2:	3f 93       	push	r19
    10e4:	8f 93       	push	r24
    10e6:	86 2f       	mov	r24, r22
    10e8:	06 2e       	mov	r0, r22
    10ea:	00 0c       	add	r0, r0
    10ec:	99 0b       	sbc	r25, r25
    10ee:	9f 93       	push	r25
    10f0:	6f 93       	push	r22
    10f2:	89 ec       	ldi	r24, 0xC9	; 201
    10f4:	91 e0       	ldi	r25, 0x01	; 1
    10f6:	9f 93       	push	r25
    10f8:	8f 93       	push	r24
    10fa:	0e 94 cb 09 	call	0x1396	; 0x1396 <printf_P>
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	08 95       	ret

0000110c <clear_terminal>:
    110c:	84 ec       	ldi	r24, 0xC4	; 196
    110e:	91 e0       	ldi	r25, 0x01	; 1
    1110:	9f 93       	push	r25
    1112:	8f 93       	push	r24
    1114:	0e 94 cb 09 	call	0x1396	; 0x1396 <printf_P>
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	08 95       	ret

0000111e <set_display_attribute>:
}

void set_display_attribute(DisplayParameter parameter) {
	printf_P(PSTR("\x1b[%dm"), parameter);
    111e:	1f 92       	push	r1
    1120:	8f 93       	push	r24
    1122:	8e eb       	ldi	r24, 0xBE	; 190
    1124:	91 e0       	ldi	r25, 0x01	; 1
    1126:	9f 93       	push	r25
    1128:	8f 93       	push	r24
    112a:	0e 94 cb 09 	call	0x1396	; 0x1396 <printf_P>
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	08 95       	ret

00001138 <hide_cursor>:
}

void hide_cursor() {
	printf_P(PSTR("\x1b[?25l"));
    1138:	87 eb       	ldi	r24, 0xB7	; 183
    113a:	91 e0       	ldi	r25, 0x01	; 1
    113c:	9f 93       	push	r25
    113e:	8f 93       	push	r24
    1140:	0e 94 cb 09 	call	0x1396	; 0x1396 <printf_P>
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	08 95       	ret

0000114a <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clock_ticks = 0L;
    114a:	10 92 8c 01 	sts	0x018C, r1
    114e:	10 92 8d 01 	sts	0x018D, r1
    1152:	10 92 8e 01 	sts	0x018E, r1
    1156:	10 92 8f 01 	sts	0x018F, r1
	
	/* Clear the timer */
	TCNT0 = 0;
    115a:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    115c:	8c e7       	ldi	r24, 0x7C	; 124
    115e:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    1160:	82 e0       	ldi	r24, 0x02	; 2
    1162:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    1164:	83 e0       	ldi	r24, 0x03	; 3
    1166:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    1168:	ee e6       	ldi	r30, 0x6E	; 110
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	82 60       	ori	r24, 0x02	; 2
    1170:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    1172:	85 b3       	in	r24, 0x15	; 21
    1174:	82 70       	andi	r24, 0x02	; 2
    1176:	85 bb       	out	0x15, r24	; 21
    1178:	08 95       	ret

0000117a <get_clock_ticks>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_on = bit_is_set(SREG, SREG_I);
    117a:	2f b7       	in	r18, 0x3f	; 63
	cli();
    117c:	f8 94       	cli
	return_value = clock_ticks;
    117e:	60 91 8c 01 	lds	r22, 0x018C
    1182:	70 91 8d 01 	lds	r23, 0x018D
    1186:	80 91 8e 01 	lds	r24, 0x018E
    118a:	90 91 8f 01 	lds	r25, 0x018F
	if(interrupts_were_on) {
    118e:	22 23       	and	r18, r18
    1190:	0c f4       	brge	.+2      	; 0x1194 <get_clock_ticks+0x1a>
		sei();
    1192:	78 94       	sei
	}
	return return_value;
}
    1194:	08 95       	ret

00001196 <__vector_16>:

/* Interrupt handler which fires when timer/counter 0 reaches 
 * the defined output compare value (every millisecond)
 */
ISR(TIMER0_COMPA_vect) {
    1196:	1f 92       	push	r1
    1198:	0f 92       	push	r0
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	0f 92       	push	r0
    119e:	11 24       	eor	r1, r1
    11a0:	8f 93       	push	r24
    11a2:	9f 93       	push	r25
    11a4:	af 93       	push	r26
    11a6:	bf 93       	push	r27
	/* Increment our clock tick count */
	clock_ticks++;
    11a8:	80 91 8c 01 	lds	r24, 0x018C
    11ac:	90 91 8d 01 	lds	r25, 0x018D
    11b0:	a0 91 8e 01 	lds	r26, 0x018E
    11b4:	b0 91 8f 01 	lds	r27, 0x018F
    11b8:	01 96       	adiw	r24, 0x01	; 1
    11ba:	a1 1d       	adc	r26, r1
    11bc:	b1 1d       	adc	r27, r1
    11be:	80 93 8c 01 	sts	0x018C, r24
    11c2:	90 93 8d 01 	sts	0x018D, r25
    11c6:	a0 93 8e 01 	sts	0x018E, r26
    11ca:	b0 93 8f 01 	sts	0x018F, r27
}
    11ce:	bf 91       	pop	r27
    11d0:	af 91       	pop	r26
    11d2:	9f 91       	pop	r25
    11d4:	8f 91       	pop	r24
    11d6:	0f 90       	pop	r0
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	0f 90       	pop	r0
    11dc:	1f 90       	pop	r1
    11de:	18 95       	reti

000011e0 <__divmodsi4>:
    11e0:	05 2e       	mov	r0, r21
    11e2:	97 fb       	bst	r25, 7
    11e4:	1e f4       	brtc	.+6      	; 0x11ec <__divmodsi4+0xc>
    11e6:	00 94       	com	r0
    11e8:	0e 94 07 09 	call	0x120e	; 0x120e <__negsi2>
    11ec:	57 fd       	sbrc	r21, 7
    11ee:	07 d0       	rcall	.+14     	; 0x11fe <__divmodsi4_neg2>
    11f0:	0e 94 0f 09 	call	0x121e	; 0x121e <__udivmodsi4>
    11f4:	07 fc       	sbrc	r0, 7
    11f6:	03 d0       	rcall	.+6      	; 0x11fe <__divmodsi4_neg2>
    11f8:	4e f4       	brtc	.+18     	; 0x120c <__divmodsi4_exit>
    11fa:	0c 94 07 09 	jmp	0x120e	; 0x120e <__negsi2>

000011fe <__divmodsi4_neg2>:
    11fe:	50 95       	com	r21
    1200:	40 95       	com	r20
    1202:	30 95       	com	r19
    1204:	21 95       	neg	r18
    1206:	3f 4f       	sbci	r19, 0xFF	; 255
    1208:	4f 4f       	sbci	r20, 0xFF	; 255
    120a:	5f 4f       	sbci	r21, 0xFF	; 255

0000120c <__divmodsi4_exit>:
    120c:	08 95       	ret

0000120e <__negsi2>:
    120e:	90 95       	com	r25
    1210:	80 95       	com	r24
    1212:	70 95       	com	r23
    1214:	61 95       	neg	r22
    1216:	7f 4f       	sbci	r23, 0xFF	; 255
    1218:	8f 4f       	sbci	r24, 0xFF	; 255
    121a:	9f 4f       	sbci	r25, 0xFF	; 255
    121c:	08 95       	ret

0000121e <__udivmodsi4>:
    121e:	a1 e2       	ldi	r26, 0x21	; 33
    1220:	1a 2e       	mov	r1, r26
    1222:	aa 1b       	sub	r26, r26
    1224:	bb 1b       	sub	r27, r27
    1226:	fd 01       	movw	r30, r26
    1228:	0d c0       	rjmp	.+26     	; 0x1244 <__udivmodsi4_ep>

0000122a <__udivmodsi4_loop>:
    122a:	aa 1f       	adc	r26, r26
    122c:	bb 1f       	adc	r27, r27
    122e:	ee 1f       	adc	r30, r30
    1230:	ff 1f       	adc	r31, r31
    1232:	a2 17       	cp	r26, r18
    1234:	b3 07       	cpc	r27, r19
    1236:	e4 07       	cpc	r30, r20
    1238:	f5 07       	cpc	r31, r21
    123a:	20 f0       	brcs	.+8      	; 0x1244 <__udivmodsi4_ep>
    123c:	a2 1b       	sub	r26, r18
    123e:	b3 0b       	sbc	r27, r19
    1240:	e4 0b       	sbc	r30, r20
    1242:	f5 0b       	sbc	r31, r21

00001244 <__udivmodsi4_ep>:
    1244:	66 1f       	adc	r22, r22
    1246:	77 1f       	adc	r23, r23
    1248:	88 1f       	adc	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	1a 94       	dec	r1
    124e:	69 f7       	brne	.-38     	; 0x122a <__udivmodsi4_loop>
    1250:	60 95       	com	r22
    1252:	70 95       	com	r23
    1254:	80 95       	com	r24
    1256:	90 95       	com	r25
    1258:	9b 01       	movw	r18, r22
    125a:	ac 01       	movw	r20, r24
    125c:	bd 01       	movw	r22, r26
    125e:	cf 01       	movw	r24, r30
    1260:	08 95       	ret

00001262 <do_random>:
    1262:	8f 92       	push	r8
    1264:	9f 92       	push	r9
    1266:	af 92       	push	r10
    1268:	bf 92       	push	r11
    126a:	cf 92       	push	r12
    126c:	df 92       	push	r13
    126e:	ef 92       	push	r14
    1270:	ff 92       	push	r15
    1272:	cf 93       	push	r28
    1274:	df 93       	push	r29
    1276:	ec 01       	movw	r28, r24
    1278:	68 81       	ld	r22, Y
    127a:	79 81       	ldd	r23, Y+1	; 0x01
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	9b 81       	ldd	r25, Y+3	; 0x03
    1280:	61 15       	cp	r22, r1
    1282:	71 05       	cpc	r23, r1
    1284:	81 05       	cpc	r24, r1
    1286:	91 05       	cpc	r25, r1
    1288:	21 f4       	brne	.+8      	; 0x1292 <do_random+0x30>
    128a:	64 e2       	ldi	r22, 0x24	; 36
    128c:	79 ed       	ldi	r23, 0xD9	; 217
    128e:	8b e5       	ldi	r24, 0x5B	; 91
    1290:	97 e0       	ldi	r25, 0x07	; 7
    1292:	2d e1       	ldi	r18, 0x1D	; 29
    1294:	33 ef       	ldi	r19, 0xF3	; 243
    1296:	41 e0       	ldi	r20, 0x01	; 1
    1298:	50 e0       	ldi	r21, 0x00	; 0
    129a:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__divmodsi4>
    129e:	49 01       	movw	r8, r18
    12a0:	5a 01       	movw	r10, r20
    12a2:	9b 01       	movw	r18, r22
    12a4:	ac 01       	movw	r20, r24
    12a6:	a7 ea       	ldi	r26, 0xA7	; 167
    12a8:	b1 e4       	ldi	r27, 0x41	; 65
    12aa:	0e 94 6f 0c 	call	0x18de	; 0x18de <__muluhisi3>
    12ae:	6b 01       	movw	r12, r22
    12b0:	7c 01       	movw	r14, r24
    12b2:	ac ee       	ldi	r26, 0xEC	; 236
    12b4:	b4 ef       	ldi	r27, 0xF4	; 244
    12b6:	a5 01       	movw	r20, r10
    12b8:	94 01       	movw	r18, r8
    12ba:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__mulohisi3>
    12be:	dc 01       	movw	r26, r24
    12c0:	cb 01       	movw	r24, r22
    12c2:	8c 0d       	add	r24, r12
    12c4:	9d 1d       	adc	r25, r13
    12c6:	ae 1d       	adc	r26, r14
    12c8:	bf 1d       	adc	r27, r15
    12ca:	b7 ff       	sbrs	r27, 7
    12cc:	03 c0       	rjmp	.+6      	; 0x12d4 <do_random+0x72>
    12ce:	01 97       	sbiw	r24, 0x01	; 1
    12d0:	a1 09       	sbc	r26, r1
    12d2:	b0 48       	sbci	r27, 0x80	; 128
    12d4:	88 83       	st	Y, r24
    12d6:	99 83       	std	Y+1, r25	; 0x01
    12d8:	aa 83       	std	Y+2, r26	; 0x02
    12da:	bb 83       	std	Y+3, r27	; 0x03
    12dc:	bc 01       	movw	r22, r24
    12de:	cd 01       	movw	r24, r26
    12e0:	9f 77       	andi	r25, 0x7F	; 127
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	ff 90       	pop	r15
    12e8:	ef 90       	pop	r14
    12ea:	df 90       	pop	r13
    12ec:	cf 90       	pop	r12
    12ee:	bf 90       	pop	r11
    12f0:	af 90       	pop	r10
    12f2:	9f 90       	pop	r9
    12f4:	8f 90       	pop	r8
    12f6:	08 95       	ret

000012f8 <random_r>:
    12f8:	0e 94 31 09 	call	0x1262	; 0x1262 <do_random>
    12fc:	08 95       	ret

000012fe <random>:
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	91 e0       	ldi	r25, 0x01	; 1
    1302:	0e 94 31 09 	call	0x1262	; 0x1262 <do_random>
    1306:	08 95       	ret

00001308 <srandom>:
    1308:	60 93 00 01 	sts	0x0100, r22
    130c:	70 93 01 01 	sts	0x0101, r23
    1310:	80 93 02 01 	sts	0x0102, r24
    1314:	90 93 03 01 	sts	0x0103, r25
    1318:	08 95       	ret

0000131a <fgetc>:
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
    131e:	ec 01       	movw	r28, r24
    1320:	2b 81       	ldd	r18, Y+3	; 0x03
    1322:	20 ff       	sbrs	r18, 0
    1324:	33 c0       	rjmp	.+102    	; 0x138c <fgetc+0x72>
    1326:	26 ff       	sbrs	r18, 6
    1328:	0a c0       	rjmp	.+20     	; 0x133e <fgetc+0x24>
    132a:	2f 7b       	andi	r18, 0xBF	; 191
    132c:	2b 83       	std	Y+3, r18	; 0x03
    132e:	8e 81       	ldd	r24, Y+6	; 0x06
    1330:	9f 81       	ldd	r25, Y+7	; 0x07
    1332:	01 96       	adiw	r24, 0x01	; 1
    1334:	9f 83       	std	Y+7, r25	; 0x07
    1336:	8e 83       	std	Y+6, r24	; 0x06
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	29 c0       	rjmp	.+82     	; 0x1390 <fgetc+0x76>
    133e:	22 ff       	sbrs	r18, 2
    1340:	0f c0       	rjmp	.+30     	; 0x1360 <fgetc+0x46>
    1342:	e8 81       	ld	r30, Y
    1344:	f9 81       	ldd	r31, Y+1	; 0x01
    1346:	80 81       	ld	r24, Z
    1348:	08 2e       	mov	r0, r24
    134a:	00 0c       	add	r0, r0
    134c:	99 0b       	sbc	r25, r25
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	19 f4       	brne	.+6      	; 0x1358 <fgetc+0x3e>
    1352:	20 62       	ori	r18, 0x20	; 32
    1354:	2b 83       	std	Y+3, r18	; 0x03
    1356:	1a c0       	rjmp	.+52     	; 0x138c <fgetc+0x72>
    1358:	31 96       	adiw	r30, 0x01	; 1
    135a:	f9 83       	std	Y+1, r31	; 0x01
    135c:	e8 83       	st	Y, r30
    135e:	0e c0       	rjmp	.+28     	; 0x137c <fgetc+0x62>
    1360:	ea 85       	ldd	r30, Y+10	; 0x0a
    1362:	fb 85       	ldd	r31, Y+11	; 0x0b
    1364:	09 95       	icall
    1366:	97 ff       	sbrs	r25, 7
    1368:	09 c0       	rjmp	.+18     	; 0x137c <fgetc+0x62>
    136a:	2b 81       	ldd	r18, Y+3	; 0x03
    136c:	01 96       	adiw	r24, 0x01	; 1
    136e:	11 f0       	breq	.+4      	; 0x1374 <fgetc+0x5a>
    1370:	80 e2       	ldi	r24, 0x20	; 32
    1372:	01 c0       	rjmp	.+2      	; 0x1376 <fgetc+0x5c>
    1374:	80 e1       	ldi	r24, 0x10	; 16
    1376:	82 2b       	or	r24, r18
    1378:	8b 83       	std	Y+3, r24	; 0x03
    137a:	08 c0       	rjmp	.+16     	; 0x138c <fgetc+0x72>
    137c:	2e 81       	ldd	r18, Y+6	; 0x06
    137e:	3f 81       	ldd	r19, Y+7	; 0x07
    1380:	2f 5f       	subi	r18, 0xFF	; 255
    1382:	3f 4f       	sbci	r19, 0xFF	; 255
    1384:	3f 83       	std	Y+7, r19	; 0x07
    1386:	2e 83       	std	Y+6, r18	; 0x06
    1388:	99 27       	eor	r25, r25
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <fgetc+0x76>
    138c:	8f ef       	ldi	r24, 0xFF	; 255
    138e:	9f ef       	ldi	r25, 0xFF	; 255
    1390:	df 91       	pop	r29
    1392:	cf 91       	pop	r28
    1394:	08 95       	ret

00001396 <printf_P>:
    1396:	a0 e0       	ldi	r26, 0x00	; 0
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e1 ed       	ldi	r30, 0xD1	; 209
    139c:	f9 e0       	ldi	r31, 0x09	; 9
    139e:	0c 94 90 0c 	jmp	0x1920	; 0x1920 <__prologue_saves__+0x1c>
    13a2:	ae 01       	movw	r20, r28
    13a4:	49 5f       	subi	r20, 0xF9	; 249
    13a6:	5f 4f       	sbci	r21, 0xFF	; 255
    13a8:	da 01       	movw	r26, r20
    13aa:	6d 91       	ld	r22, X+
    13ac:	7d 91       	ld	r23, X+
    13ae:	ad 01       	movw	r20, r26
    13b0:	0d e3       	ldi	r16, 0x3D	; 61
    13b2:	13 e0       	ldi	r17, 0x03	; 3
    13b4:	f8 01       	movw	r30, r16
    13b6:	82 81       	ldd	r24, Z+2	; 0x02
    13b8:	93 81       	ldd	r25, Z+3	; 0x03
    13ba:	dc 01       	movw	r26, r24
    13bc:	13 96       	adiw	r26, 0x03	; 3
    13be:	2c 91       	ld	r18, X
    13c0:	13 97       	sbiw	r26, 0x03	; 3
    13c2:	28 60       	ori	r18, 0x08	; 8
    13c4:	13 96       	adiw	r26, 0x03	; 3
    13c6:	2c 93       	st	X, r18
    13c8:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <vfprintf>
    13cc:	d8 01       	movw	r26, r16
    13ce:	12 96       	adiw	r26, 0x02	; 2
    13d0:	ed 91       	ld	r30, X+
    13d2:	fc 91       	ld	r31, X
    13d4:	13 97       	sbiw	r26, 0x03	; 3
    13d6:	23 81       	ldd	r18, Z+3	; 0x03
    13d8:	27 7f       	andi	r18, 0xF7	; 247
    13da:	23 83       	std	Z+3, r18	; 0x03
    13dc:	e4 e0       	ldi	r30, 0x04	; 4
    13de:	0c 94 ac 0c 	jmp	0x1958	; 0x1958 <__epilogue_restores__+0x1c>

000013e2 <vfprintf>:
    13e2:	ac e0       	ldi	r26, 0x0C	; 12
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e7 ef       	ldi	r30, 0xF7	; 247
    13e8:	f9 e0       	ldi	r31, 0x09	; 9
    13ea:	0c 94 82 0c 	jmp	0x1904	; 0x1904 <__prologue_saves__>
    13ee:	7c 01       	movw	r14, r24
    13f0:	6b 01       	movw	r12, r22
    13f2:	8a 01       	movw	r16, r20
    13f4:	fc 01       	movw	r30, r24
    13f6:	17 82       	std	Z+7, r1	; 0x07
    13f8:	16 82       	std	Z+6, r1	; 0x06
    13fa:	83 81       	ldd	r24, Z+3	; 0x03
    13fc:	81 ff       	sbrs	r24, 1
    13fe:	bd c1       	rjmp	.+890    	; 0x177a <vfprintf+0x398>
    1400:	ce 01       	movw	r24, r28
    1402:	01 96       	adiw	r24, 0x01	; 1
    1404:	4c 01       	movw	r8, r24
    1406:	f7 01       	movw	r30, r14
    1408:	93 81       	ldd	r25, Z+3	; 0x03
    140a:	f6 01       	movw	r30, r12
    140c:	93 fd       	sbrc	r25, 3
    140e:	85 91       	lpm	r24, Z+
    1410:	93 ff       	sbrs	r25, 3
    1412:	81 91       	ld	r24, Z+
    1414:	6f 01       	movw	r12, r30
    1416:	88 23       	and	r24, r24
    1418:	09 f4       	brne	.+2      	; 0x141c <vfprintf+0x3a>
    141a:	ab c1       	rjmp	.+854    	; 0x1772 <vfprintf+0x390>
    141c:	85 32       	cpi	r24, 0x25	; 37
    141e:	39 f4       	brne	.+14     	; 0x142e <vfprintf+0x4c>
    1420:	93 fd       	sbrc	r25, 3
    1422:	85 91       	lpm	r24, Z+
    1424:	93 ff       	sbrs	r25, 3
    1426:	81 91       	ld	r24, Z+
    1428:	6f 01       	movw	r12, r30
    142a:	85 32       	cpi	r24, 0x25	; 37
    142c:	29 f4       	brne	.+10     	; 0x1438 <vfprintf+0x56>
    142e:	b7 01       	movw	r22, r14
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <fputc>
    1436:	e7 cf       	rjmp	.-50     	; 0x1406 <vfprintf+0x24>
    1438:	51 2c       	mov	r5, r1
    143a:	31 2c       	mov	r3, r1
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	20 32       	cpi	r18, 0x20	; 32
    1440:	a0 f4       	brcc	.+40     	; 0x146a <vfprintf+0x88>
    1442:	8b 32       	cpi	r24, 0x2B	; 43
    1444:	69 f0       	breq	.+26     	; 0x1460 <vfprintf+0x7e>
    1446:	30 f4       	brcc	.+12     	; 0x1454 <vfprintf+0x72>
    1448:	80 32       	cpi	r24, 0x20	; 32
    144a:	59 f0       	breq	.+22     	; 0x1462 <vfprintf+0x80>
    144c:	83 32       	cpi	r24, 0x23	; 35
    144e:	69 f4       	brne	.+26     	; 0x146a <vfprintf+0x88>
    1450:	20 61       	ori	r18, 0x10	; 16
    1452:	2c c0       	rjmp	.+88     	; 0x14ac <vfprintf+0xca>
    1454:	8d 32       	cpi	r24, 0x2D	; 45
    1456:	39 f0       	breq	.+14     	; 0x1466 <vfprintf+0x84>
    1458:	80 33       	cpi	r24, 0x30	; 48
    145a:	39 f4       	brne	.+14     	; 0x146a <vfprintf+0x88>
    145c:	21 60       	ori	r18, 0x01	; 1
    145e:	26 c0       	rjmp	.+76     	; 0x14ac <vfprintf+0xca>
    1460:	22 60       	ori	r18, 0x02	; 2
    1462:	24 60       	ori	r18, 0x04	; 4
    1464:	23 c0       	rjmp	.+70     	; 0x14ac <vfprintf+0xca>
    1466:	28 60       	ori	r18, 0x08	; 8
    1468:	21 c0       	rjmp	.+66     	; 0x14ac <vfprintf+0xca>
    146a:	27 fd       	sbrc	r18, 7
    146c:	27 c0       	rjmp	.+78     	; 0x14bc <vfprintf+0xda>
    146e:	30 ed       	ldi	r19, 0xD0	; 208
    1470:	38 0f       	add	r19, r24
    1472:	3a 30       	cpi	r19, 0x0A	; 10
    1474:	78 f4       	brcc	.+30     	; 0x1494 <vfprintf+0xb2>
    1476:	26 ff       	sbrs	r18, 6
    1478:	06 c0       	rjmp	.+12     	; 0x1486 <vfprintf+0xa4>
    147a:	fa e0       	ldi	r31, 0x0A	; 10
    147c:	5f 9e       	mul	r5, r31
    147e:	30 0d       	add	r19, r0
    1480:	11 24       	eor	r1, r1
    1482:	53 2e       	mov	r5, r19
    1484:	13 c0       	rjmp	.+38     	; 0x14ac <vfprintf+0xca>
    1486:	8a e0       	ldi	r24, 0x0A	; 10
    1488:	38 9e       	mul	r3, r24
    148a:	30 0d       	add	r19, r0
    148c:	11 24       	eor	r1, r1
    148e:	33 2e       	mov	r3, r19
    1490:	20 62       	ori	r18, 0x20	; 32
    1492:	0c c0       	rjmp	.+24     	; 0x14ac <vfprintf+0xca>
    1494:	8e 32       	cpi	r24, 0x2E	; 46
    1496:	21 f4       	brne	.+8      	; 0x14a0 <vfprintf+0xbe>
    1498:	26 fd       	sbrc	r18, 6
    149a:	6b c1       	rjmp	.+726    	; 0x1772 <vfprintf+0x390>
    149c:	20 64       	ori	r18, 0x40	; 64
    149e:	06 c0       	rjmp	.+12     	; 0x14ac <vfprintf+0xca>
    14a0:	8c 36       	cpi	r24, 0x6C	; 108
    14a2:	11 f4       	brne	.+4      	; 0x14a8 <vfprintf+0xc6>
    14a4:	20 68       	ori	r18, 0x80	; 128
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <vfprintf+0xca>
    14a8:	88 36       	cpi	r24, 0x68	; 104
    14aa:	41 f4       	brne	.+16     	; 0x14bc <vfprintf+0xda>
    14ac:	f6 01       	movw	r30, r12
    14ae:	93 fd       	sbrc	r25, 3
    14b0:	85 91       	lpm	r24, Z+
    14b2:	93 ff       	sbrs	r25, 3
    14b4:	81 91       	ld	r24, Z+
    14b6:	6f 01       	movw	r12, r30
    14b8:	81 11       	cpse	r24, r1
    14ba:	c1 cf       	rjmp	.-126    	; 0x143e <vfprintf+0x5c>
    14bc:	98 2f       	mov	r25, r24
    14be:	9f 7d       	andi	r25, 0xDF	; 223
    14c0:	95 54       	subi	r25, 0x45	; 69
    14c2:	93 30       	cpi	r25, 0x03	; 3
    14c4:	28 f4       	brcc	.+10     	; 0x14d0 <vfprintf+0xee>
    14c6:	0c 5f       	subi	r16, 0xFC	; 252
    14c8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ca:	ff e3       	ldi	r31, 0x3F	; 63
    14cc:	f9 83       	std	Y+1, r31	; 0x01
    14ce:	0d c0       	rjmp	.+26     	; 0x14ea <vfprintf+0x108>
    14d0:	83 36       	cpi	r24, 0x63	; 99
    14d2:	31 f0       	breq	.+12     	; 0x14e0 <vfprintf+0xfe>
    14d4:	83 37       	cpi	r24, 0x73	; 115
    14d6:	71 f0       	breq	.+28     	; 0x14f4 <vfprintf+0x112>
    14d8:	83 35       	cpi	r24, 0x53	; 83
    14da:	09 f0       	breq	.+2      	; 0x14de <vfprintf+0xfc>
    14dc:	5b c0       	rjmp	.+182    	; 0x1594 <vfprintf+0x1b2>
    14de:	22 c0       	rjmp	.+68     	; 0x1524 <vfprintf+0x142>
    14e0:	f8 01       	movw	r30, r16
    14e2:	80 81       	ld	r24, Z
    14e4:	89 83       	std	Y+1, r24	; 0x01
    14e6:	0e 5f       	subi	r16, 0xFE	; 254
    14e8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ea:	44 24       	eor	r4, r4
    14ec:	43 94       	inc	r4
    14ee:	51 2c       	mov	r5, r1
    14f0:	54 01       	movw	r10, r8
    14f2:	15 c0       	rjmp	.+42     	; 0x151e <vfprintf+0x13c>
    14f4:	38 01       	movw	r6, r16
    14f6:	f2 e0       	ldi	r31, 0x02	; 2
    14f8:	6f 0e       	add	r6, r31
    14fa:	71 1c       	adc	r7, r1
    14fc:	f8 01       	movw	r30, r16
    14fe:	a0 80       	ld	r10, Z
    1500:	b1 80       	ldd	r11, Z+1	; 0x01
    1502:	26 ff       	sbrs	r18, 6
    1504:	03 c0       	rjmp	.+6      	; 0x150c <vfprintf+0x12a>
    1506:	65 2d       	mov	r22, r5
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <vfprintf+0x12e>
    150c:	6f ef       	ldi	r22, 0xFF	; 255
    150e:	7f ef       	ldi	r23, 0xFF	; 255
    1510:	c5 01       	movw	r24, r10
    1512:	2c 87       	std	Y+12, r18	; 0x0c
    1514:	0e 94 ce 0b 	call	0x179c	; 0x179c <strnlen>
    1518:	2c 01       	movw	r4, r24
    151a:	83 01       	movw	r16, r6
    151c:	2c 85       	ldd	r18, Y+12	; 0x0c
    151e:	2f 77       	andi	r18, 0x7F	; 127
    1520:	22 2e       	mov	r2, r18
    1522:	17 c0       	rjmp	.+46     	; 0x1552 <vfprintf+0x170>
    1524:	38 01       	movw	r6, r16
    1526:	f2 e0       	ldi	r31, 0x02	; 2
    1528:	6f 0e       	add	r6, r31
    152a:	71 1c       	adc	r7, r1
    152c:	f8 01       	movw	r30, r16
    152e:	a0 80       	ld	r10, Z
    1530:	b1 80       	ldd	r11, Z+1	; 0x01
    1532:	26 ff       	sbrs	r18, 6
    1534:	03 c0       	rjmp	.+6      	; 0x153c <vfprintf+0x15a>
    1536:	65 2d       	mov	r22, r5
    1538:	70 e0       	ldi	r23, 0x00	; 0
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <vfprintf+0x15e>
    153c:	6f ef       	ldi	r22, 0xFF	; 255
    153e:	7f ef       	ldi	r23, 0xFF	; 255
    1540:	c5 01       	movw	r24, r10
    1542:	2c 87       	std	Y+12, r18	; 0x0c
    1544:	0e 94 c3 0b 	call	0x1786	; 0x1786 <strnlen_P>
    1548:	2c 01       	movw	r4, r24
    154a:	2c 85       	ldd	r18, Y+12	; 0x0c
    154c:	20 68       	ori	r18, 0x80	; 128
    154e:	22 2e       	mov	r2, r18
    1550:	83 01       	movw	r16, r6
    1552:	23 fc       	sbrc	r2, 3
    1554:	1b c0       	rjmp	.+54     	; 0x158c <vfprintf+0x1aa>
    1556:	83 2d       	mov	r24, r3
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	48 16       	cp	r4, r24
    155c:	59 06       	cpc	r5, r25
    155e:	b0 f4       	brcc	.+44     	; 0x158c <vfprintf+0x1aa>
    1560:	b7 01       	movw	r22, r14
    1562:	80 e2       	ldi	r24, 0x20	; 32
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <fputc>
    156a:	3a 94       	dec	r3
    156c:	f4 cf       	rjmp	.-24     	; 0x1556 <vfprintf+0x174>
    156e:	f5 01       	movw	r30, r10
    1570:	27 fc       	sbrc	r2, 7
    1572:	85 91       	lpm	r24, Z+
    1574:	27 fe       	sbrs	r2, 7
    1576:	81 91       	ld	r24, Z+
    1578:	5f 01       	movw	r10, r30
    157a:	b7 01       	movw	r22, r14
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <fputc>
    1582:	31 10       	cpse	r3, r1
    1584:	3a 94       	dec	r3
    1586:	f1 e0       	ldi	r31, 0x01	; 1
    1588:	4f 1a       	sub	r4, r31
    158a:	51 08       	sbc	r5, r1
    158c:	41 14       	cp	r4, r1
    158e:	51 04       	cpc	r5, r1
    1590:	71 f7       	brne	.-36     	; 0x156e <vfprintf+0x18c>
    1592:	e5 c0       	rjmp	.+458    	; 0x175e <vfprintf+0x37c>
    1594:	84 36       	cpi	r24, 0x64	; 100
    1596:	11 f0       	breq	.+4      	; 0x159c <vfprintf+0x1ba>
    1598:	89 36       	cpi	r24, 0x69	; 105
    159a:	39 f5       	brne	.+78     	; 0x15ea <vfprintf+0x208>
    159c:	f8 01       	movw	r30, r16
    159e:	27 ff       	sbrs	r18, 7
    15a0:	07 c0       	rjmp	.+14     	; 0x15b0 <vfprintf+0x1ce>
    15a2:	60 81       	ld	r22, Z
    15a4:	71 81       	ldd	r23, Z+1	; 0x01
    15a6:	82 81       	ldd	r24, Z+2	; 0x02
    15a8:	93 81       	ldd	r25, Z+3	; 0x03
    15aa:	0c 5f       	subi	r16, 0xFC	; 252
    15ac:	1f 4f       	sbci	r17, 0xFF	; 255
    15ae:	08 c0       	rjmp	.+16     	; 0x15c0 <vfprintf+0x1de>
    15b0:	60 81       	ld	r22, Z
    15b2:	71 81       	ldd	r23, Z+1	; 0x01
    15b4:	07 2e       	mov	r0, r23
    15b6:	00 0c       	add	r0, r0
    15b8:	88 0b       	sbc	r24, r24
    15ba:	99 0b       	sbc	r25, r25
    15bc:	0e 5f       	subi	r16, 0xFE	; 254
    15be:	1f 4f       	sbci	r17, 0xFF	; 255
    15c0:	2f 76       	andi	r18, 0x6F	; 111
    15c2:	72 2e       	mov	r7, r18
    15c4:	97 ff       	sbrs	r25, 7
    15c6:	09 c0       	rjmp	.+18     	; 0x15da <vfprintf+0x1f8>
    15c8:	90 95       	com	r25
    15ca:	80 95       	com	r24
    15cc:	70 95       	com	r23
    15ce:	61 95       	neg	r22
    15d0:	7f 4f       	sbci	r23, 0xFF	; 255
    15d2:	8f 4f       	sbci	r24, 0xFF	; 255
    15d4:	9f 4f       	sbci	r25, 0xFF	; 255
    15d6:	20 68       	ori	r18, 0x80	; 128
    15d8:	72 2e       	mov	r7, r18
    15da:	2a e0       	ldi	r18, 0x0A	; 10
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	a4 01       	movw	r20, r8
    15e0:	0e 94 11 0c 	call	0x1822	; 0x1822 <__ultoa_invert>
    15e4:	a8 2e       	mov	r10, r24
    15e6:	a8 18       	sub	r10, r8
    15e8:	44 c0       	rjmp	.+136    	; 0x1672 <vfprintf+0x290>
    15ea:	85 37       	cpi	r24, 0x75	; 117
    15ec:	29 f4       	brne	.+10     	; 0x15f8 <vfprintf+0x216>
    15ee:	2f 7e       	andi	r18, 0xEF	; 239
    15f0:	b2 2e       	mov	r11, r18
    15f2:	2a e0       	ldi	r18, 0x0A	; 10
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	25 c0       	rjmp	.+74     	; 0x1642 <vfprintf+0x260>
    15f8:	f2 2f       	mov	r31, r18
    15fa:	f9 7f       	andi	r31, 0xF9	; 249
    15fc:	bf 2e       	mov	r11, r31
    15fe:	8f 36       	cpi	r24, 0x6F	; 111
    1600:	c1 f0       	breq	.+48     	; 0x1632 <vfprintf+0x250>
    1602:	18 f4       	brcc	.+6      	; 0x160a <vfprintf+0x228>
    1604:	88 35       	cpi	r24, 0x58	; 88
    1606:	79 f0       	breq	.+30     	; 0x1626 <vfprintf+0x244>
    1608:	b4 c0       	rjmp	.+360    	; 0x1772 <vfprintf+0x390>
    160a:	80 37       	cpi	r24, 0x70	; 112
    160c:	19 f0       	breq	.+6      	; 0x1614 <vfprintf+0x232>
    160e:	88 37       	cpi	r24, 0x78	; 120
    1610:	21 f0       	breq	.+8      	; 0x161a <vfprintf+0x238>
    1612:	af c0       	rjmp	.+350    	; 0x1772 <vfprintf+0x390>
    1614:	2f 2f       	mov	r18, r31
    1616:	20 61       	ori	r18, 0x10	; 16
    1618:	b2 2e       	mov	r11, r18
    161a:	b4 fe       	sbrs	r11, 4
    161c:	0d c0       	rjmp	.+26     	; 0x1638 <vfprintf+0x256>
    161e:	8b 2d       	mov	r24, r11
    1620:	84 60       	ori	r24, 0x04	; 4
    1622:	b8 2e       	mov	r11, r24
    1624:	09 c0       	rjmp	.+18     	; 0x1638 <vfprintf+0x256>
    1626:	24 ff       	sbrs	r18, 4
    1628:	0a c0       	rjmp	.+20     	; 0x163e <vfprintf+0x25c>
    162a:	9f 2f       	mov	r25, r31
    162c:	96 60       	ori	r25, 0x06	; 6
    162e:	b9 2e       	mov	r11, r25
    1630:	06 c0       	rjmp	.+12     	; 0x163e <vfprintf+0x25c>
    1632:	28 e0       	ldi	r18, 0x08	; 8
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	05 c0       	rjmp	.+10     	; 0x1642 <vfprintf+0x260>
    1638:	20 e1       	ldi	r18, 0x10	; 16
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <vfprintf+0x260>
    163e:	20 e1       	ldi	r18, 0x10	; 16
    1640:	32 e0       	ldi	r19, 0x02	; 2
    1642:	f8 01       	movw	r30, r16
    1644:	b7 fe       	sbrs	r11, 7
    1646:	07 c0       	rjmp	.+14     	; 0x1656 <vfprintf+0x274>
    1648:	60 81       	ld	r22, Z
    164a:	71 81       	ldd	r23, Z+1	; 0x01
    164c:	82 81       	ldd	r24, Z+2	; 0x02
    164e:	93 81       	ldd	r25, Z+3	; 0x03
    1650:	0c 5f       	subi	r16, 0xFC	; 252
    1652:	1f 4f       	sbci	r17, 0xFF	; 255
    1654:	06 c0       	rjmp	.+12     	; 0x1662 <vfprintf+0x280>
    1656:	60 81       	ld	r22, Z
    1658:	71 81       	ldd	r23, Z+1	; 0x01
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	0e 5f       	subi	r16, 0xFE	; 254
    1660:	1f 4f       	sbci	r17, 0xFF	; 255
    1662:	a4 01       	movw	r20, r8
    1664:	0e 94 11 0c 	call	0x1822	; 0x1822 <__ultoa_invert>
    1668:	a8 2e       	mov	r10, r24
    166a:	a8 18       	sub	r10, r8
    166c:	fb 2d       	mov	r31, r11
    166e:	ff 77       	andi	r31, 0x7F	; 127
    1670:	7f 2e       	mov	r7, r31
    1672:	76 fe       	sbrs	r7, 6
    1674:	0b c0       	rjmp	.+22     	; 0x168c <vfprintf+0x2aa>
    1676:	37 2d       	mov	r19, r7
    1678:	3e 7f       	andi	r19, 0xFE	; 254
    167a:	a5 14       	cp	r10, r5
    167c:	50 f4       	brcc	.+20     	; 0x1692 <vfprintf+0x2b0>
    167e:	74 fe       	sbrs	r7, 4
    1680:	0a c0       	rjmp	.+20     	; 0x1696 <vfprintf+0x2b4>
    1682:	72 fc       	sbrc	r7, 2
    1684:	08 c0       	rjmp	.+16     	; 0x1696 <vfprintf+0x2b4>
    1686:	37 2d       	mov	r19, r7
    1688:	3e 7e       	andi	r19, 0xEE	; 238
    168a:	05 c0       	rjmp	.+10     	; 0x1696 <vfprintf+0x2b4>
    168c:	ba 2c       	mov	r11, r10
    168e:	37 2d       	mov	r19, r7
    1690:	03 c0       	rjmp	.+6      	; 0x1698 <vfprintf+0x2b6>
    1692:	ba 2c       	mov	r11, r10
    1694:	01 c0       	rjmp	.+2      	; 0x1698 <vfprintf+0x2b6>
    1696:	b5 2c       	mov	r11, r5
    1698:	34 ff       	sbrs	r19, 4
    169a:	0d c0       	rjmp	.+26     	; 0x16b6 <vfprintf+0x2d4>
    169c:	fe 01       	movw	r30, r28
    169e:	ea 0d       	add	r30, r10
    16a0:	f1 1d       	adc	r31, r1
    16a2:	80 81       	ld	r24, Z
    16a4:	80 33       	cpi	r24, 0x30	; 48
    16a6:	11 f4       	brne	.+4      	; 0x16ac <vfprintf+0x2ca>
    16a8:	39 7e       	andi	r19, 0xE9	; 233
    16aa:	09 c0       	rjmp	.+18     	; 0x16be <vfprintf+0x2dc>
    16ac:	32 ff       	sbrs	r19, 2
    16ae:	06 c0       	rjmp	.+12     	; 0x16bc <vfprintf+0x2da>
    16b0:	b3 94       	inc	r11
    16b2:	b3 94       	inc	r11
    16b4:	04 c0       	rjmp	.+8      	; 0x16be <vfprintf+0x2dc>
    16b6:	83 2f       	mov	r24, r19
    16b8:	86 78       	andi	r24, 0x86	; 134
    16ba:	09 f0       	breq	.+2      	; 0x16be <vfprintf+0x2dc>
    16bc:	b3 94       	inc	r11
    16be:	33 fd       	sbrc	r19, 3
    16c0:	13 c0       	rjmp	.+38     	; 0x16e8 <vfprintf+0x306>
    16c2:	30 ff       	sbrs	r19, 0
    16c4:	06 c0       	rjmp	.+12     	; 0x16d2 <vfprintf+0x2f0>
    16c6:	5a 2c       	mov	r5, r10
    16c8:	b3 14       	cp	r11, r3
    16ca:	18 f4       	brcc	.+6      	; 0x16d2 <vfprintf+0x2f0>
    16cc:	53 0c       	add	r5, r3
    16ce:	5b 18       	sub	r5, r11
    16d0:	b3 2c       	mov	r11, r3
    16d2:	b3 14       	cp	r11, r3
    16d4:	68 f4       	brcc	.+26     	; 0x16f0 <vfprintf+0x30e>
    16d6:	b7 01       	movw	r22, r14
    16d8:	80 e2       	ldi	r24, 0x20	; 32
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	3c 87       	std	Y+12, r19	; 0x0c
    16de:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <fputc>
    16e2:	b3 94       	inc	r11
    16e4:	3c 85       	ldd	r19, Y+12	; 0x0c
    16e6:	f5 cf       	rjmp	.-22     	; 0x16d2 <vfprintf+0x2f0>
    16e8:	b3 14       	cp	r11, r3
    16ea:	10 f4       	brcc	.+4      	; 0x16f0 <vfprintf+0x30e>
    16ec:	3b 18       	sub	r3, r11
    16ee:	01 c0       	rjmp	.+2      	; 0x16f2 <vfprintf+0x310>
    16f0:	31 2c       	mov	r3, r1
    16f2:	34 ff       	sbrs	r19, 4
    16f4:	12 c0       	rjmp	.+36     	; 0x171a <vfprintf+0x338>
    16f6:	b7 01       	movw	r22, r14
    16f8:	80 e3       	ldi	r24, 0x30	; 48
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	3c 87       	std	Y+12, r19	; 0x0c
    16fe:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <fputc>
    1702:	3c 85       	ldd	r19, Y+12	; 0x0c
    1704:	32 ff       	sbrs	r19, 2
    1706:	17 c0       	rjmp	.+46     	; 0x1736 <vfprintf+0x354>
    1708:	31 fd       	sbrc	r19, 1
    170a:	03 c0       	rjmp	.+6      	; 0x1712 <vfprintf+0x330>
    170c:	88 e7       	ldi	r24, 0x78	; 120
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <vfprintf+0x334>
    1712:	88 e5       	ldi	r24, 0x58	; 88
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	b7 01       	movw	r22, r14
    1718:	0c c0       	rjmp	.+24     	; 0x1732 <vfprintf+0x350>
    171a:	83 2f       	mov	r24, r19
    171c:	86 78       	andi	r24, 0x86	; 134
    171e:	59 f0       	breq	.+22     	; 0x1736 <vfprintf+0x354>
    1720:	31 ff       	sbrs	r19, 1
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <vfprintf+0x346>
    1724:	8b e2       	ldi	r24, 0x2B	; 43
    1726:	01 c0       	rjmp	.+2      	; 0x172a <vfprintf+0x348>
    1728:	80 e2       	ldi	r24, 0x20	; 32
    172a:	37 fd       	sbrc	r19, 7
    172c:	8d e2       	ldi	r24, 0x2D	; 45
    172e:	b7 01       	movw	r22, r14
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <fputc>
    1736:	a5 14       	cp	r10, r5
    1738:	38 f4       	brcc	.+14     	; 0x1748 <vfprintf+0x366>
    173a:	b7 01       	movw	r22, r14
    173c:	80 e3       	ldi	r24, 0x30	; 48
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <fputc>
    1744:	5a 94       	dec	r5
    1746:	f7 cf       	rjmp	.-18     	; 0x1736 <vfprintf+0x354>
    1748:	aa 94       	dec	r10
    174a:	f4 01       	movw	r30, r8
    174c:	ea 0d       	add	r30, r10
    174e:	f1 1d       	adc	r31, r1
    1750:	80 81       	ld	r24, Z
    1752:	b7 01       	movw	r22, r14
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <fputc>
    175a:	a1 10       	cpse	r10, r1
    175c:	f5 cf       	rjmp	.-22     	; 0x1748 <vfprintf+0x366>
    175e:	33 20       	and	r3, r3
    1760:	09 f4       	brne	.+2      	; 0x1764 <vfprintf+0x382>
    1762:	51 ce       	rjmp	.-862    	; 0x1406 <vfprintf+0x24>
    1764:	b7 01       	movw	r22, r14
    1766:	80 e2       	ldi	r24, 0x20	; 32
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <fputc>
    176e:	3a 94       	dec	r3
    1770:	f6 cf       	rjmp	.-20     	; 0x175e <vfprintf+0x37c>
    1772:	f7 01       	movw	r30, r14
    1774:	86 81       	ldd	r24, Z+6	; 0x06
    1776:	97 81       	ldd	r25, Z+7	; 0x07
    1778:	02 c0       	rjmp	.+4      	; 0x177e <vfprintf+0x39c>
    177a:	8f ef       	ldi	r24, 0xFF	; 255
    177c:	9f ef       	ldi	r25, 0xFF	; 255
    177e:	2c 96       	adiw	r28, 0x0c	; 12
    1780:	e2 e1       	ldi	r30, 0x12	; 18
    1782:	0c 94 9e 0c 	jmp	0x193c	; 0x193c <__epilogue_restores__>

00001786 <strnlen_P>:
    1786:	fc 01       	movw	r30, r24
    1788:	05 90       	lpm	r0, Z+
    178a:	61 50       	subi	r22, 0x01	; 1
    178c:	70 40       	sbci	r23, 0x00	; 0
    178e:	01 10       	cpse	r0, r1
    1790:	d8 f7       	brcc	.-10     	; 0x1788 <strnlen_P+0x2>
    1792:	80 95       	com	r24
    1794:	90 95       	com	r25
    1796:	8e 0f       	add	r24, r30
    1798:	9f 1f       	adc	r25, r31
    179a:	08 95       	ret

0000179c <strnlen>:
    179c:	fc 01       	movw	r30, r24
    179e:	61 50       	subi	r22, 0x01	; 1
    17a0:	70 40       	sbci	r23, 0x00	; 0
    17a2:	01 90       	ld	r0, Z+
    17a4:	01 10       	cpse	r0, r1
    17a6:	d8 f7       	brcc	.-10     	; 0x179e <strnlen+0x2>
    17a8:	80 95       	com	r24
    17aa:	90 95       	com	r25
    17ac:	8e 0f       	add	r24, r30
    17ae:	9f 1f       	adc	r25, r31
    17b0:	08 95       	ret

000017b2 <fputc>:
    17b2:	0f 93       	push	r16
    17b4:	1f 93       	push	r17
    17b6:	cf 93       	push	r28
    17b8:	df 93       	push	r29
    17ba:	fb 01       	movw	r30, r22
    17bc:	23 81       	ldd	r18, Z+3	; 0x03
    17be:	21 fd       	sbrc	r18, 1
    17c0:	03 c0       	rjmp	.+6      	; 0x17c8 <fputc+0x16>
    17c2:	8f ef       	ldi	r24, 0xFF	; 255
    17c4:	9f ef       	ldi	r25, 0xFF	; 255
    17c6:	28 c0       	rjmp	.+80     	; 0x1818 <fputc+0x66>
    17c8:	22 ff       	sbrs	r18, 2
    17ca:	16 c0       	rjmp	.+44     	; 0x17f8 <fputc+0x46>
    17cc:	46 81       	ldd	r20, Z+6	; 0x06
    17ce:	57 81       	ldd	r21, Z+7	; 0x07
    17d0:	24 81       	ldd	r18, Z+4	; 0x04
    17d2:	35 81       	ldd	r19, Z+5	; 0x05
    17d4:	42 17       	cp	r20, r18
    17d6:	53 07       	cpc	r21, r19
    17d8:	44 f4       	brge	.+16     	; 0x17ea <fputc+0x38>
    17da:	a0 81       	ld	r26, Z
    17dc:	b1 81       	ldd	r27, Z+1	; 0x01
    17de:	9d 01       	movw	r18, r26
    17e0:	2f 5f       	subi	r18, 0xFF	; 255
    17e2:	3f 4f       	sbci	r19, 0xFF	; 255
    17e4:	31 83       	std	Z+1, r19	; 0x01
    17e6:	20 83       	st	Z, r18
    17e8:	8c 93       	st	X, r24
    17ea:	26 81       	ldd	r18, Z+6	; 0x06
    17ec:	37 81       	ldd	r19, Z+7	; 0x07
    17ee:	2f 5f       	subi	r18, 0xFF	; 255
    17f0:	3f 4f       	sbci	r19, 0xFF	; 255
    17f2:	37 83       	std	Z+7, r19	; 0x07
    17f4:	26 83       	std	Z+6, r18	; 0x06
    17f6:	10 c0       	rjmp	.+32     	; 0x1818 <fputc+0x66>
    17f8:	eb 01       	movw	r28, r22
    17fa:	09 2f       	mov	r16, r25
    17fc:	18 2f       	mov	r17, r24
    17fe:	00 84       	ldd	r0, Z+8	; 0x08
    1800:	f1 85       	ldd	r31, Z+9	; 0x09
    1802:	e0 2d       	mov	r30, r0
    1804:	09 95       	icall
    1806:	89 2b       	or	r24, r25
    1808:	e1 f6       	brne	.-72     	; 0x17c2 <fputc+0x10>
    180a:	8e 81       	ldd	r24, Y+6	; 0x06
    180c:	9f 81       	ldd	r25, Y+7	; 0x07
    180e:	01 96       	adiw	r24, 0x01	; 1
    1810:	9f 83       	std	Y+7, r25	; 0x07
    1812:	8e 83       	std	Y+6, r24	; 0x06
    1814:	81 2f       	mov	r24, r17
    1816:	90 2f       	mov	r25, r16
    1818:	df 91       	pop	r29
    181a:	cf 91       	pop	r28
    181c:	1f 91       	pop	r17
    181e:	0f 91       	pop	r16
    1820:	08 95       	ret

00001822 <__ultoa_invert>:
    1822:	fa 01       	movw	r30, r20
    1824:	aa 27       	eor	r26, r26
    1826:	28 30       	cpi	r18, 0x08	; 8
    1828:	51 f1       	breq	.+84     	; 0x187e <__ultoa_invert+0x5c>
    182a:	20 31       	cpi	r18, 0x10	; 16
    182c:	81 f1       	breq	.+96     	; 0x188e <__ultoa_invert+0x6c>
    182e:	e8 94       	clt
    1830:	6f 93       	push	r22
    1832:	6e 7f       	andi	r22, 0xFE	; 254
    1834:	6e 5f       	subi	r22, 0xFE	; 254
    1836:	7f 4f       	sbci	r23, 0xFF	; 255
    1838:	8f 4f       	sbci	r24, 0xFF	; 255
    183a:	9f 4f       	sbci	r25, 0xFF	; 255
    183c:	af 4f       	sbci	r26, 0xFF	; 255
    183e:	b1 e0       	ldi	r27, 0x01	; 1
    1840:	3e d0       	rcall	.+124    	; 0x18be <__ultoa_invert+0x9c>
    1842:	b4 e0       	ldi	r27, 0x04	; 4
    1844:	3c d0       	rcall	.+120    	; 0x18be <__ultoa_invert+0x9c>
    1846:	67 0f       	add	r22, r23
    1848:	78 1f       	adc	r23, r24
    184a:	89 1f       	adc	r24, r25
    184c:	9a 1f       	adc	r25, r26
    184e:	a1 1d       	adc	r26, r1
    1850:	68 0f       	add	r22, r24
    1852:	79 1f       	adc	r23, r25
    1854:	8a 1f       	adc	r24, r26
    1856:	91 1d       	adc	r25, r1
    1858:	a1 1d       	adc	r26, r1
    185a:	6a 0f       	add	r22, r26
    185c:	71 1d       	adc	r23, r1
    185e:	81 1d       	adc	r24, r1
    1860:	91 1d       	adc	r25, r1
    1862:	a1 1d       	adc	r26, r1
    1864:	20 d0       	rcall	.+64     	; 0x18a6 <__ultoa_invert+0x84>
    1866:	09 f4       	brne	.+2      	; 0x186a <__ultoa_invert+0x48>
    1868:	68 94       	set
    186a:	3f 91       	pop	r19
    186c:	2a e0       	ldi	r18, 0x0A	; 10
    186e:	26 9f       	mul	r18, r22
    1870:	11 24       	eor	r1, r1
    1872:	30 19       	sub	r19, r0
    1874:	30 5d       	subi	r19, 0xD0	; 208
    1876:	31 93       	st	Z+, r19
    1878:	de f6       	brtc	.-74     	; 0x1830 <__ultoa_invert+0xe>
    187a:	cf 01       	movw	r24, r30
    187c:	08 95       	ret
    187e:	46 2f       	mov	r20, r22
    1880:	47 70       	andi	r20, 0x07	; 7
    1882:	40 5d       	subi	r20, 0xD0	; 208
    1884:	41 93       	st	Z+, r20
    1886:	b3 e0       	ldi	r27, 0x03	; 3
    1888:	0f d0       	rcall	.+30     	; 0x18a8 <__ultoa_invert+0x86>
    188a:	c9 f7       	brne	.-14     	; 0x187e <__ultoa_invert+0x5c>
    188c:	f6 cf       	rjmp	.-20     	; 0x187a <__ultoa_invert+0x58>
    188e:	46 2f       	mov	r20, r22
    1890:	4f 70       	andi	r20, 0x0F	; 15
    1892:	40 5d       	subi	r20, 0xD0	; 208
    1894:	4a 33       	cpi	r20, 0x3A	; 58
    1896:	18 f0       	brcs	.+6      	; 0x189e <__ultoa_invert+0x7c>
    1898:	49 5d       	subi	r20, 0xD9	; 217
    189a:	31 fd       	sbrc	r19, 1
    189c:	40 52       	subi	r20, 0x20	; 32
    189e:	41 93       	st	Z+, r20
    18a0:	02 d0       	rcall	.+4      	; 0x18a6 <__ultoa_invert+0x84>
    18a2:	a9 f7       	brne	.-22     	; 0x188e <__ultoa_invert+0x6c>
    18a4:	ea cf       	rjmp	.-44     	; 0x187a <__ultoa_invert+0x58>
    18a6:	b4 e0       	ldi	r27, 0x04	; 4
    18a8:	a6 95       	lsr	r26
    18aa:	97 95       	ror	r25
    18ac:	87 95       	ror	r24
    18ae:	77 95       	ror	r23
    18b0:	67 95       	ror	r22
    18b2:	ba 95       	dec	r27
    18b4:	c9 f7       	brne	.-14     	; 0x18a8 <__ultoa_invert+0x86>
    18b6:	00 97       	sbiw	r24, 0x00	; 0
    18b8:	61 05       	cpc	r22, r1
    18ba:	71 05       	cpc	r23, r1
    18bc:	08 95       	ret
    18be:	9b 01       	movw	r18, r22
    18c0:	ac 01       	movw	r20, r24
    18c2:	0a 2e       	mov	r0, r26
    18c4:	06 94       	lsr	r0
    18c6:	57 95       	ror	r21
    18c8:	47 95       	ror	r20
    18ca:	37 95       	ror	r19
    18cc:	27 95       	ror	r18
    18ce:	ba 95       	dec	r27
    18d0:	c9 f7       	brne	.-14     	; 0x18c4 <__ultoa_invert+0xa2>
    18d2:	62 0f       	add	r22, r18
    18d4:	73 1f       	adc	r23, r19
    18d6:	84 1f       	adc	r24, r20
    18d8:	95 1f       	adc	r25, r21
    18da:	a0 1d       	adc	r26, r0
    18dc:	08 95       	ret

000018de <__muluhisi3>:
    18de:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__umulhisi3>
    18e2:	a5 9f       	mul	r26, r21
    18e4:	90 0d       	add	r25, r0
    18e6:	b4 9f       	mul	r27, r20
    18e8:	90 0d       	add	r25, r0
    18ea:	a4 9f       	mul	r26, r20
    18ec:	80 0d       	add	r24, r0
    18ee:	91 1d       	adc	r25, r1
    18f0:	11 24       	eor	r1, r1
    18f2:	08 95       	ret

000018f4 <__mulshisi3>:
    18f4:	b7 ff       	sbrs	r27, 7
    18f6:	0c 94 6f 0c 	jmp	0x18de	; 0x18de <__muluhisi3>

000018fa <__mulohisi3>:
    18fa:	0e 94 6f 0c 	call	0x18de	; 0x18de <__muluhisi3>
    18fe:	82 1b       	sub	r24, r18
    1900:	93 0b       	sbc	r25, r19
    1902:	08 95       	ret

00001904 <__prologue_saves__>:
    1904:	2f 92       	push	r2
    1906:	3f 92       	push	r3
    1908:	4f 92       	push	r4
    190a:	5f 92       	push	r5
    190c:	6f 92       	push	r6
    190e:	7f 92       	push	r7
    1910:	8f 92       	push	r8
    1912:	9f 92       	push	r9
    1914:	af 92       	push	r10
    1916:	bf 92       	push	r11
    1918:	cf 92       	push	r12
    191a:	df 92       	push	r13
    191c:	ef 92       	push	r14
    191e:	ff 92       	push	r15
    1920:	0f 93       	push	r16
    1922:	1f 93       	push	r17
    1924:	cf 93       	push	r28
    1926:	df 93       	push	r29
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
    192c:	ca 1b       	sub	r28, r26
    192e:	db 0b       	sbc	r29, r27
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	f8 94       	cli
    1934:	de bf       	out	0x3e, r29	; 62
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	cd bf       	out	0x3d, r28	; 61
    193a:	09 94       	ijmp

0000193c <__epilogue_restores__>:
    193c:	2a 88       	ldd	r2, Y+18	; 0x12
    193e:	39 88       	ldd	r3, Y+17	; 0x11
    1940:	48 88       	ldd	r4, Y+16	; 0x10
    1942:	5f 84       	ldd	r5, Y+15	; 0x0f
    1944:	6e 84       	ldd	r6, Y+14	; 0x0e
    1946:	7d 84       	ldd	r7, Y+13	; 0x0d
    1948:	8c 84       	ldd	r8, Y+12	; 0x0c
    194a:	9b 84       	ldd	r9, Y+11	; 0x0b
    194c:	aa 84       	ldd	r10, Y+10	; 0x0a
    194e:	b9 84       	ldd	r11, Y+9	; 0x09
    1950:	c8 84       	ldd	r12, Y+8	; 0x08
    1952:	df 80       	ldd	r13, Y+7	; 0x07
    1954:	ee 80       	ldd	r14, Y+6	; 0x06
    1956:	fd 80       	ldd	r15, Y+5	; 0x05
    1958:	0c 81       	ldd	r16, Y+4	; 0x04
    195a:	1b 81       	ldd	r17, Y+3	; 0x03
    195c:	aa 81       	ldd	r26, Y+2	; 0x02
    195e:	b9 81       	ldd	r27, Y+1	; 0x01
    1960:	ce 0f       	add	r28, r30
    1962:	d1 1d       	adc	r29, r1
    1964:	0f b6       	in	r0, 0x3f	; 63
    1966:	f8 94       	cli
    1968:	de bf       	out	0x3e, r29	; 62
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	cd bf       	out	0x3d, r28	; 61
    196e:	ed 01       	movw	r28, r26
    1970:	08 95       	ret

00001972 <__umulhisi3>:
    1972:	a2 9f       	mul	r26, r18
    1974:	b0 01       	movw	r22, r0
    1976:	b3 9f       	mul	r27, r19
    1978:	c0 01       	movw	r24, r0
    197a:	a3 9f       	mul	r26, r19
    197c:	70 0d       	add	r23, r0
    197e:	81 1d       	adc	r24, r1
    1980:	11 24       	eor	r1, r1
    1982:	91 1d       	adc	r25, r1
    1984:	b2 9f       	mul	r27, r18
    1986:	70 0d       	add	r23, r0
    1988:	81 1d       	adc	r24, r1
    198a:	11 24       	eor	r1, r1
    198c:	91 1d       	adc	r25, r1
    198e:	08 95       	ret

00001990 <_exit>:
    1990:	f8 94       	cli

00001992 <__stop_program>:
    1992:	ff cf       	rjmp	.-2      	; 0x1992 <__stop_program>
