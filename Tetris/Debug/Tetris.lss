
Tetris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800100  00001af4  00001b88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001af4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001cd  00800184  00800184  00001c0c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c0c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000330  00000000  00000000  00001ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b11  00000000  00000000  00001fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e36  00000000  00000000  00004ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018f6  00000000  00000000  0000591f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000924  00000000  00000000  00007218  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d69  00000000  00000000  00007b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022ce  00000000  00000000  000088a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000368  00000000  00000000  0000ab73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__ctors_end>
       4:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
       8:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
       c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      10:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      14:	0c 94 b9 01 	jmp	0x372	; 0x372 <__vector_5>
      18:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      1c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      20:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      24:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      28:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      2c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      30:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      34:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      38:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      3c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      40:	0c 94 65 09 	jmp	0x12ca	; 0x12ca <__vector_16>
      44:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      48:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      4c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      50:	0c 94 86 08 	jmp	0x110c	; 0x110c <__vector_20>
      54:	0c 94 44 08 	jmp	0x1088	; 0x1088 <__vector_21>
      58:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      5c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      60:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      64:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      68:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      6c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      70:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      74:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>
      78:	0c 94 06 01 	jmp	0x20c	; 0x20c <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	61 20       	and	r6, r1
      84:	62 75       	andi	r22, 0x52	; 82
      86:	74 74       	andi	r23, 0x44	; 68
      88:	6f 6e       	ori	r22, 0xEF	; 239
      8a:	20 74       	andi	r18, 0x40	; 64
      8c:	6f 20       	and	r6, r15
      8e:	73 74       	andi	r23, 0x43	; 67
      90:	61 72       	andi	r22, 0x21	; 33
      92:	74 20       	and	r7, r4
      94:	61 67       	ori	r22, 0x71	; 113
      96:	61 69       	ori	r22, 0x91	; 145
      98:	6e 00       	.word	0x006e	; ????

0000009a <__c.2322>:
      9a:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000a4 <__c.2292>:
      a4:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 54 65     CSSE2010/7201 Te
      b4:	74 72 69 73 20 50 72 6f 6a 65 63 74 20 62 79 20     tris Project by 
      c4:	4a 61 6d 65 73 20 42 65 6e 74 6c 65 79 00           James Bentley.

000000d2 <__c.2290>:
      d2:	54 65 74 72 69 73 00                                Tetris.

000000d9 <numbers>:
      d9:	44 01 41 01 3d 01 39 01 35 01 31 01 2d 01 29 01     D.A.=.9.5.1.-.).
      e9:	25 01 21 01                                         %.!.

000000ed <letters>:
      ed:	b3 01 af 01 ab 01 a7 01 a3 01 9f 01 9b 01 97 01     ................
      fd:	94 01 90 01 8c 01 88 01 83 01 7f 01 7b 01 77 01     ............{.w.
     10d:	72 01 6e 01 6a 01 65 01 61 01 5c 01 57 01 52 01     r.n.j.e.a.\.W.R.
     11d:	4d 01 48 01                                         M.H.

00000121 <cols_9>:
     121:	64 92 92 7d                                         d..}

00000125 <cols_8>:
     125:	6c 92 92 6d                                         l..m

00000129 <cols_7>:
     129:	80 9e a0 c1                                         ....

0000012d <cols_6>:
     12d:	7c 92 92 4d                                         |..M

00000131 <cols_5>:
     131:	e4 a2 a2 9d                                         ....

00000135 <cols_4>:
     135:	18 28 48 ff                                         .(H.

00000139 <cols_3>:
     139:	44 92 92 6d                                         D..m

0000013d <cols_2>:
     13d:	46 8a 92 63                                         F..c

00000141 <cols_1>:
     141:	42 fe 03                                            B..

00000144 <cols_0>:
     144:	7c 92 a2 7d                                         |..}

00000148 <cols_Z>:
     148:	86 8a 92 a2 c3                                      .....

0000014d <cols_Y>:
     14d:	e0 10 0e 10 e1                                      .....

00000152 <cols_X>:
     152:	c6 28 10 28 c7                                      .(.(.

00000157 <cols_W>:
     157:	fc 02 1c 02 fd                                      .....

0000015c <cols_V>:
     15c:	f8 04 02 04 f9                                      .....

00000161 <cols_U>:
     161:	fc 02 02 fd                                         ....

00000165 <cols_T>:
     165:	80 80 fe 80 81                                      .....

0000016a <cols_S>:
     16a:	64 92 92 4d                                         d..M

0000016e <cols_R>:
     16e:	fe 90 98 67                                         ...g

00000172 <cols_Q>:
     172:	7c 82 8a 7c 03                                      |..|.

00000177 <cols_P>:
     177:	fe 90 90 61                                         ...a

0000017b <cols_O>:
     17b:	7c 82 82 7d                                         |..}

0000017f <cols_N>:
     17f:	fe 20 10 ff                                         . ..

00000183 <cols_M>:
     183:	fe 40 30 40 ff                                      .@0@.

00000188 <cols_L>:
     188:	fe 02 02 03                                         ....

0000018c <cols_K>:
     18c:	fe 10 28 c7                                         ..(.

00000190 <cols_J>:
     190:	04 02 02 fd                                         ....

00000194 <cols_I>:
     194:	82 fe 83                                            ...

00000197 <cols_H>:
     197:	fe 10 10 ff                                         ....

0000019b <cols_G>:
     19b:	7c 82 92 5d                                         |..]

0000019f <cols_F>:
     19f:	fe 90 90 81                                         ....

000001a3 <cols_E>:
     1a3:	fe 92 92 83                                         ....

000001a7 <cols_D>:
     1a7:	fe 82 82 7d                                         ...}

000001ab <cols_C>:
     1ab:	7c 82 82 45                                         |..E

000001af <cols_B>:
     1af:	fe 92 92 6d                                         ...m

000001b3 <cols_A>:
     1b3:	7e 90 90 7f                                         ~...

000001b7 <__c.1935>:
     1b7:	1b 5b 3f 32 35 6c 00                                .[?25l.

000001be <__c.1931>:
     1be:	1b 5b 25 64 6d 00                                   .[%dm.

000001c4 <__c.1921>:
     1c4:	1b 5b 32 4a 00                                      .[2J.

000001c9 <__c.1906>:
     1c9:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

000001d2 <__ctors_end>:
     1d2:	11 24       	eor	r1, r1
     1d4:	1f be       	out	0x3f, r1	; 63
     1d6:	cf ef       	ldi	r28, 0xFF	; 255
     1d8:	d8 e0       	ldi	r29, 0x08	; 8
     1da:	de bf       	out	0x3e, r29	; 62
     1dc:	cd bf       	out	0x3d, r28	; 61

000001de <__do_copy_data>:
     1de:	11 e0       	ldi	r17, 0x01	; 1
     1e0:	a0 e0       	ldi	r26, 0x00	; 0
     1e2:	b1 e0       	ldi	r27, 0x01	; 1
     1e4:	e4 ef       	ldi	r30, 0xF4	; 244
     1e6:	fa e1       	ldi	r31, 0x1A	; 26
     1e8:	02 c0       	rjmp	.+4      	; 0x1ee <__do_copy_data+0x10>
     1ea:	05 90       	lpm	r0, Z+
     1ec:	0d 92       	st	X+, r0
     1ee:	a4 38       	cpi	r26, 0x84	; 132
     1f0:	b1 07       	cpc	r27, r17
     1f2:	d9 f7       	brne	.-10     	; 0x1ea <__do_copy_data+0xc>

000001f4 <__do_clear_bss>:
     1f4:	23 e0       	ldi	r18, 0x03	; 3
     1f6:	a4 e8       	ldi	r26, 0x84	; 132
     1f8:	b1 e0       	ldi	r27, 0x01	; 1
     1fa:	01 c0       	rjmp	.+2      	; 0x1fe <.do_clear_bss_start>

000001fc <.do_clear_bss_loop>:
     1fc:	1d 92       	st	X+, r1

000001fe <.do_clear_bss_start>:
     1fe:	a1 35       	cpi	r26, 0x51	; 81
     200:	b2 07       	cpc	r27, r18
     202:	e1 f7       	brne	.-8      	; 0x1fc <.do_clear_bss_loop>
     204:	0e 94 a6 06 	call	0xd4c	; 0xd4c <main>
     208:	0c 94 78 0d 	jmp	0x1af0	; 0x1af0 <_exit>

0000020c <__bad_interrupt>:
     20c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000210 <generate_random_block>:
		{ block_4_rot_0, block_4_rot_1, block_4_rot_2, block_4_rot_3 }	
	}
};
	
	
FallingBlock generate_random_block(void) {
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
     214:	ec 01       	movw	r28, r24
	FallingBlock block;	// This will be our return value

	// Pick a random block
	block.blocknum = random() % NUM_BLOCKS_IN_LIBRARY;
     216:	0e 94 19 0a 	call	0x1432	; 0x1432 <random>
     21a:	25 e0       	ldi	r18, 0x05	; 5
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	40 e0       	ldi	r20, 0x00	; 0
     220:	50 e0       	ldi	r21, 0x00	; 0
     222:	0e 94 8a 09 	call	0x1314	; 0x1314 <__divmodsi4>
	
	// Initial rotation (no rotation by default)
	block.rotation = 0;	
	
	// Copy the relevant details of the block to our return value
	block.pattern = block_library[block.blocknum].patterns[block.rotation];
     226:	8b e0       	ldi	r24, 0x0B	; 11
     228:	68 02       	muls	r22, r24
     22a:	f0 01       	movw	r30, r0
     22c:	11 24       	eor	r1, r1
     22e:	e2 5d       	subi	r30, 0xD2	; 210
     230:	fe 4f       	sbci	r31, 0xFE	; 254
     232:	43 81       	ldd	r20, Z+3	; 0x03
     234:	54 81       	ldd	r21, Z+4	; 0x04
	block.colour = block_library[block.blocknum].colour;
     236:	20 81       	ld	r18, Z
	block.row = 0;		// top row
	block.column = 0;	// rightmost column
	
	// Record the height and width of the block. We're using the default
	// rotation so this is just the height and width as in the block library
	block.height = block_library[block.blocknum].height;
     238:	81 81       	ldd	r24, Z+1	; 0x01
	block.width = block_library[block.blocknum].width;
     23a:	92 81       	ldd	r25, Z+2	; 0x02
	
	return block;
     23c:	68 83       	st	Y, r22
     23e:	5a 83       	std	Y+2, r21	; 0x02
     240:	49 83       	std	Y+1, r20	; 0x01
     242:	2b 83       	std	Y+3, r18	; 0x03
     244:	1c 82       	std	Y+4, r1	; 0x04
     246:	1d 82       	std	Y+5, r1	; 0x05
     248:	1e 82       	std	Y+6, r1	; 0x06
     24a:	9f 83       	std	Y+7, r25	; 0x07
     24c:	88 87       	std	Y+8, r24	; 0x08
}
     24e:	ce 01       	movw	r24, r28
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	08 95       	ret

00000256 <rotate_block>:
 * Returns 1 if successful (and modifies the given block) otherwise
 * returns 0 (and leaves the given block unchanged).
 * This method is only unsuccessful if the block is too close to the
 * left hand side to be rotated.
 */
int8_t rotate_block(FallingBlock* blockPtr) {
     256:	fc 01       	movw	r30, r24
 	/* New block width will be the old height. New block height 
	 * will be the old width
	 */
	uint8_t new_width = blockPtr->height;
     258:	20 85       	ldd	r18, Z+8	; 0x08
	uint8_t new_height = blockPtr->width;
     25a:	47 81       	ldd	r20, Z+7	; 0x07
	
	if(blockPtr->column + new_width > BOARD_WIDTH) {
     25c:	35 81       	ldd	r19, Z+5	; 0x05
     25e:	82 2f       	mov	r24, r18
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	83 0f       	add	r24, r19
     264:	91 1d       	adc	r25, r1
     266:	09 97       	sbiw	r24, 0x09	; 9
     268:	4c f5       	brge	.+82     	; 0x2bc <rotate_block+0x66>
		return 0;	// Block won't fit on the board if rotated
	}
	if(blockPtr->row + new_height > BOARD_ROWS) {
     26a:	34 81       	ldd	r19, Z+4	; 0x04
     26c:	84 2f       	mov	r24, r20
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	83 0f       	add	r24, r19
     272:	91 1d       	adc	r25, r1
     274:	41 97       	sbiw	r24, 0x11	; 17
     276:	24 f5       	brge	.+72     	; 0x2c0 <rotate_block+0x6a>
		return 0;	// Block will rotate off the bottom of the board
	}
	
	// Perform the rotation. We increment the rotation value (0 to 3)
	// and wrap back to 0 if we reach 4, i.e. add 1 and take mod 4.
	uint8_t new_rotation = (blockPtr->rotation + 1) % NUM_ROTATIONS;
     278:	86 81       	ldd	r24, Z+6	; 0x06
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	01 96       	adiw	r24, 0x01	; 1
     27e:	83 70       	andi	r24, 0x03	; 3
     280:	90 78       	andi	r25, 0x80	; 128
     282:	99 23       	and	r25, r25
     284:	24 f4       	brge	.+8      	; 0x28e <rotate_block+0x38>
     286:	01 97       	sbiw	r24, 0x01	; 1
     288:	8c 6f       	ori	r24, 0xFC	; 252
     28a:	9f 6f       	ori	r25, 0xFF	; 255
     28c:	01 96       	adiw	r24, 0x01	; 1
	
	blockPtr->pattern = block_library[blockPtr->blocknum].patterns[new_rotation];
     28e:	dc 01       	movw	r26, r24
     290:	bb 27       	eor	r27, r27
     292:	90 81       	ld	r25, Z
     294:	aa 0f       	add	r26, r26
     296:	bb 1f       	adc	r27, r27
     298:	3b e0       	ldi	r19, 0x0B	; 11
     29a:	93 02       	muls	r25, r19
     29c:	a0 0d       	add	r26, r0
     29e:	b1 1d       	adc	r27, r1
     2a0:	11 24       	eor	r1, r1
     2a2:	a2 5d       	subi	r26, 0xD2	; 210
     2a4:	be 4f       	sbci	r27, 0xFE	; 254
     2a6:	13 96       	adiw	r26, 0x03	; 3
     2a8:	6d 91       	ld	r22, X+
     2aa:	7c 91       	ld	r23, X
     2ac:	14 97       	sbiw	r26, 0x04	; 4
     2ae:	72 83       	std	Z+2, r23	; 0x02
     2b0:	61 83       	std	Z+1, r22	; 0x01
		return 0;	// Block will rotate off the bottom of the board
	}
	
	// Perform the rotation. We increment the rotation value (0 to 3)
	// and wrap back to 0 if we reach 4, i.e. add 1 and take mod 4.
	uint8_t new_rotation = (blockPtr->rotation + 1) % NUM_ROTATIONS;
     2b2:	86 83       	std	Z+6, r24	; 0x06
	
	blockPtr->pattern = block_library[blockPtr->blocknum].patterns[new_rotation];
	blockPtr->rotation = new_rotation;
	blockPtr->width = new_width;
     2b4:	27 83       	std	Z+7, r18	; 0x07
	blockPtr->height = new_height;
     2b6:	40 87       	std	Z+8, r20	; 0x08
	
	// Rotation was successful
	return 1;
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	08 95       	ret
	 */
	uint8_t new_width = blockPtr->height;
	uint8_t new_height = blockPtr->width;
	
	if(blockPtr->column + new_width > BOARD_WIDTH) {
		return 0;	// Block won't fit on the board if rotated
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	08 95       	ret
	}
	if(blockPtr->row + new_height > BOARD_ROWS) {
		return 0;	// Block will rotate off the bottom of the board
     2c0:	80 e0       	ldi	r24, 0x00	; 0
	blockPtr->width = new_width;
	blockPtr->height = new_height;
	
	// Rotation was successful
	return 1;
}
     2c2:	08 95       	ret

000002c4 <move_block_left>:

int8_t move_block_left(FallingBlock* blockPtr) {
     2c4:	fc 01       	movw	r30, r24
	/* Check if the block is all the way to the left. If so, return 0
	 * because we can't shift it further to the left.
	 */
	if(blockPtr->column + blockPtr->width >= BOARD_WIDTH) {
     2c6:	95 81       	ldd	r25, Z+5	; 0x05
     2c8:	27 81       	ldd	r18, Z+7	; 0x07
     2ca:	30 e0       	ldi	r19, 0x00	; 0
     2cc:	29 0f       	add	r18, r25
     2ce:	31 1d       	adc	r19, r1
     2d0:	28 30       	cpi	r18, 0x08	; 8
     2d2:	31 05       	cpc	r19, r1
     2d4:	24 f4       	brge	.+8      	; 0x2de <move_block_left+0x1a>
	}

	/*
	 * Make the move.
	 */
	blockPtr->column += 1;
     2d6:	9f 5f       	subi	r25, 0xFF	; 255
     2d8:	95 83       	std	Z+5, r25	; 0x05
	return 1;
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	08 95       	ret
int8_t move_block_left(FallingBlock* blockPtr) {
	/* Check if the block is all the way to the left. If so, return 0
	 * because we can't shift it further to the left.
	 */
	if(blockPtr->column + blockPtr->width >= BOARD_WIDTH) {
		return 0;
     2de:	80 e0       	ldi	r24, 0x00	; 0
	/*
	 * Make the move.
	 */
	blockPtr->column += 1;
	return 1;
}
     2e0:	08 95       	ret

000002e2 <move_block_right>:

int8_t move_block_right(FallingBlock* blockPtr) {
     2e2:	fc 01       	movw	r30, r24
	/* Check if the block is all the way to the right. If so, return 0
	 * because we can't shift it further to the right.
	 */
	if(blockPtr->column <= 0) {
     2e4:	95 81       	ldd	r25, Z+5	; 0x05
     2e6:	99 23       	and	r25, r25
     2e8:	21 f0       	breq	.+8      	; 0x2f2 <move_block_right+0x10>
	}

	/*
	 * Make the move.
	 */
	blockPtr->column -= 1;
     2ea:	91 50       	subi	r25, 0x01	; 1
     2ec:	95 83       	std	Z+5, r25	; 0x05
	return 1;
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	08 95       	ret
int8_t move_block_right(FallingBlock* blockPtr) {
	/* Check if the block is all the way to the right. If so, return 0
	 * because we can't shift it further to the right.
	 */
	if(blockPtr->column <= 0) {
		return 0;
     2f2:	80 e0       	ldi	r24, 0x00	; 0
	 * Make the move.
	 */
	blockPtr->column -= 1;
	return 1;

}
     2f4:	08 95       	ret

000002f6 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 69)
	PCICR |= (1<<PCIE1);
     2f6:	e8 e6       	ldi	r30, 0x68	; 104
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	80 81       	ld	r24, Z
     2fc:	82 60       	ori	r24, 0x02	; 2
     2fe:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 69)
	PCIFR |= (1<<PCIF1);
     300:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 70)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     302:	ec e6       	ldi	r30, 0x6C	; 108
     304:	f0 e0       	ldi	r31, 0x00	; 0
     306:	80 81       	ld	r24, Z
     308:	8f 60       	ori	r24, 0x0F	; 15
     30a:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     30c:	10 92 84 01 	sts	0x0184, r1
     310:	08 95       	ret

00000312 <empty_button_queue>:
}

void empty_button_queue(void) {
	queue_length = 0;
     312:	10 92 84 01 	sts	0x0184, r1
     316:	08 95       	ret

00000318 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
	if(queue_length > 0) {
     318:	80 91 84 01 	lds	r24, 0x0184
     31c:	18 16       	cp	r1, r24
     31e:	3c f5       	brge	.+78     	; 0x36e <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     320:	80 91 85 01 	lds	r24, 0x0185
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     324:	6f b7       	in	r22, 0x3f	; 63
		cli();
     326:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     328:	90 91 84 01 	lds	r25, 0x0184
     32c:	92 30       	cpi	r25, 0x02	; 2
     32e:	b4 f0       	brlt	.+44     	; 0x35c <button_pushed+0x44>
     330:	21 e0       	ldi	r18, 0x01	; 1
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     336:	f9 01       	movw	r30, r18
     338:	eb 57       	subi	r30, 0x7B	; 123
     33a:	fe 4f       	sbci	r31, 0xFE	; 254
     33c:	40 81       	ld	r20, Z
     33e:	f9 01       	movw	r30, r18
     340:	ec 57       	subi	r30, 0x7C	; 124
     342:	fe 4f       	sbci	r31, 0xFE	; 254
     344:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     346:	9f 5f       	subi	r25, 0xFF	; 255
     348:	29 2f       	mov	r18, r25
     34a:	30 e0       	ldi	r19, 0x00	; 0
     34c:	40 91 84 01 	lds	r20, 0x0184
     350:	04 2e       	mov	r0, r20
     352:	00 0c       	add	r0, r0
     354:	55 0b       	sbc	r21, r21
     356:	24 17       	cp	r18, r20
     358:	35 07       	cpc	r19, r21
     35a:	6c f3       	brlt	.-38     	; 0x336 <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     35c:	90 91 84 01 	lds	r25, 0x0184
     360:	91 50       	subi	r25, 0x01	; 1
     362:	90 93 84 01 	sts	0x0184, r25
		
		if(interrupts_were_enabled) {
     366:	66 23       	and	r22, r22
     368:	1c f4       	brge	.+6      	; 0x370 <button_pushed+0x58>
			// Turn them back on again
			sei();
     36a:	78 94       	sei
     36c:	08 95       	ret
void empty_button_queue(void) {
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
     36e:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     370:	08 95       	ret

00000372 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     372:	1f 92       	push	r1
     374:	0f 92       	push	r0
     376:	0f b6       	in	r0, 0x3f	; 63
     378:	0f 92       	push	r0
     37a:	11 24       	eor	r1, r1
     37c:	2f 93       	push	r18
     37e:	3f 93       	push	r19
     380:	4f 93       	push	r20
     382:	5f 93       	push	r21
     384:	6f 93       	push	r22
     386:	7f 93       	push	r23
     388:	8f 93       	push	r24
     38a:	9f 93       	push	r25
     38c:	ef 93       	push	r30
     38e:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     390:	43 b1       	in	r20, 0x03	; 3
     392:	4f 70       	andi	r20, 0x0F	; 15

	// If we have space in the queue, then iterate over all the buttons
	// and see which ones have changed.	If we have no space in the queue
	// we don't bother - we just ignore the button event.  (Ideally
	// this should never happen.)
	if(queue_length < BUTTON_QUEUE_SIZE) {
     394:	80 91 84 01 	lds	r24, 0x0184
     398:	88 30       	cpi	r24, 0x08	; 8
     39a:	64 f5       	brge	.+88     	; 0x3f4 <__vector_5+0x82>
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	90 e0       	ldi	r25, 0x00	; 0
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
			if((button_state & (1<<pin)) &&	!(last_button_state & (1<<pin))) {
     3a0:	64 2f       	mov	r22, r20
     3a2:	70 e0       	ldi	r23, 0x00	; 0
     3a4:	9b 01       	movw	r18, r22
     3a6:	08 2e       	mov	r0, r24
     3a8:	02 c0       	rjmp	.+4      	; 0x3ae <__vector_5+0x3c>
     3aa:	35 95       	asr	r19
     3ac:	27 95       	ror	r18
     3ae:	0a 94       	dec	r0
     3b0:	e2 f7       	brpl	.-8      	; 0x3aa <__vector_5+0x38>
     3b2:	20 ff       	sbrs	r18, 0
     3b4:	1b c0       	rjmp	.+54     	; 0x3ec <__vector_5+0x7a>
     3b6:	20 91 8d 01 	lds	r18, 0x018D
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	08 2e       	mov	r0, r24
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <__vector_5+0x52>
     3c0:	35 95       	asr	r19
     3c2:	27 95       	ror	r18
     3c4:	0a 94       	dec	r0
     3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <__vector_5+0x4e>
     3c8:	20 fd       	sbrc	r18, 0
     3ca:	10 c0       	rjmp	.+32     	; 0x3ec <__vector_5+0x7a>
				// Add the button push to the queue (and update the
				// length of the queue). If the queue is now full, we stop
				// processing (i.e. ignore other button events if there
				// are any)
				button_queue[queue_length++] = pin;
     3cc:	e0 91 84 01 	lds	r30, 0x0184
     3d0:	21 e0       	ldi	r18, 0x01	; 1
     3d2:	2e 0f       	add	r18, r30
     3d4:	20 93 84 01 	sts	0x0184, r18
     3d8:	0e 2e       	mov	r0, r30
     3da:	00 0c       	add	r0, r0
     3dc:	ff 0b       	sbc	r31, r31
     3de:	eb 57       	subi	r30, 0x7B	; 123
     3e0:	fe 4f       	sbci	r31, 0xFE	; 254
     3e2:	80 83       	st	Z, r24
				if(queue_length >= BUTTON_QUEUE_SIZE) {
     3e4:	20 91 84 01 	lds	r18, 0x0184
     3e8:	28 30       	cpi	r18, 0x08	; 8
     3ea:	24 f4       	brge	.+8      	; 0x3f4 <__vector_5+0x82>
     3ec:	01 96       	adiw	r24, 0x01	; 1
		// Iterate over all the buttons and see which ones have changed.
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
     3ee:	84 30       	cpi	r24, 0x04	; 4
     3f0:	91 05       	cpc	r25, r1
     3f2:	c1 f6       	brne	.-80     	; 0x3a4 <__vector_5+0x32>
			}
		}
	}
		
	// Remember this button state so we can detect changes next time
	last_button_state = button_state;
     3f4:	40 93 8d 01 	sts	0x018D, r20
}
     3f8:	ff 91       	pop	r31
     3fa:	ef 91       	pop	r30
     3fc:	9f 91       	pop	r25
     3fe:	8f 91       	pop	r24
     400:	7f 91       	pop	r23
     402:	6f 91       	pop	r22
     404:	5f 91       	pop	r21
     406:	4f 91       	pop	r20
     408:	3f 91       	pop	r19
     40a:	2f 91       	pop	r18
     40c:	0f 90       	pop	r0
     40e:	0f be       	out	0x3f, r0	; 63
     410:	0f 90       	pop	r0
     412:	1f 90       	pop	r1
     414:	18 95       	reti

00000416 <block_collides>:
/*
 * Check whether the given block collides (intersects with) with
 * the fixed blocks on the board. Return 1 if it does collide, 0
 * otherwise.
 */
static uint8_t block_collides(FallingBlock block) {
     416:	ef 92       	push	r14
     418:	ff 92       	push	r15
     41a:	0f 93       	push	r16
     41c:	1f 93       	push	r17
     41e:	cf 93       	push	r28
     420:	df 93       	push	r29
     422:	cd b7       	in	r28, 0x3d	; 61
     424:	de b7       	in	r29, 0x3e	; 62
     426:	29 97       	sbiw	r28, 0x09	; 9
     428:	0f b6       	in	r0, 0x3f	; 63
     42a:	f8 94       	cli
     42c:	de bf       	out	0x3e, r29	; 62
     42e:	0f be       	out	0x3f, r0	; 63
     430:	cd bf       	out	0x3d, r28	; 61
     432:	09 83       	std	Y+1, r16	; 0x01
     434:	1a 83       	std	Y+2, r17	; 0x02
     436:	2b 83       	std	Y+3, r18	; 0x03
     438:	3c 83       	std	Y+4, r19	; 0x04
     43a:	4d 83       	std	Y+5, r20	; 0x05
     43c:	5e 83       	std	Y+6, r21	; 0x06
     43e:	6f 83       	std	Y+7, r22	; 0x07
     440:	78 87       	std	Y+8, r23	; 0x08
     442:	89 87       	std	Y+9, r24	; 0x09
     444:	ea 80       	ldd	r14, Y+2	; 0x02
     446:	fb 80       	ldd	r15, Y+3	; 0x03
     448:	98 2f       	mov	r25, r24
	// We work out the bit patterns for the block in each row
	// and use a bitwise AND to determine whether there is an
	// intersection or not
	for(uint8_t row = 0; row < block.height; row++) {
     44a:	88 23       	and	r24, r24
     44c:	71 f1       	breq	.+92     	; 0x4aa <block_collides+0x94>
		rowtype bit_pattern_for_row = block.pattern[row] << block.column;
     44e:	05 2f       	mov	r16, r21
     450:	f7 01       	movw	r30, r14
     452:	20 81       	ld	r18, Z
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	02 c0       	rjmp	.+4      	; 0x45c <block_collides+0x46>
     458:	22 0f       	add	r18, r18
     45a:	33 1f       	adc	r19, r19
     45c:	5a 95       	dec	r21
     45e:	e2 f7       	brpl	.-8      	; 0x458 <block_collides+0x42>
		// The bit pattern to check this against will be that on the board
		// at the position where the block is located
		if(bit_pattern_for_row & board[block.row + row]) {
     460:	e4 2f       	mov	r30, r20
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	e2 5e       	subi	r30, 0xE2	; 226
     466:	fd 4f       	sbci	r31, 0xFD	; 253
     468:	80 81       	ld	r24, Z
     46a:	82 23       	and	r24, r18
     46c:	01 f5       	brne	.+64     	; 0x4ae <block_collides+0x98>
     46e:	f7 01       	movw	r30, r14
     470:	31 96       	adiw	r30, 0x01	; 1
     472:	a4 2f       	mov	r26, r20
     474:	b0 e0       	ldi	r27, 0x00	; 0
     476:	a1 5e       	subi	r26, 0xE1	; 225
     478:	bd 4f       	sbci	r27, 0xFD	; 253
     47a:	91 50       	subi	r25, 0x01	; 1
     47c:	69 2f       	mov	r22, r25
     47e:	70 e0       	ldi	r23, 0x00	; 0
     480:	6f 5f       	subi	r22, 0xFF	; 255
     482:	7f 4f       	sbci	r23, 0xFF	; 255
     484:	6e 0d       	add	r22, r14
     486:	7f 1d       	adc	r23, r15
     488:	0c c0       	rjmp	.+24     	; 0x4a2 <block_collides+0x8c>
static uint8_t block_collides(FallingBlock block) {
	// We work out the bit patterns for the block in each row
	// and use a bitwise AND to determine whether there is an
	// intersection or not
	for(uint8_t row = 0; row < block.height; row++) {
		rowtype bit_pattern_for_row = block.pattern[row] << block.column;
     48a:	91 91       	ld	r25, Z+
		// The bit pattern to check this against will be that on the board
		// at the position where the block is located
		if(bit_pattern_for_row & board[block.row + row]) {
     48c:	4d 91       	ld	r20, X+
static uint8_t block_collides(FallingBlock block) {
	// We work out the bit patterns for the block in each row
	// and use a bitwise AND to determine whether there is an
	// intersection or not
	for(uint8_t row = 0; row < block.height; row++) {
		rowtype bit_pattern_for_row = block.pattern[row] << block.column;
     48e:	29 2f       	mov	r18, r25
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	00 2e       	mov	r0, r16
     494:	02 c0       	rjmp	.+4      	; 0x49a <block_collides+0x84>
     496:	22 0f       	add	r18, r18
     498:	33 1f       	adc	r19, r19
     49a:	0a 94       	dec	r0
     49c:	e2 f7       	brpl	.-8      	; 0x496 <block_collides+0x80>
		// The bit pattern to check this against will be that on the board
		// at the position where the block is located
		if(bit_pattern_for_row & board[block.row + row]) {
     49e:	24 23       	and	r18, r20
     4a0:	41 f4       	brne	.+16     	; 0x4b2 <block_collides+0x9c>
 */
static uint8_t block_collides(FallingBlock block) {
	// We work out the bit patterns for the block in each row
	// and use a bitwise AND to determine whether there is an
	// intersection or not
	for(uint8_t row = 0; row < block.height; row++) {
     4a2:	e6 17       	cp	r30, r22
     4a4:	f7 07       	cpc	r31, r23
     4a6:	89 f7       	brne	.-30     	; 0x48a <block_collides+0x74>
     4a8:	05 c0       	rjmp	.+10     	; 0x4b4 <block_collides+0x9e>
		if(bit_pattern_for_row & board[block.row + row]) {
			// This row collides - we can stop now
			return 1;
		}
	}
	return 0;	// No collisions detected
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	03 c0       	rjmp	.+6      	; 0x4b4 <block_collides+0x9e>
		rowtype bit_pattern_for_row = block.pattern[row] << block.column;
		// The bit pattern to check this against will be that on the board
		// at the position where the block is located
		if(bit_pattern_for_row & board[block.row + row]) {
			// This row collides - we can stop now
			return 1;
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	01 c0       	rjmp	.+2      	; 0x4b4 <block_collides+0x9e>
     4b2:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 0;	// No collisions detected
}
     4b4:	29 96       	adiw	r28, 0x09	; 9
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	f8 94       	cli
     4ba:	de bf       	out	0x3e, r29	; 62
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	cd bf       	out	0x3d, r28	; 61
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	1f 91       	pop	r17
     4c6:	0f 91       	pop	r16
     4c8:	ff 90       	pop	r15
     4ca:	ef 90       	pop	r14
     4cc:	08 95       	ret

000004ce <remove_current_block_from_board_display>:

/*
 * Remove the current block from the display structure
 */
static void remove_current_block_from_board_display(void) {
     4ce:	ff 92       	push	r15
     4d0:	0f 93       	push	r16
     4d2:	1f 93       	push	r17
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
	for(uint8_t row = 0; row < current_block.height; row++) {
     4d8:	d0 91 36 02 	lds	r29, 0x0236
     4dc:	dd 23       	and	r29, r29
     4de:	99 f1       	breq	.+102    	; 0x546 <remove_current_block_from_board_display+0x78>
		uint8_t board_row = row + current_block.row;
     4e0:	ee e2       	ldi	r30, 0x2E	; 46
     4e2:	f2 e0       	ldi	r31, 0x02	; 2
     4e4:	14 81       	ldd	r17, Z+4	; 0x04
		for(uint8_t col = 0; col < current_block.width; col++) {
     4e6:	47 81       	ldd	r20, Z+7	; 0x07
     4e8:	85 81       	ldd	r24, Z+5	; 0x05
     4ea:	57 e0       	ldi	r21, 0x07	; 7
     4ec:	58 1b       	sub	r21, r24
     4ee:	a1 81       	ldd	r26, Z+1	; 0x01
     4f0:	b2 81       	ldd	r27, Z+2	; 0x02
			if(current_block.pattern[row] & (1 << col)) {
				// This position in the block is occupied - zero it out
				// in the display
				uint8_t board_column = col + current_block.column;
     4f2:	c0 e0       	ldi	r28, 0x00	; 0
 * Remove the current block from the display structure
 */
static void remove_current_block_from_board_display(void) {
	for(uint8_t row = 0; row < current_block.height; row++) {
		uint8_t board_row = row + current_block.row;
		for(uint8_t col = 0; col < current_block.width; col++) {
     4f4:	f1 2c       	mov	r15, r1
     4f6:	00 e0       	ldi	r16, 0x00	; 0
     4f8:	6c 2f       	mov	r22, r28
     4fa:	61 0f       	add	r22, r17
     4fc:	44 23       	and	r20, r20
     4fe:	f9 f0       	breq	.+62     	; 0x53e <remove_current_block_from_board_display+0x70>
     500:	2f 2d       	mov	r18, r15
     502:	30 2f       	mov	r19, r16
			if(current_block.pattern[row] & (1 << col)) {
				// This position in the block is occupied - zero it out
				// in the display
				uint8_t board_column = col + current_block.column;
				uint8_t display_column = BOARD_WIDTH - board_column - 1;
				board_display[board_row][display_column] = 0;
     504:	70 e0       	ldi	r23, 0x00	; 0
     506:	66 0f       	add	r22, r22
     508:	77 1f       	adc	r23, r23
     50a:	66 0f       	add	r22, r22
     50c:	77 1f       	adc	r23, r23
     50e:	66 0f       	add	r22, r22
     510:	77 1f       	adc	r23, r23
 */
static void remove_current_block_from_board_display(void) {
	for(uint8_t row = 0; row < current_block.height; row++) {
		uint8_t board_row = row + current_block.row;
		for(uint8_t col = 0; col < current_block.width; col++) {
			if(current_block.pattern[row] & (1 << col)) {
     512:	8c 91       	ld	r24, X
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	02 2e       	mov	r0, r18
     518:	02 c0       	rjmp	.+4      	; 0x51e <remove_current_block_from_board_display+0x50>
     51a:	95 95       	asr	r25
     51c:	87 95       	ror	r24
     51e:	0a 94       	dec	r0
     520:	e2 f7       	brpl	.-8      	; 0x51a <remove_current_block_from_board_display+0x4c>
     522:	80 ff       	sbrs	r24, 0
     524:	08 c0       	rjmp	.+16     	; 0x536 <remove_current_block_from_board_display+0x68>
     526:	85 2f       	mov	r24, r21
     528:	82 1b       	sub	r24, r18
				// This position in the block is occupied - zero it out
				// in the display
				uint8_t board_column = col + current_block.column;
				uint8_t display_column = BOARD_WIDTH - board_column - 1;
				board_display[board_row][display_column] = 0;
     52a:	fb 01       	movw	r30, r22
     52c:	e8 0f       	add	r30, r24
     52e:	f1 1d       	adc	r31, r1
     530:	e2 56       	subi	r30, 0x62	; 98
     532:	fe 4f       	sbci	r31, 0xFE	; 254
     534:	10 82       	st	Z, r1
     536:	2f 5f       	subi	r18, 0xFF	; 255
     538:	3f 4f       	sbci	r19, 0xFF	; 255
 * Remove the current block from the display structure
 */
static void remove_current_block_from_board_display(void) {
	for(uint8_t row = 0; row < current_block.height; row++) {
		uint8_t board_row = row + current_block.row;
		for(uint8_t col = 0; col < current_block.width; col++) {
     53a:	24 17       	cp	r18, r20
     53c:	50 f3       	brcs	.-44     	; 0x512 <remove_current_block_from_board_display+0x44>

/*
 * Remove the current block from the display structure
 */
static void remove_current_block_from_board_display(void) {
	for(uint8_t row = 0; row < current_block.height; row++) {
     53e:	cf 5f       	subi	r28, 0xFF	; 255
     540:	11 96       	adiw	r26, 0x01	; 1
     542:	cd 17       	cp	r28, r29
     544:	c8 f2       	brcs	.-78     	; 0x4f8 <remove_current_block_from_board_display+0x2a>
				uint8_t display_column = BOARD_WIDTH - board_column - 1;
				board_display[board_row][display_column] = 0;
			}
		}
	}
}
     546:	df 91       	pop	r29
     548:	cf 91       	pop	r28
     54a:	1f 91       	pop	r17
     54c:	0f 91       	pop	r16
     54e:	ff 90       	pop	r15
     550:	08 95       	ret

00000552 <add_current_block_to_board_display>:

/*
 * Add the current block to the display structure
 */
static void add_current_block_to_board_display(void) {
     552:	ef 92       	push	r14
     554:	ff 92       	push	r15
     556:	0f 93       	push	r16
     558:	1f 93       	push	r17
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
	for(uint8_t row = 0; row < current_block.height; row++) {
     55e:	10 91 36 02 	lds	r17, 0x0236
     562:	11 23       	and	r17, r17
     564:	a1 f1       	breq	.+104    	; 0x5ce <add_current_block_to_board_display+0x7c>
		uint8_t board_row = row + current_block.row;
     566:	ee e2       	ldi	r30, 0x2E	; 46
     568:	f2 e0       	ldi	r31, 0x02	; 2
     56a:	04 81       	ldd	r16, Z+4	; 0x04
		for(uint8_t col = 0; col < current_block.width; col++) {
     56c:	47 81       	ldd	r20, Z+7	; 0x07
     56e:	85 81       	ldd	r24, Z+5	; 0x05
     570:	57 e0       	ldi	r21, 0x07	; 7
     572:	58 1b       	sub	r21, r24
			if(current_block.pattern[row] & (1 << col)) {
				// This position in the block is occupied - add it to
				// the board display 
				uint8_t board_column = col + current_block.column;
				uint8_t display_column = BOARD_WIDTH - board_column - 1;
				board_display[board_row][display_column] = current_block.colour;
     574:	c3 81       	ldd	r28, Z+3	; 0x03
     576:	a1 81       	ldd	r26, Z+1	; 0x01
     578:	b2 81       	ldd	r27, Z+2	; 0x02
     57a:	d0 e0       	ldi	r29, 0x00	; 0
 * Add the current block to the display structure
 */
static void add_current_block_to_board_display(void) {
	for(uint8_t row = 0; row < current_block.height; row++) {
		uint8_t board_row = row + current_block.row;
		for(uint8_t col = 0; col < current_block.width; col++) {
     57c:	e1 2c       	mov	r14, r1
     57e:	f1 2c       	mov	r15, r1
     580:	6d 2f       	mov	r22, r29
     582:	60 0f       	add	r22, r16
     584:	44 23       	and	r20, r20
     586:	f9 f0       	breq	.+62     	; 0x5c6 <add_current_block_to_board_display+0x74>
     588:	2e 2d       	mov	r18, r14
     58a:	3f 2d       	mov	r19, r15
			if(current_block.pattern[row] & (1 << col)) {
				// This position in the block is occupied - add it to
				// the board display 
				uint8_t board_column = col + current_block.column;
				uint8_t display_column = BOARD_WIDTH - board_column - 1;
				board_display[board_row][display_column] = current_block.colour;
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	66 0f       	add	r22, r22
     590:	77 1f       	adc	r23, r23
     592:	66 0f       	add	r22, r22
     594:	77 1f       	adc	r23, r23
     596:	66 0f       	add	r22, r22
     598:	77 1f       	adc	r23, r23
 */
static void add_current_block_to_board_display(void) {
	for(uint8_t row = 0; row < current_block.height; row++) {
		uint8_t board_row = row + current_block.row;
		for(uint8_t col = 0; col < current_block.width; col++) {
			if(current_block.pattern[row] & (1 << col)) {
     59a:	8c 91       	ld	r24, X
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	02 2e       	mov	r0, r18
     5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <add_current_block_to_board_display+0x54>
     5a2:	95 95       	asr	r25
     5a4:	87 95       	ror	r24
     5a6:	0a 94       	dec	r0
     5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <add_current_block_to_board_display+0x50>
     5aa:	80 ff       	sbrs	r24, 0
     5ac:	08 c0       	rjmp	.+16     	; 0x5be <add_current_block_to_board_display+0x6c>
     5ae:	85 2f       	mov	r24, r21
     5b0:	82 1b       	sub	r24, r18
				// This position in the block is occupied - add it to
				// the board display 
				uint8_t board_column = col + current_block.column;
				uint8_t display_column = BOARD_WIDTH - board_column - 1;
				board_display[board_row][display_column] = current_block.colour;
     5b2:	fb 01       	movw	r30, r22
     5b4:	e8 0f       	add	r30, r24
     5b6:	f1 1d       	adc	r31, r1
     5b8:	e2 56       	subi	r30, 0x62	; 98
     5ba:	fe 4f       	sbci	r31, 0xFE	; 254
     5bc:	c0 83       	st	Z, r28
     5be:	2f 5f       	subi	r18, 0xFF	; 255
     5c0:	3f 4f       	sbci	r19, 0xFF	; 255
 * Add the current block to the display structure
 */
static void add_current_block_to_board_display(void) {
	for(uint8_t row = 0; row < current_block.height; row++) {
		uint8_t board_row = row + current_block.row;
		for(uint8_t col = 0; col < current_block.width; col++) {
     5c2:	24 17       	cp	r18, r20
     5c4:	50 f3       	brcs	.-44     	; 0x59a <add_current_block_to_board_display+0x48>

/*
 * Add the current block to the display structure
 */
static void add_current_block_to_board_display(void) {
	for(uint8_t row = 0; row < current_block.height; row++) {
     5c6:	df 5f       	subi	r29, 0xFF	; 255
     5c8:	11 96       	adiw	r26, 0x01	; 1
     5ca:	d1 17       	cp	r29, r17
     5cc:	c8 f2       	brcs	.-78     	; 0x580 <add_current_block_to_board_display+0x2e>
				uint8_t display_column = BOARD_WIDTH - board_column - 1;
				board_display[board_row][display_column] = current_block.colour;
			}
		}
	}
}
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	1f 91       	pop	r17
     5d4:	0f 91       	pop	r16
     5d6:	ff 90       	pop	r15
     5d8:	ef 90       	pop	r14
     5da:	08 95       	ret

000005dc <update_rows_on_display>:
/* 
 * Copy board to LED display for the rows given.
 * Note that each "row" in the board corresponds to a column for
 * the LED matrix.
 */
void update_rows_on_display(uint8_t row_start, uint8_t num_rows) {
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	c8 2f       	mov	r28, r24
     5e2:	df ef       	ldi	r29, 0xFF	; 255
     5e4:	d6 0f       	add	r29, r22
	uint8_t row_end = row_start + num_rows - 1;
     5e6:	d8 0f       	add	r29, r24
	for(uint8_t row_num = row_start; row_num <= row_end; row_num++) {
     5e8:	d8 17       	cp	r29, r24
     5ea:	80 f0       	brcs	.+32     	; 0x60c <update_rows_on_display+0x30>
		ledmatrix_update_column(row_num, board_display[row_num]);
     5ec:	6c 2f       	mov	r22, r28
     5ee:	70 e0       	ldi	r23, 0x00	; 0
     5f0:	66 0f       	add	r22, r22
     5f2:	77 1f       	adc	r23, r23
     5f4:	66 0f       	add	r22, r22
     5f6:	77 1f       	adc	r23, r23
     5f8:	66 0f       	add	r22, r22
     5fa:	77 1f       	adc	r23, r23
     5fc:	62 56       	subi	r22, 0x62	; 98
     5fe:	7e 4f       	sbci	r23, 0xFE	; 254
     600:	8c 2f       	mov	r24, r28
     602:	0e 94 f7 04 	call	0x9ee	; 0x9ee <ledmatrix_update_column>
 * Note that each "row" in the board corresponds to a column for
 * the LED matrix.
 */
void update_rows_on_display(uint8_t row_start, uint8_t num_rows) {
	uint8_t row_end = row_start + num_rows - 1;
	for(uint8_t row_num = row_start; row_num <= row_end; row_num++) {
     606:	cf 5f       	subi	r28, 0xFF	; 255
     608:	dc 17       	cp	r29, r28
     60a:	80 f7       	brcc	.-32     	; 0x5ec <update_rows_on_display+0x10>
		ledmatrix_update_column(row_num, board_display[row_num]);
	}
}
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	08 95       	ret

00000612 <add_random_block>:

/*
 * Add random block, return false (0) if we can't add the block - this
 * means the game is over, otherwise we return 1.
 */
static uint8_t add_random_block(void) {
     612:	0f 93       	push	r16
     614:	1f 93       	push	r17
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62
     61e:	29 97       	sbiw	r28, 0x09	; 9
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	f8 94       	cli
     624:	de bf       	out	0x3e, r29	; 62
     626:	0f be       	out	0x3f, r0	; 63
     628:	cd bf       	out	0x3d, r28	; 61
	current_block = generate_random_block();
     62a:	ce 01       	movw	r24, r28
     62c:	01 96       	adiw	r24, 0x01	; 1
     62e:	0e 94 08 01 	call	0x210	; 0x210 <generate_random_block>
     632:	89 e0       	ldi	r24, 0x09	; 9
     634:	fe 01       	movw	r30, r28
     636:	31 96       	adiw	r30, 0x01	; 1
     638:	ae e2       	ldi	r26, 0x2E	; 46
     63a:	b2 e0       	ldi	r27, 0x02	; 2
     63c:	01 90       	ld	r0, Z+
     63e:	0d 92       	st	X+, r0
     640:	8a 95       	dec	r24
     642:	e1 f7       	brne	.-8      	; 0x63c <add_random_block+0x2a>
	// Check if the block will collide with the fixed blocks on the board
	if(block_collides(current_block)) {
     644:	00 91 2e 02 	lds	r16, 0x022E
     648:	10 91 2f 02 	lds	r17, 0x022F
     64c:	20 91 30 02 	lds	r18, 0x0230
     650:	30 91 31 02 	lds	r19, 0x0231
     654:	40 91 32 02 	lds	r20, 0x0232
     658:	50 91 33 02 	lds	r21, 0x0233
     65c:	60 91 34 02 	lds	r22, 0x0234
     660:	70 91 35 02 	lds	r23, 0x0235
     664:	80 91 36 02 	lds	r24, 0x0236
     668:	0e 94 0b 02 	call	0x416	; 0x416 <block_collides>
     66c:	81 11       	cpse	r24, r1
     66e:	0a c0       	rjmp	.+20     	; 0x684 <add_random_block+0x72>
	}
	
	/* Block won't collide with fixed blocks on the board so 
	 * we update our board display.
	 */
	add_current_block_to_board_display();
     670:	0e 94 a9 02 	call	0x552	; 0x552 <add_current_block_to_board_display>
	
	// Update the display for the rows which are affected
	update_rows_on_display(current_block.row, current_block.height);
     674:	ee e2       	ldi	r30, 0x2E	; 46
     676:	f2 e0       	ldi	r31, 0x02	; 2
     678:	60 85       	ldd	r22, Z+8	; 0x08
     67a:	84 81       	ldd	r24, Z+4	; 0x04
     67c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <update_rows_on_display>
	
	// The addition succeeded - return true
	return 1;
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	01 c0       	rjmp	.+2      	; 0x686 <add_random_block+0x74>
	// Check if the block will collide with the fixed blocks on the board
	if(block_collides(current_block)) {
		/* Block will collide. We don't add the block - just return 0 - 
		 * the game is over.
		 */
		return 0;
     684:	80 e0       	ldi	r24, 0x00	; 0
	// Update the display for the rows which are affected
	update_rows_on_display(current_block.row, current_block.height);
	
	// The addition succeeded - return true
	return 1;
}
     686:	29 96       	adiw	r28, 0x09	; 9
     688:	0f b6       	in	r0, 0x3f	; 63
     68a:	f8 94       	cli
     68c:	de bf       	out	0x3e, r29	; 62
     68e:	0f be       	out	0x3f, r0	; 63
     690:	cd bf       	out	0x3d, r28	; 61
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	1f 91       	pop	r17
     698:	0f 91       	pop	r16
     69a:	08 95       	ret

0000069c <init_game>:
 * Initialise board - all the row data will be empty (0) and we
 * create an initial random block and add it to the top of the board.
 */
void init_game(void) {	
	// Clear the LED matrix
	ledmatrix_clear();
     69c:	0e 94 20 05 	call	0xa40	; 0xa40 <ledmatrix_clear>
     6a0:	ae e1       	ldi	r26, 0x1E	; 30
     6a2:	b2 e0       	ldi	r27, 0x02	; 2
     6a4:	2e e9       	ldi	r18, 0x9E	; 158
     6a6:	31 e0       	ldi	r19, 0x01	; 1
     6a8:	4e e1       	ldi	r20, 0x1E	; 30
     6aa:	52 e0       	ldi	r21, 0x02	; 2

	for(uint8_t row=0; row < BOARD_ROWS; row++) {
		board[row] = 0;
		for(uint8_t col=0; col < MATRIX_NUM_ROWS; col++) {
     6ac:	90 e0       	ldi	r25, 0x00	; 0
void init_game(void) {	
	// Clear the LED matrix
	ledmatrix_clear();

	for(uint8_t row=0; row < BOARD_ROWS; row++) {
		board[row] = 0;
     6ae:	1d 92       	st	X+, r1
     6b0:	f9 01       	movw	r30, r18
		for(uint8_t col=0; col < MATRIX_NUM_ROWS; col++) {
     6b2:	89 2f       	mov	r24, r25
			board_display[row][col] = 0;
     6b4:	11 92       	st	Z+, r1
	// Clear the LED matrix
	ledmatrix_clear();

	for(uint8_t row=0; row < BOARD_ROWS; row++) {
		board[row] = 0;
		for(uint8_t col=0; col < MATRIX_NUM_ROWS; col++) {
     6b6:	8f 5f       	subi	r24, 0xFF	; 255
     6b8:	88 30       	cpi	r24, 0x08	; 8
     6ba:	e1 f7       	brne	.-8      	; 0x6b4 <init_game+0x18>
     6bc:	28 5f       	subi	r18, 0xF8	; 248
     6be:	3f 4f       	sbci	r19, 0xFF	; 255
 */
void init_game(void) {	
	// Clear the LED matrix
	ledmatrix_clear();

	for(uint8_t row=0; row < BOARD_ROWS; row++) {
     6c0:	24 17       	cp	r18, r20
     6c2:	35 07       	cpc	r19, r21
     6c4:	a1 f7       	brne	.-24     	; 0x6ae <init_game+0x12>
	// Adding a random block will update the "current_block" and 
	// add it to the board.	With an empty board this will always
	// succeed so we ignore the return value - this is indicated 
	// by the (void) cast. This function will update the display
	// for the required rows.
	(void)add_random_block();
     6c6:	0e 94 09 03 	call	0x612	; 0x612 <add_random_block>
     6ca:	08 95       	ret

000006cc <attempt_move>:
 * This succeeds if
 * (1) the block isn't all the way to the side, and
 * (2) the board contains no blocks in that position.
 * Returns 1 if move successful, 0 otherwise.
 */
uint8_t attempt_move(int8_t direction) {	
     6cc:	0f 93       	push	r16
     6ce:	1f 93       	push	r17
     6d0:	cf 93       	push	r28
     6d2:	df 93       	push	r29
     6d4:	cd b7       	in	r28, 0x3d	; 61
     6d6:	de b7       	in	r29, 0x3e	; 62
     6d8:	29 97       	sbiw	r28, 0x09	; 9
     6da:	0f b6       	in	r0, 0x3f	; 63
     6dc:	f8 94       	cli
     6de:	de bf       	out	0x3e, r29	; 62
     6e0:	0f be       	out	0x3f, r0	; 63
     6e2:	cd bf       	out	0x3d, r28	; 61
	// Make a copy of the current block - we carry out the 
	// operations on the copy and copy it over to the current_block
	// if all is successful
	FallingBlock tmp_block = current_block;
     6e4:	99 e0       	ldi	r25, 0x09	; 9
     6e6:	ee e2       	ldi	r30, 0x2E	; 46
     6e8:	f2 e0       	ldi	r31, 0x02	; 2
     6ea:	de 01       	movw	r26, r28
     6ec:	11 96       	adiw	r26, 0x01	; 1
     6ee:	01 90       	ld	r0, Z+
     6f0:	0d 92       	st	X+, r0
     6f2:	9a 95       	dec	r25
     6f4:	e1 f7       	brne	.-8      	; 0x6ee <attempt_move+0x22>
	
	if(direction == MOVE_LEFT) {
     6f6:	81 11       	cpse	r24, r1
     6f8:	07 c0       	rjmp	.+14     	; 0x708 <attempt_move+0x3c>
		if(!move_block_left(&tmp_block)) {
     6fa:	ce 01       	movw	r24, r28
     6fc:	01 96       	adiw	r24, 0x01	; 1
     6fe:	0e 94 62 01 	call	0x2c4	; 0x2c4 <move_block_left>
     702:	81 11       	cpse	r24, r1
     704:	07 c0       	rjmp	.+14     	; 0x714 <attempt_move+0x48>
     706:	28 c0       	rjmp	.+80     	; 0x758 <attempt_move+0x8c>
			// Block was too far left - can't be moved
			return 0;
		}
	} else {
		// Attempt a move to the right
		if(!move_block_right(&tmp_block)) {
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <move_block_right>
     710:	88 23       	and	r24, r24
     712:	21 f1       	breq	.+72     	; 0x75c <attempt_move+0x90>
		}
	}
	
	// The temporary block wasn't at the edge and has been moved
	// Now check whether it collides with any blocks on the board.
	if(block_collides(tmp_block)) {
     714:	09 81       	ldd	r16, Y+1	; 0x01
     716:	1a 81       	ldd	r17, Y+2	; 0x02
     718:	2b 81       	ldd	r18, Y+3	; 0x03
     71a:	3c 81       	ldd	r19, Y+4	; 0x04
     71c:	4d 81       	ldd	r20, Y+5	; 0x05
     71e:	5e 81       	ldd	r21, Y+6	; 0x06
     720:	6f 81       	ldd	r22, Y+7	; 0x07
     722:	78 85       	ldd	r23, Y+8	; 0x08
     724:	89 85       	ldd	r24, Y+9	; 0x09
     726:	0e 94 0b 02 	call	0x416	; 0x416 <block_collides>
     72a:	81 11       	cpse	r24, r1
     72c:	19 c0       	rjmp	.+50     	; 0x760 <attempt_move+0x94>
	}
	
	// Block won't collide with other blocks so we can lock in the move.
	// First remove the current block from the display, update the current
	// block, then add it back to the board display
	remove_current_block_from_board_display();
     72e:	0e 94 67 02 	call	0x4ce	; 0x4ce <remove_current_block_from_board_display>
	current_block = tmp_block;
     732:	89 e0       	ldi	r24, 0x09	; 9
     734:	fe 01       	movw	r30, r28
     736:	31 96       	adiw	r30, 0x01	; 1
     738:	ae e2       	ldi	r26, 0x2E	; 46
     73a:	b2 e0       	ldi	r27, 0x02	; 2
     73c:	01 90       	ld	r0, Z+
     73e:	0d 92       	st	X+, r0
     740:	8a 95       	dec	r24
     742:	e1 f7       	brne	.-8      	; 0x73c <attempt_move+0x70>
	add_current_block_to_board_display();
     744:	0e 94 a9 02 	call	0x552	; 0x552 <add_current_block_to_board_display>
	
	// Update the rows which are affected
	update_rows_on_display(current_block.row, current_block.height);
     748:	ee e2       	ldi	r30, 0x2E	; 46
     74a:	f2 e0       	ldi	r31, 0x02	; 2
     74c:	60 85       	ldd	r22, Z+8	; 0x08
     74e:	84 81       	ldd	r24, Z+4	; 0x04
     750:	0e 94 ee 02 	call	0x5dc	; 0x5dc <update_rows_on_display>
	return 1;
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	05 c0       	rjmp	.+10     	; 0x762 <attempt_move+0x96>
	FallingBlock tmp_block = current_block;
	
	if(direction == MOVE_LEFT) {
		if(!move_block_left(&tmp_block)) {
			// Block was too far left - can't be moved
			return 0;
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	03 c0       	rjmp	.+6      	; 0x762 <attempt_move+0x96>
		}
	} else {
		// Attempt a move to the right
		if(!move_block_right(&tmp_block)) {
			// Block was too far right - can't be moved
			return 0;
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	01 c0       	rjmp	.+2      	; 0x762 <attempt_move+0x96>
	// The temporary block wasn't at the edge and has been moved
	// Now check whether it collides with any blocks on the board.
	if(block_collides(tmp_block)) {
		// Block will collide with other blocks so the move can't be
		// made.
		return 0;
     760:	80 e0       	ldi	r24, 0x00	; 0
	add_current_block_to_board_display();
	
	// Update the rows which are affected
	update_rows_on_display(current_block.row, current_block.height);
	return 1;
}
     762:	29 96       	adiw	r28, 0x09	; 9
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	f8 94       	cli
     768:	de bf       	out	0x3e, r29	; 62
     76a:	0f be       	out	0x3f, r0	; 63
     76c:	cd bf       	out	0x3d, r28	; 61
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	1f 91       	pop	r17
     774:	0f 91       	pop	r16
     776:	08 95       	ret

00000778 <attempt_drop_block_one_row>:
 * Attempt to drop the current block by one row. This succeeds unless there
 * are squares blocked on the row below or we're at the bottom of
 * the board. Returns 1 if drop succeeded,  0 otherwise. 
 * (If the drop fails, the caller should add the block to the board.)
*/
uint8_t attempt_drop_block_one_row(void) {
     778:	ff 92       	push	r15
     77a:	0f 93       	push	r16
     77c:	1f 93       	push	r17
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
     782:	cd b7       	in	r28, 0x3d	; 61
     784:	de b7       	in	r29, 0x3e	; 62
     786:	29 97       	sbiw	r28, 0x09	; 9
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	f8 94       	cli
     78c:	de bf       	out	0x3e, r29	; 62
     78e:	0f be       	out	0x3f, r0	; 63
     790:	cd bf       	out	0x3d, r28	; 61
	/*
	 * Check if the block has reached the bottom of the board.
	 * If so, do nothing and return false
	 */
	if(current_block.row + current_block.height >= BOARD_ROWS) {
     792:	ee e2       	ldi	r30, 0x2E	; 46
     794:	f2 e0       	ldi	r31, 0x02	; 2
     796:	44 81       	ldd	r20, Z+4	; 0x04
     798:	80 85       	ldd	r24, Z+8	; 0x08
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	84 0f       	add	r24, r20
     79e:	91 1d       	adc	r25, r1
     7a0:	40 97       	sbiw	r24, 0x10	; 16
     7a2:	7c f5       	brge	.+94     	; 0x802 <attempt_drop_block_one_row+0x8a>
	
	/* Create a temporary block as a copy of the current block.
	 * Move it down 1 row and check whether it collides with
	 * any fixed blocks.
	 */
	FallingBlock tmp_block = current_block;
     7a4:	89 e0       	ldi	r24, 0x09	; 9
     7a6:	de 01       	movw	r26, r28
     7a8:	11 96       	adiw	r26, 0x01	; 1
     7aa:	01 90       	ld	r0, Z+
     7ac:	0d 92       	st	X+, r0
     7ae:	8a 95       	dec	r24
     7b0:	e1 f7       	brne	.-8      	; 0x7aa <attempt_drop_block_one_row+0x32>
	tmp_block.row += 1;
     7b2:	ff 24       	eor	r15, r15
     7b4:	f3 94       	inc	r15
     7b6:	f4 0e       	add	r15, r20
	if(block_collides(tmp_block)) {
     7b8:	09 81       	ldd	r16, Y+1	; 0x01
     7ba:	1a 81       	ldd	r17, Y+2	; 0x02
     7bc:	2b 81       	ldd	r18, Y+3	; 0x03
     7be:	3c 81       	ldd	r19, Y+4	; 0x04
     7c0:	4f 2d       	mov	r20, r15
     7c2:	5e 81       	ldd	r21, Y+6	; 0x06
     7c4:	6f 81       	ldd	r22, Y+7	; 0x07
     7c6:	78 85       	ldd	r23, Y+8	; 0x08
     7c8:	89 85       	ldd	r24, Y+9	; 0x09
     7ca:	0e 94 0b 02 	call	0x416	; 0x416 <block_collides>
     7ce:	81 11       	cpse	r24, r1
     7d0:	1a c0       	rjmp	.+52     	; 0x806 <attempt_drop_block_one_row+0x8e>
		// Block will collide if moved down - so we can't move it
		return 0;
	}
	
	// Move would succeed - so we make it happen
	remove_current_block_from_board_display();
     7d2:	0e 94 67 02 	call	0x4ce	; 0x4ce <remove_current_block_from_board_display>
	current_block = tmp_block;
     7d6:	fd 82       	std	Y+5, r15	; 0x05
     7d8:	89 e0       	ldi	r24, 0x09	; 9
     7da:	fe 01       	movw	r30, r28
     7dc:	31 96       	adiw	r30, 0x01	; 1
     7de:	ae e2       	ldi	r26, 0x2E	; 46
     7e0:	b2 e0       	ldi	r27, 0x02	; 2
     7e2:	01 90       	ld	r0, Z+
     7e4:	0d 92       	st	X+, r0
     7e6:	8a 95       	dec	r24
     7e8:	e1 f7       	brne	.-8      	; 0x7e2 <attempt_drop_block_one_row+0x6a>
	add_current_block_to_board_display();
     7ea:	0e 94 a9 02 	call	0x552	; 0x552 <add_current_block_to_board_display>
	
	// Update the rows which are affected - starting from the row before
	// where the current block is.
	update_rows_on_display(current_block.row - 1, current_block.height + 1);
     7ee:	ee e2       	ldi	r30, 0x2E	; 46
     7f0:	f2 e0       	ldi	r31, 0x02	; 2
     7f2:	60 85       	ldd	r22, Z+8	; 0x08
     7f4:	6f 5f       	subi	r22, 0xFF	; 255
     7f6:	84 81       	ldd	r24, Z+4	; 0x04
     7f8:	81 50       	subi	r24, 0x01	; 1
     7fa:	0e 94 ee 02 	call	0x5dc	; 0x5dc <update_rows_on_display>
	
	// Move was successful - indicate so
	return 1;
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	03 c0       	rjmp	.+6      	; 0x808 <attempt_drop_block_one_row+0x90>
	/*
	 * Check if the block has reached the bottom of the board.
	 * If so, do nothing and return false
	 */
	if(current_block.row + current_block.height >= BOARD_ROWS) {
		return 0;
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	01 c0       	rjmp	.+2      	; 0x808 <attempt_drop_block_one_row+0x90>
	 */
	FallingBlock tmp_block = current_block;
	tmp_block.row += 1;
	if(block_collides(tmp_block)) {
		// Block will collide if moved down - so we can't move it
		return 0;
     806:	80 e0       	ldi	r24, 0x00	; 0
	// where the current block is.
	update_rows_on_display(current_block.row - 1, current_block.height + 1);
	
	// Move was successful - indicate so
	return 1;
}
     808:	29 96       	adiw	r28, 0x09	; 9
     80a:	0f b6       	in	r0, 0x3f	; 63
     80c:	f8 94       	cli
     80e:	de bf       	out	0x3e, r29	; 62
     810:	0f be       	out	0x3f, r0	; 63
     812:	cd bf       	out	0x3d, r28	; 61
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	ff 90       	pop	r15
     81e:	08 95       	ret

00000820 <attempt_rotation>:
 * Attempt to rotate the block clockwise 90 degrees. Returns 1 if the
 * rotation is successful, 0 otherwise (e.g. a block on the board
 * blocks the rotation or the block is too close to the left edge to 
 * rotate).
 */
uint8_t attempt_rotation(void) {
     820:	0f 93       	push	r16
     822:	1f 93       	push	r17
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	cd b7       	in	r28, 0x3d	; 61
     82a:	de b7       	in	r29, 0x3e	; 62
     82c:	29 97       	sbiw	r28, 0x09	; 9
     82e:	0f b6       	in	r0, 0x3f	; 63
     830:	f8 94       	cli
     832:	de bf       	out	0x3e, r29	; 62
     834:	0f be       	out	0x3f, r0	; 63
     836:	cd bf       	out	0x3d, r28	; 61
	// Make a copy of the current block - we carry out the
	// operations on the copy and copy it back to the current_block
	// if all is successful
	FallingBlock tmp_block = current_block;
     838:	89 e0       	ldi	r24, 0x09	; 9
     83a:	ee e2       	ldi	r30, 0x2E	; 46
     83c:	f2 e0       	ldi	r31, 0x02	; 2
     83e:	de 01       	movw	r26, r28
     840:	11 96       	adiw	r26, 0x01	; 1
     842:	01 90       	ld	r0, Z+
     844:	0d 92       	st	X+, r0
     846:	8a 95       	dec	r24
     848:	e1 f7       	brne	.-8      	; 0x842 <attempt_rotation+0x22>
	
	if(!rotate_block(&tmp_block)) {
     84a:	ce 01       	movw	r24, r28
     84c:	01 96       	adiw	r24, 0x01	; 1
     84e:	0e 94 2b 01 	call	0x256	; 0x256 <rotate_block>
     852:	88 23       	and	r24, r24
     854:	39 f1       	breq	.+78     	; 0x8a4 <attempt_rotation+0x84>
		return 0;
	}
	
	// The temporary block has been rotated. 
	// Now check whether it collides with any blocks on the board.
	if(block_collides(tmp_block)) {
     856:	09 81       	ldd	r16, Y+1	; 0x01
     858:	1a 81       	ldd	r17, Y+2	; 0x02
     85a:	2b 81       	ldd	r18, Y+3	; 0x03
     85c:	3c 81       	ldd	r19, Y+4	; 0x04
     85e:	4d 81       	ldd	r20, Y+5	; 0x05
     860:	5e 81       	ldd	r21, Y+6	; 0x06
     862:	6f 81       	ldd	r22, Y+7	; 0x07
     864:	78 85       	ldd	r23, Y+8	; 0x08
     866:	89 85       	ldd	r24, Y+9	; 0x09
     868:	0e 94 0b 02 	call	0x416	; 0x416 <block_collides>
     86c:	81 11       	cpse	r24, r1
     86e:	1c c0       	rjmp	.+56     	; 0x8a8 <attempt_rotation+0x88>
	}
	
	// Block won't collide with other blocks so we can lock in the move.
	// First determine the number of rows affected (to be redrawn) -
	// will be maximum of those in block before and after rotation
	uint8_t rows_affected = tmp_block.height;
     870:	89 85       	ldd	r24, Y+9	; 0x09
	if(current_block.height > tmp_block.height) {
     872:	10 91 36 02 	lds	r17, 0x0236
     876:	18 17       	cp	r17, r24
     878:	08 f4       	brcc	.+2      	; 0x87c <attempt_rotation+0x5c>
     87a:	18 2f       	mov	r17, r24
		rows_affected = current_block.height;
	}	
	
	// Second remove the current block from the display, update the current
	// block to the rotated version, then add it back to the board display
	remove_current_block_from_board_display();
     87c:	0e 94 67 02 	call	0x4ce	; 0x4ce <remove_current_block_from_board_display>
	current_block = tmp_block;
     880:	89 e0       	ldi	r24, 0x09	; 9
     882:	fe 01       	movw	r30, r28
     884:	31 96       	adiw	r30, 0x01	; 1
     886:	ae e2       	ldi	r26, 0x2E	; 46
     888:	b2 e0       	ldi	r27, 0x02	; 2
     88a:	01 90       	ld	r0, Z+
     88c:	0d 92       	st	X+, r0
     88e:	8a 95       	dec	r24
     890:	e1 f7       	brne	.-8      	; 0x88a <attempt_rotation+0x6a>
	add_current_block_to_board_display();
     892:	0e 94 a9 02 	call	0x552	; 0x552 <add_current_block_to_board_display>

	update_rows_on_display(current_block.row, rows_affected);
     896:	61 2f       	mov	r22, r17
     898:	80 91 32 02 	lds	r24, 0x0232
     89c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <update_rows_on_display>
	
	// Rotation has happened - return true
	return 1;
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	03 c0       	rjmp	.+6      	; 0x8aa <attempt_rotation+0x8a>
	// if all is successful
	FallingBlock tmp_block = current_block;
	
	if(!rotate_block(&tmp_block)) {
		// Block was too far left to rotate	- abort
		return 0;
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	01 c0       	rjmp	.+2      	; 0x8aa <attempt_rotation+0x8a>
	// The temporary block has been rotated. 
	// Now check whether it collides with any blocks on the board.
	if(block_collides(tmp_block)) {
		// Block will collide with other blocks so the rotate can't be
		// made.
		return 0;
     8a8:	80 e0       	ldi	r24, 0x00	; 0

	update_rows_on_display(current_block.row, rows_affected);
	
	// Rotation has happened - return true
	return 1;
}
     8aa:	29 96       	adiw	r28, 0x09	; 9
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	f8 94       	cli
     8b0:	de bf       	out	0x3e, r29	; 62
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	cd bf       	out	0x3d, r28	; 61
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	1f 91       	pop	r17
     8bc:	0f 91       	pop	r16
     8be:	08 95       	ret

000008c0 <fix_block_to_board_and_add_new_block>:
 * Add current block to board at its current position. We do this using a
 * bitwise OR for each row that contains the block.	No display update is
 * required. We then attempt to add a new block to the top of the board.
 * If this suceeds, we return 1, otherwise we return 0 (meaning game over).
 */
uint8_t fix_block_to_board_and_add_new_block(void) {
     8c0:	2f 92       	push	r2
     8c2:	3f 92       	push	r3
     8c4:	4f 92       	push	r4
     8c6:	5f 92       	push	r5
     8c8:	6f 92       	push	r6
     8ca:	7f 92       	push	r7
     8cc:	8f 92       	push	r8
     8ce:	9f 92       	push	r9
     8d0:	af 92       	push	r10
     8d2:	bf 92       	push	r11
     8d4:	cf 92       	push	r12
     8d6:	df 92       	push	r13
     8d8:	ef 92       	push	r14
     8da:	ff 92       	push	r15
     8dc:	0f 93       	push	r16
     8de:	1f 93       	push	r17
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
	for(uint8_t row = 0; row < current_block.height; row++) {
     8e4:	30 91 36 02 	lds	r19, 0x0236
     8e8:	33 23       	and	r19, r19
     8ea:	09 f4       	brne	.+2      	; 0x8ee <fix_block_to_board_and_add_new_block+0x2e>
     8ec:	4c c0       	rjmp	.+152    	; 0x986 <__stack+0x87>
		uint8_t board_row = current_block.row + row;
     8ee:	ee e2       	ldi	r30, 0x2E	; 46
     8f0:	f2 e0       	ldi	r31, 0x02	; 2
     8f2:	64 81       	ldd	r22, Z+4	; 0x04
		board[board_row] |= 
				(current_block.pattern[row]	<< current_block.column);
     8f4:	45 81       	ldd	r20, Z+5	; 0x05
     8f6:	a1 81       	ldd	r26, Z+1	; 0x01
     8f8:	b2 81       	ldd	r27, Z+2	; 0x02
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	e2 2f       	mov	r30, r18
     8fe:	e6 0f       	add	r30, r22
 * If this suceeds, we return 1, otherwise we return 0 (meaning game over).
 */
uint8_t fix_block_to_board_and_add_new_block(void) {
	for(uint8_t row = 0; row < current_block.height; row++) {
		uint8_t board_row = current_block.row + row;
		board[board_row] |= 
     900:	f0 e0       	ldi	r31, 0x00	; 0
				(current_block.pattern[row]	<< current_block.column);
     902:	8d 91       	ld	r24, X+
 * If this suceeds, we return 1, otherwise we return 0 (meaning game over).
 */
uint8_t fix_block_to_board_and_add_new_block(void) {
	for(uint8_t row = 0; row < current_block.height; row++) {
		uint8_t board_row = current_block.row + row;
		board[board_row] |= 
     904:	e2 5e       	subi	r30, 0xE2	; 226
     906:	fd 4f       	sbci	r31, 0xFD	; 253
				(current_block.pattern[row]	<< current_block.column);
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	04 2e       	mov	r0, r20
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__stack+0x13>
     90e:	88 0f       	add	r24, r24
     910:	99 1f       	adc	r25, r25
     912:	0a 94       	dec	r0
     914:	e2 f7       	brpl	.-8      	; 0x90e <__stack+0xf>
 * If this suceeds, we return 1, otherwise we return 0 (meaning game over).
 */
uint8_t fix_block_to_board_and_add_new_block(void) {
	for(uint8_t row = 0; row < current_block.height; row++) {
		uint8_t board_row = current_block.row + row;
		board[board_row] |= 
     916:	90 81       	ld	r25, Z
     918:	89 2b       	or	r24, r25
     91a:	80 83       	st	Z, r24
 * bitwise OR for each row that contains the block.	No display update is
 * required. We then attempt to add a new block to the top of the board.
 * If this suceeds, we return 1, otherwise we return 0 (meaning game over).
 */
uint8_t fix_block_to_board_and_add_new_block(void) {
	for(uint8_t row = 0; row < current_block.height; row++) {
     91c:	2f 5f       	subi	r18, 0xFF	; 255
     91e:	23 17       	cp	r18, r19
     920:	68 f3       	brcs	.-38     	; 0x8fc <fix_block_to_board_and_add_new_block+0x3c>
     922:	31 c0       	rjmp	.+98     	; 0x986 <__stack+0x87>
     924:	74 01       	movw	r14, r8
     926:	8f ef       	ldi	r24, 0xFF	; 255
     928:	e8 1a       	sub	r14, r24
     92a:	f8 0a       	sbc	r15, r24
 * to a column on the LED matrix.)
 */
static void check_for_completed_rows(void) {
	/* YOUR CODE HERE */
	for(int i=0;i<BOARD_ROWS;i++){
		if (board[i] == ((1<< BOARD_WIDTH) - 1)){
     92c:	f4 01       	movw	r30, r8
     92e:	80 81       	ld	r24, Z
     930:	8f 3f       	cpi	r24, 0xFF	; 255
     932:	f9 f4       	brne	.+62     	; 0x972 <__stack+0x73>
			printf("Row completed");
     934:	5f 92       	push	r5
     936:	4f 92       	push	r4
     938:	0e 94 65 0a 	call	0x14ca	; 0x14ca <printf>
			ledmatrix_shift_display_right();
     93c:	0e 94 19 05 	call	0xa32	; 0xa32 <ledmatrix_shift_display_right>
			for(int j=0; j < i;j++){
     940:	0f 90       	pop	r0
     942:	0f 90       	pop	r0
     944:	c1 01       	movw	r24, r2
     946:	8e 0d       	add	r24, r14
     948:	9f 1d       	adc	r25, r15
     94a:	18 16       	cp	r1, r24
     94c:	19 06       	cpc	r1, r25
     94e:	8c f4       	brge	.+34     	; 0x972 <__stack+0x73>
     950:	87 01       	movw	r16, r14
     952:	b6 01       	movw	r22, r12
     954:	eb 01       	movw	r28, r22
     956:	28 97       	sbiw	r28, 0x08	; 8
				//printf_P(i);
				//printf_P(j);
				copy_matrix_column(board_display[i-j-1],board_display[i-j]);
     958:	ce 01       	movw	r24, r28
     95a:	0e 94 24 05 	call	0xa48	; 0xa48 <copy_matrix_column>
				board[i-j] = board[i-j-1];
     95e:	f4 01       	movw	r30, r8
     960:	82 91       	ld	r24, -Z
     962:	4f 01       	movw	r8, r30
     964:	f8 01       	movw	r30, r16
     966:	82 93       	st	-Z, r24
     968:	8f 01       	movw	r16, r30
     96a:	be 01       	movw	r22, r28
	/* YOUR CODE HERE */
	for(int i=0;i<BOARD_ROWS;i++){
		if (board[i] == ((1<< BOARD_WIDTH) - 1)){
			printf("Row completed");
			ledmatrix_shift_display_right();
			for(int j=0; j < i;j++){
     96c:	8a 14       	cp	r8, r10
     96e:	9b 04       	cpc	r9, r11
     970:	89 f7       	brne	.-30     	; 0x954 <__stack+0x55>
     972:	f8 e0       	ldi	r31, 0x08	; 8
     974:	cf 0e       	add	r12, r31
     976:	d1 1c       	adc	r13, r1
     978:	47 01       	movw	r8, r14
 * removed then we update the LED matrix. (Each row on the board corresponds
 * to a column on the LED matrix.)
 */
static void check_for_completed_rows(void) {
	/* YOUR CODE HERE */
	for(int i=0;i<BOARD_ROWS;i++){
     97a:	e6 14       	cp	r14, r6
     97c:	f7 04       	cpc	r15, r7
     97e:	91 f6       	brne	.-92     	; 0x924 <__stack+0x25>
		uint8_t board_row = current_block.row + row;
		board[board_row] |= 
				(current_block.pattern[row]	<< current_block.column);
	}
	check_for_completed_rows();
	return add_random_block();
     980:	0e 94 09 03 	call	0x612	; 0x612 <add_random_block>
     984:	1d c0       	rjmp	.+58     	; 0x9c0 <__stack+0xc1>
     986:	0f 2e       	mov	r0, r31
     988:	fe e1       	ldi	r31, 0x1E	; 30
     98a:	af 2e       	mov	r10, r31
     98c:	f2 e0       	ldi	r31, 0x02	; 2
     98e:	bf 2e       	mov	r11, r31
     990:	f0 2d       	mov	r31, r0
     992:	0f 2e       	mov	r0, r31
     994:	fe e9       	ldi	r31, 0x9E	; 158
     996:	cf 2e       	mov	r12, r31
     998:	f1 e0       	ldi	r31, 0x01	; 1
     99a:	df 2e       	mov	r13, r31
     99c:	f0 2d       	mov	r31, r0
     99e:	0f 2e       	mov	r0, r31
     9a0:	fe e2       	ldi	r31, 0x2E	; 46
     9a2:	6f 2e       	mov	r6, r31
     9a4:	f2 e0       	ldi	r31, 0x02	; 2
     9a6:	7f 2e       	mov	r7, r31
     9a8:	f0 2d       	mov	r31, r0
 */
uint8_t fix_block_to_board_and_add_new_block(void) {
	for(uint8_t row = 0; row < current_block.height; row++) {
		uint8_t board_row = current_block.row + row;
		board[board_row] |= 
				(current_block.pattern[row]	<< current_block.column);
     9aa:	45 01       	movw	r8, r10
 */
static void check_for_completed_rows(void) {
	/* YOUR CODE HERE */
	for(int i=0;i<BOARD_ROWS;i++){
		if (board[i] == ((1<< BOARD_WIDTH) - 1)){
			printf("Row completed");
     9ac:	0f 2e       	mov	r0, r31
     9ae:	f5 e6       	ldi	r31, 0x65	; 101
     9b0:	4f 2e       	mov	r4, r31
     9b2:	f1 e0       	ldi	r31, 0x01	; 1
     9b4:	5f 2e       	mov	r5, r31
     9b6:	f0 2d       	mov	r31, r0
     9b8:	15 01       	movw	r2, r10
     9ba:	20 94       	com	r2
     9bc:	30 94       	com	r3
     9be:	b2 cf       	rjmp	.-156    	; 0x924 <__stack+0x25>
		board[board_row] |= 
				(current_block.pattern[row]	<< current_block.column);
	}
	check_for_completed_rows();
	return add_random_block();
}
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	1f 91       	pop	r17
     9c6:	0f 91       	pop	r16
     9c8:	ff 90       	pop	r15
     9ca:	ef 90       	pop	r14
     9cc:	df 90       	pop	r13
     9ce:	cf 90       	pop	r12
     9d0:	bf 90       	pop	r11
     9d2:	af 90       	pop	r10
     9d4:	9f 90       	pop	r9
     9d6:	8f 90       	pop	r8
     9d8:	7f 90       	pop	r7
     9da:	6f 90       	pop	r6
     9dc:	5f 90       	pop	r5
     9de:	4f 90       	pop	r4
     9e0:	3f 90       	pop	r3
     9e2:	2f 90       	pop	r2
     9e4:	08 95       	ret

000009e6 <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     9e6:	80 e8       	ldi	r24, 0x80	; 128
     9e8:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <spi_setup_master>
     9ec:	08 95       	ret

000009ee <ledmatrix_update_column>:
     9ee:	0f 93       	push	r16
     9f0:	1f 93       	push	r17
     9f2:	cf 93       	push	r28
     9f4:	df 93       	push	r29
     9f6:	c8 2f       	mov	r28, r24
     9f8:	8b 01       	movw	r16, r22
     9fa:	83 e0       	ldi	r24, 0x03	; 3
     9fc:	0e 94 01 09 	call	0x1202	; 0x1202 <spi_send_byte>
     a00:	8c 2f       	mov	r24, r28
     a02:	8f 70       	andi	r24, 0x0F	; 15
     a04:	0e 94 01 09 	call	0x1202	; 0x1202 <spi_send_byte>
     a08:	e8 01       	movw	r28, r16
     a0a:	08 5f       	subi	r16, 0xF8	; 248
     a0c:	1f 4f       	sbci	r17, 0xFF	; 255
     a0e:	89 91       	ld	r24, Y+
     a10:	0e 94 01 09 	call	0x1202	; 0x1202 <spi_send_byte>
     a14:	c0 17       	cp	r28, r16
     a16:	d1 07       	cpc	r29, r17
     a18:	d1 f7       	brne	.-12     	; 0xa0e <ledmatrix_update_column+0x20>
     a1a:	df 91       	pop	r29
     a1c:	cf 91       	pop	r28
     a1e:	1f 91       	pop	r17
     a20:	0f 91       	pop	r16
     a22:	08 95       	ret

00000a24 <ledmatrix_shift_display_left>:
     a24:	84 e0       	ldi	r24, 0x04	; 4
     a26:	0e 94 01 09 	call	0x1202	; 0x1202 <spi_send_byte>
     a2a:	82 e0       	ldi	r24, 0x02	; 2
     a2c:	0e 94 01 09 	call	0x1202	; 0x1202 <spi_send_byte>
     a30:	08 95       	ret

00000a32 <ledmatrix_shift_display_right>:
     a32:	84 e0       	ldi	r24, 0x04	; 4
     a34:	0e 94 01 09 	call	0x1202	; 0x1202 <spi_send_byte>
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	0e 94 01 09 	call	0x1202	; 0x1202 <spi_send_byte>
     a3e:	08 95       	ret

00000a40 <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     a40:	8f e0       	ldi	r24, 0x0F	; 15
     a42:	0e 94 01 09 	call	0x1202	; 0x1202 <spi_send_byte>
     a46:	08 95       	ret

00000a48 <copy_matrix_column>:
}

void copy_matrix_column(MatrixColumn from, MatrixColumn to) {
     a48:	fc 01       	movw	r30, r24
     a4a:	a6 2f       	mov	r26, r22
     a4c:	b7 2f       	mov	r27, r23
     a4e:	9c 01       	movw	r18, r24
     a50:	28 5f       	subi	r18, 0xF8	; 248
     a52:	3f 4f       	sbci	r19, 0xFF	; 255
	for(uint8_t row = 0; row <MATRIX_NUM_ROWS; row++) {
		to[row] = from[row];
     a54:	91 91       	ld	r25, Z+
     a56:	9d 93       	st	X+, r25
void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
}

void copy_matrix_column(MatrixColumn from, MatrixColumn to) {
	for(uint8_t row = 0; row <MATRIX_NUM_ROWS; row++) {
     a58:	e2 17       	cp	r30, r18
     a5a:	f3 07       	cpc	r31, r19
     a5c:	d9 f7       	brne	.-10     	; 0xa54 <copy_matrix_column+0xc>
		to[row] = from[row];
	}
}
     a5e:	08 95       	ret

00000a60 <initialise_hardware>:
		handle_game_over();
	}
}

void initialise_hardware(void) {
	ledmatrix_setup();
     a60:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <ledmatrix_setup>
	init_button_interrupts();
     a64:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <init_button_interrupts>
	
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200,0);
     a68:	40 e0       	ldi	r20, 0x00	; 0
     a6a:	60 e0       	ldi	r22, 0x00	; 0
     a6c:	7b e4       	ldi	r23, 0x4B	; 75
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <init_serial_stdio>
	
	// Set up our main timer to give us an interrupt every millisecond
	init_timer0();
     a76:	0e 94 3f 09 	call	0x127e	; 0x127e <init_timer0>
	
	// Turn on global interrupts
	sei();
     a7a:	78 94       	sei
     a7c:	08 95       	ret

00000a7e <splash_screen>:
}

void splash_screen(void) {
     a7e:	ff 92       	push	r15
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
	// Reset display attributes and clear terminal screen then output a message
	set_display_attribute(TERM_RESET);
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	0e 94 29 09 	call	0x1252	; 0x1252 <set_display_attribute>
	clear_terminal();
     a8e:	0e 94 20 09 	call	0x1240	; 0x1240 <clear_terminal>
	
	hide_cursor();	// We don't need to see the cursor when we're just doing output
     a92:	0e 94 36 09 	call	0x126c	; 0x126c <hide_cursor>
	move_cursor(3,3);
     a96:	63 e0       	ldi	r22, 0x03	; 3
     a98:	83 e0       	ldi	r24, 0x03	; 3
     a9a:	0e 94 07 09 	call	0x120e	; 0x120e <move_cursor>
	printf_P(PSTR("Tetris"));
     a9e:	82 ed       	ldi	r24, 0xD2	; 210
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	9f 93       	push	r25
     aa4:	8f 93       	push	r24
     aa6:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <printf_P>
	
	move_cursor(3,5);
     aaa:	65 e0       	ldi	r22, 0x05	; 5
     aac:	83 e0       	ldi	r24, 0x03	; 3
     aae:	0e 94 07 09 	call	0x120e	; 0x120e <move_cursor>
	set_display_attribute(FG_GREEN);	// Make the text green
     ab2:	80 e2       	ldi	r24, 0x20	; 32
     ab4:	0e 94 29 09 	call	0x1252	; 0x1252 <set_display_attribute>
	printf_P(PSTR("CSSE2010/7201 Tetris Project by James Bentley"));	
     ab8:	84 ea       	ldi	r24, 0xA4	; 164
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	9f 93       	push	r25
     abe:	8f 93       	push	r24
     ac0:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <printf_P>
	set_display_attribute(FG_WHITE);	// Return to default colour (White)
     ac4:	85 e2       	ldi	r24, 0x25	; 37
     ac6:	0e 94 29 09 	call	0x1252	; 0x1252 <set_display_attribute>
	
	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
     aca:	0e 94 20 05 	call	0xa40	; 0xa40 <ledmatrix_clear>
     ace:	0f 90       	pop	r0
     ad0:	0f 90       	pop	r0
     ad2:	0f 90       	pop	r0
     ad4:	0f 90       	pop	r0
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
     ad6:	cf e0       	ldi	r28, 0x0F	; 15
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
			case 1: colour = COLOUR_RED; break;
     ad8:	0f 2e       	mov	r0, r31
     ada:	ff e0       	ldi	r31, 0x0F	; 15
     adc:	ff 2e       	mov	r15, r31
     ade:	f0 2d       	mov	r31, r0
			case 2: colour = COLOUR_YELLOW; break;
     ae0:	0f ef       	ldi	r16, 0xFF	; 255
			case 3: colour = COLOUR_GREEN; break;
     ae2:	10 ef       	ldi	r17, 0xF0	; 240
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
     ae4:	d5 e1       	ldi	r29, 0x15	; 21
	ledmatrix_clear();
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("TETRIS 43682225", colour);
     ae6:	6c 2f       	mov	r22, r28
     ae8:	83 e7       	ldi	r24, 0x73	; 115
     aea:	91 e0       	ldi	r25, 0x01	; 1
     aec:	0e 94 ba 06 	call	0xd74	; 0xd74 <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
     af0:	0d c0       	rjmp	.+26     	; 0xb0c <splash_screen+0x8e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     af2:	2f e7       	ldi	r18, 0x7F	; 127
     af4:	8c e2       	ldi	r24, 0x2C	; 44
     af6:	93 e0       	ldi	r25, 0x03	; 3
     af8:	21 50       	subi	r18, 0x01	; 1
     afa:	80 40       	sbci	r24, 0x00	; 0
     afc:	90 40       	sbci	r25, 0x00	; 0
     afe:	e1 f7       	brne	.-8      	; 0xaf8 <splash_screen+0x7a>
     b00:	00 c0       	rjmp	.+0      	; 0xb02 <splash_screen+0x84>
     b02:	00 00       	nop
			_delay_ms(130);
			if(button_pushed() != -1) {
     b04:	0e 94 8c 01 	call	0x318	; 0x318 <button_pushed>
     b08:	8f 3f       	cpi	r24, 0xFF	; 255
     b0a:	a9 f5       	brne	.+106    	; 0xb76 <splash_screen+0xf8>
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("TETRIS 43682225", colour);
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
     b0c:	0e 94 c9 06 	call	0xd92	; 0xd92 <scroll_display>
     b10:	81 11       	cpse	r24, r1
     b12:	ef cf       	rjmp	.-34     	; 0xaf2 <splash_screen+0x74>
				return;
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
     b14:	0e 94 19 0a 	call	0x1432	; 0x1432 <random>
     b18:	dc 01       	movw	r26, r24
     b1a:	cb 01       	movw	r24, r22
     b1c:	83 70       	andi	r24, 0x03	; 3
     b1e:	99 27       	eor	r25, r25
     b20:	aa 27       	eor	r26, r26
     b22:	b0 78       	andi	r27, 0x80	; 128
     b24:	bb 23       	and	r27, r27
     b26:	54 f4       	brge	.+20     	; 0xb3c <splash_screen+0xbe>
     b28:	01 97       	sbiw	r24, 0x01	; 1
     b2a:	a1 09       	sbc	r26, r1
     b2c:	b1 09       	sbc	r27, r1
     b2e:	8c 6f       	ori	r24, 0xFC	; 252
     b30:	9f 6f       	ori	r25, 0xFF	; 255
     b32:	af 6f       	ori	r26, 0xFF	; 255
     b34:	bf 6f       	ori	r27, 0xFF	; 255
     b36:	01 96       	adiw	r24, 0x01	; 1
     b38:	a1 1d       	adc	r26, r1
     b3a:	b1 1d       	adc	r27, r1
     b3c:	81 30       	cpi	r24, 0x01	; 1
     b3e:	91 05       	cpc	r25, r1
     b40:	a1 05       	cpc	r26, r1
     b42:	b1 05       	cpc	r27, r1
     b44:	91 f0       	breq	.+36     	; 0xb6a <splash_screen+0xec>
     b46:	2c f4       	brge	.+10     	; 0xb52 <splash_screen+0xd4>
     b48:	89 2b       	or	r24, r25
     b4a:	8a 2b       	or	r24, r26
     b4c:	8b 2b       	or	r24, r27
     b4e:	59 f0       	breq	.+22     	; 0xb66 <splash_screen+0xe8>
     b50:	ca cf       	rjmp	.-108    	; 0xae6 <splash_screen+0x68>
     b52:	82 30       	cpi	r24, 0x02	; 2
     b54:	91 05       	cpc	r25, r1
     b56:	a1 05       	cpc	r26, r1
     b58:	b1 05       	cpc	r27, r1
     b5a:	49 f0       	breq	.+18     	; 0xb6e <splash_screen+0xf0>
     b5c:	03 97       	sbiw	r24, 0x03	; 3
     b5e:	a1 05       	cpc	r26, r1
     b60:	b1 05       	cpc	r27, r1
     b62:	39 f0       	breq	.+14     	; 0xb72 <splash_screen+0xf4>
     b64:	c0 cf       	rjmp	.-128    	; 0xae6 <splash_screen+0x68>
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
     b66:	cd 2f       	mov	r28, r29
     b68:	be cf       	rjmp	.-132    	; 0xae6 <splash_screen+0x68>
			case 1: colour = COLOUR_RED; break;
     b6a:	cf 2d       	mov	r28, r15
     b6c:	bc cf       	rjmp	.-136    	; 0xae6 <splash_screen+0x68>
			case 2: colour = COLOUR_YELLOW; break;
     b6e:	c0 2f       	mov	r28, r16
     b70:	ba cf       	rjmp	.-140    	; 0xae6 <splash_screen+0x68>
			case 3: colour = COLOUR_GREEN; break;
     b72:	c1 2f       	mov	r28, r17
     b74:	b8 cf       	rjmp	.-144    	; 0xae6 <splash_screen+0x68>
		}
	}
}
     b76:	df 91       	pop	r29
     b78:	cf 91       	pop	r28
     b7a:	1f 91       	pop	r17
     b7c:	0f 91       	pop	r16
     b7e:	ff 90       	pop	r15
     b80:	08 95       	ret

00000b82 <new_game>:

void new_game(void) {
	// Initialise the game and display
	init_game();
     b82:	0e 94 4e 03 	call	0x69c	; 0x69c <init_game>
	
	// Clear the serial terminal
	clear_terminal();
     b86:	0e 94 20 09 	call	0x1240	; 0x1240 <clear_terminal>
	
	// Initialise the score
	init_score();
     b8a:	0e 94 b1 06 	call	0xd62	; 0xd62 <init_score>
	
	// Delete any pending button pushes or serial input
	empty_button_queue();
     b8e:	0e 94 89 01 	call	0x312	; 0x312 <empty_button_queue>
	clear_serial_input_buffer();
     b92:	0e 94 3f 08 	call	0x107e	; 0x107e <clear_serial_input_buffer>
     b96:	08 95       	ret

00000b98 <play_game>:
}

void play_game(void) {
     b98:	4f 92       	push	r4
     b9a:	5f 92       	push	r5
     b9c:	6f 92       	push	r6
     b9e:	7f 92       	push	r7
     ba0:	8f 92       	push	r8
     ba2:	9f 92       	push	r9
     ba4:	af 92       	push	r10
     ba6:	cf 92       	push	r12
     ba8:	df 92       	push	r13
     baa:	ef 92       	push	r14
     bac:	ff 92       	push	r15
     bae:	1f 93       	push	r17
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	
	// Record the last time a block was dropped as the current time -
	// this ensures we don't drop a block immediately.
	last_drop_time = get_clock_ticks();
     bb4:	0e 94 57 09 	call	0x12ae	; 0x12ae <get_clock_ticks>
     bb8:	6b 01       	movw	r12, r22
     bba:	7c 01       	movw	r14, r24

void play_game(void) {
	uint32_t last_drop_time;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
     bbc:	10 e0       	ldi	r17, 0x00	; 0
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     bbe:	df ef       	ldi	r29, 0xFF	; 255
		
		if(button == -1) {
			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
     bc0:	0f 2e       	mov	r0, r31
     bc2:	fb e4       	ldi	r31, 0x4B	; 75
     bc4:	8f 2e       	mov	r8, r31
     bc6:	f3 e0       	ldi	r31, 0x03	; 3
     bc8:	9f 2e       	mov	r9, r31
     bca:	f0 2d       	mov	r31, r0
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
     bcc:	68 94       	set
     bce:	aa 24       	eor	r10, r10
     bd0:	a1 f8       	bld	r10, 1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		button = button_pushed();
     bd2:	0e 94 8c 01 	call	0x318	; 0x318 <button_pushed>
     bd6:	c8 2f       	mov	r28, r24
		
		if(button == -1) {
     bd8:	8f 3f       	cpi	r24, 0xFF	; 255
     bda:	09 f0       	breq	.+2      	; 0xbde <play_game+0x46>
     bdc:	78 c0       	rjmp	.+240    	; 0xcce <play_game+0x136>
			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
     bde:	0e 94 38 08 	call	0x1070	; 0x1070 <serial_input_available>
     be2:	88 23       	and	r24, r24
     be4:	09 f4       	brne	.+2      	; 0xbe8 <play_game+0x50>
     be6:	52 c0       	rjmp	.+164    	; 0xc8c <play_game+0xf4>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
     be8:	f4 01       	movw	r30, r8
     bea:	80 81       	ld	r24, Z
     bec:	91 81       	ldd	r25, Z+1	; 0x01
     bee:	0e 94 27 0a 	call	0x144e	; 0x144e <fgetc>
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
     bf2:	11 11       	cpse	r17, r1
     bf4:	05 c0       	rjmp	.+10     	; 0xc00 <play_game+0x68>
     bf6:	8b 31       	cpi	r24, 0x1B	; 27
     bf8:	09 f4       	brne	.+2      	; 0xbfc <play_game+0x64>
     bfa:	65 c0       	rjmp	.+202    	; 0xcc6 <play_game+0x12e>
     bfc:	9d 2f       	mov	r25, r29
     bfe:	0c c0       	rjmp	.+24     	; 0xc18 <play_game+0x80>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
     c00:	11 30       	cpi	r17, 0x01	; 1
     c02:	29 f4       	brne	.+10     	; 0xc0e <play_game+0x76>
     c04:	8b 35       	cpi	r24, 0x5B	; 91
     c06:	09 f4       	brne	.+2      	; 0xc0a <play_game+0x72>
     c08:	60 c0       	rjmp	.+192    	; 0xcca <play_game+0x132>
     c0a:	9d 2f       	mov	r25, r29
     c0c:	05 c0       	rjmp	.+10     	; 0xc18 <play_game+0x80>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
     c0e:	12 30       	cpi	r17, 0x02	; 2
     c10:	09 f0       	breq	.+2      	; 0xc14 <play_game+0x7c>
     c12:	6b c0       	rjmp	.+214    	; 0xcea <play_game+0x152>
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
     c14:	98 2f       	mov	r25, r24
					serial_input = -1;  // Don't further process this character - we
     c16:	8d 2f       	mov	r24, r29
				}
			}
		}
		
		// Process the input. 
		if(button==3 || escape_sequence_char=='D') {
     c18:	94 34       	cpi	r25, 0x44	; 68
     c1a:	09 f0       	breq	.+2      	; 0xc1e <play_game+0x86>
     c1c:	5b c0       	rjmp	.+182    	; 0xcd4 <play_game+0x13c>
     c1e:	10 e0       	ldi	r17, 0x00	; 0
			// Attempt to move left
			(void)attempt_move(MOVE_LEFT);
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	0e 94 66 03 	call	0x6cc	; 0x6cc <attempt_move>
     c26:	32 c0       	rjmp	.+100    	; 0xc8c <play_game+0xf4>
     c28:	10 e0       	ldi	r17, 0x00	; 0
		} else if(button==0 || escape_sequence_char=='C') {
			// Attempt to move right
			(void)attempt_move(MOVE_RIGHT);
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	0e 94 66 03 	call	0x6cc	; 0x6cc <attempt_move>
     c30:	2d c0       	rjmp	.+90     	; 0xc8c <play_game+0xf4>
		} else if (button==2 || escape_sequence_char == 'A') {
     c32:	c2 30       	cpi	r28, 0x02	; 2
     c34:	11 f0       	breq	.+4      	; 0xc3a <play_game+0xa2>
     c36:	91 34       	cpi	r25, 0x41	; 65
     c38:	19 f4       	brne	.+6      	; 0xc40 <play_game+0xa8>
			// Attempt to rotate
			(void)attempt_rotation();
     c3a:	0e 94 10 04 	call	0x820	; 0x820 <attempt_rotation>
     c3e:	26 c0       	rjmp	.+76     	; 0xc8c <play_game+0xf4>
		} else if (button==1 || serial_input == ' ') {
     c40:	c1 30       	cpi	r28, 0x01	; 1
     c42:	19 f4       	brne	.+6      	; 0xc4a <play_game+0xb2>
     c44:	07 c0       	rjmp	.+14     	; 0xc54 <play_game+0xbc>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
     c46:	10 e0       	ldi	r17, 0x00	; 0
     c48:	05 c0       	rjmp	.+10     	; 0xc54 <play_game+0xbc>
			// Attempt to move right
			(void)attempt_move(MOVE_RIGHT);
		} else if (button==2 || escape_sequence_char == 'A') {
			// Attempt to rotate
			(void)attempt_rotation();
		} else if (button==1 || serial_input == ' ') {
     c4a:	80 32       	cpi	r24, 0x20	; 32
     c4c:	89 f4       	brne	.+34     	; 0xc70 <play_game+0xd8>
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <play_game+0xbc>
			// Attempt to drop block
			while(attempt_drop_block_one_row()){
				last_drop_time = get_clock_ticks();
     c50:	0e 94 57 09 	call	0x12ae	; 0x12ae <get_clock_ticks>
		} else if (button==2 || escape_sequence_char == 'A') {
			// Attempt to rotate
			(void)attempt_rotation();
		} else if (button==1 || serial_input == ' ') {
			// Attempt to drop block
			while(attempt_drop_block_one_row()){
     c54:	0e 94 bc 03 	call	0x778	; 0x778 <attempt_drop_block_one_row>
     c58:	81 11       	cpse	r24, r1
     c5a:	fa cf       	rjmp	.-12     	; 0xc50 <play_game+0xb8>
				last_drop_time = get_clock_ticks();
			}
			if(!fix_block_to_board_and_add_new_block()) {
     c5c:	0e 94 60 04 	call	0x8c0	; 0x8c0 <fix_block_to_board_and_add_new_block>
     c60:	88 23       	and	r24, r24
     c62:	09 f4       	brne	.+2      	; 0xc66 <play_game+0xce>
     c64:	47 c0       	rjmp	.+142    	; 0xcf4 <play_game+0x15c>
				break;	// GAME OVER
			}
			last_drop_time = get_clock_ticks();
     c66:	0e 94 57 09 	call	0x12ae	; 0x12ae <get_clock_ticks>
     c6a:	6b 01       	movw	r12, r22
     c6c:	7c 01       	movw	r14, r24
     c6e:	0e c0       	rjmp	.+28     	; 0xc8c <play_game+0xf4>
		}else if (escape_sequence_char == 'B'){
     c70:	92 34       	cpi	r25, 0x42	; 66
     c72:	61 f4       	brne	.+24     	; 0xc8c <play_game+0xf4>
			if(!attempt_drop_block_one_row()) {
     c74:	0e 94 bc 03 	call	0x778	; 0x778 <attempt_drop_block_one_row>
     c78:	81 11       	cpse	r24, r1
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <play_game+0xec>
                // Drop failed - fix block to board and add new block
                  if(!fix_block_to_board_and_add_new_block()) {
     c7c:	0e 94 60 04 	call	0x8c0	; 0x8c0 <fix_block_to_board_and_add_new_block>
     c80:	88 23       	and	r24, r24
     c82:	c1 f1       	breq	.+112    	; 0xcf4 <play_game+0x15c>
                      break;    // GAME OVER
                  }
              } 
               last_drop_time = get_clock_ticks();
     c84:	0e 94 57 09 	call	0x12ae	; 0x12ae <get_clock_ticks>
     c88:	6b 01       	movw	r12, r22
     c8a:	7c 01       	movw	r14, r24
		} 
		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		
		// Check for timer related events here
		if(get_clock_ticks() >= last_drop_time + 600) {
     c8c:	0e 94 57 09 	call	0x12ae	; 0x12ae <get_clock_ticks>
     c90:	26 01       	movw	r4, r12
     c92:	37 01       	movw	r6, r14
     c94:	f8 e5       	ldi	r31, 0x58	; 88
     c96:	4f 0e       	add	r4, r31
     c98:	f2 e0       	ldi	r31, 0x02	; 2
     c9a:	5f 1e       	adc	r5, r31
     c9c:	61 1c       	adc	r6, r1
     c9e:	71 1c       	adc	r7, r1
     ca0:	64 15       	cp	r22, r4
     ca2:	75 05       	cpc	r23, r5
     ca4:	86 05       	cpc	r24, r6
     ca6:	97 05       	cpc	r25, r7
     ca8:	08 f4       	brcc	.+2      	; 0xcac <play_game+0x114>
     caa:	93 cf       	rjmp	.-218    	; 0xbd2 <play_game+0x3a>
			// 600ms (0.6 second) has passed since the last time we dropped
			// a block, so drop it now.
			if(!attempt_drop_block_one_row()) {
     cac:	0e 94 bc 03 	call	0x778	; 0x778 <attempt_drop_block_one_row>
     cb0:	81 11       	cpse	r24, r1
     cb2:	04 c0       	rjmp	.+8      	; 0xcbc <play_game+0x124>
				// Drop failed - fix block to board and add new block
				if(!fix_block_to_board_and_add_new_block()) {
     cb4:	0e 94 60 04 	call	0x8c0	; 0x8c0 <fix_block_to_board_and_add_new_block>
     cb8:	88 23       	and	r24, r24
     cba:	e1 f0       	breq	.+56     	; 0xcf4 <play_game+0x15c>
					break;	// GAME OVER
				}
			}
			last_drop_time = get_clock_ticks();
     cbc:	0e 94 57 09 	call	0x12ae	; 0x12ae <get_clock_ticks>
     cc0:	6b 01       	movw	r12, r22
     cc2:	7c 01       	movw	r14, r24
     cc4:	86 cf       	rjmp	.-244    	; 0xbd2 <play_game+0x3a>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
     cc6:	11 e0       	ldi	r17, 0x01	; 1
     cc8:	e1 cf       	rjmp	.-62     	; 0xc8c <play_game+0xf4>
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
     cca:	1a 2d       	mov	r17, r10
     ccc:	df cf       	rjmp	.-66     	; 0xc8c <play_game+0xf4>
				}
			}
		}
		
		// Process the input. 
		if(button==3 || escape_sequence_char=='D') {
     cce:	83 30       	cpi	r24, 0x03	; 3
     cd0:	31 f4       	brne	.+12     	; 0xcde <play_game+0x146>
     cd2:	a6 cf       	rjmp	.-180    	; 0xc20 <play_game+0x88>
			// Attempt to move left
			(void)attempt_move(MOVE_LEFT);
		} else if(button==0 || escape_sequence_char=='C') {
     cd4:	93 34       	cpi	r25, 0x43	; 67
     cd6:	09 f4       	brne	.+2      	; 0xcda <play_game+0x142>
     cd8:	a7 cf       	rjmp	.-178    	; 0xc28 <play_game+0x90>
     cda:	10 e0       	ldi	r17, 0x00	; 0
     cdc:	aa cf       	rjmp	.-172    	; 0xc32 <play_game+0x9a>
     cde:	88 23       	and	r24, r24
     ce0:	09 f4       	brne	.+2      	; 0xce4 <play_game+0x14c>
     ce2:	a3 cf       	rjmp	.-186    	; 0xc2a <play_game+0x92>
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     ce4:	9d 2f       	mov	r25, r29
		// other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
     ce6:	8d 2f       	mov	r24, r29
     ce8:	a4 cf       	rjmp	.-184    	; 0xc32 <play_game+0x9a>
			// Attempt to move right
			(void)attempt_move(MOVE_RIGHT);
		} else if (button==2 || escape_sequence_char == 'A') {
			// Attempt to rotate
			(void)attempt_rotation();
		} else if (button==1 || serial_input == ' ') {
     cea:	80 32       	cpi	r24, 0x20	; 32
     cec:	09 f4       	brne	.+2      	; 0xcf0 <play_game+0x158>
     cee:	ab cf       	rjmp	.-170    	; 0xc46 <play_game+0xae>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
     cf0:	10 e0       	ldi	r17, 0x00	; 0
     cf2:	cc cf       	rjmp	.-104    	; 0xc8c <play_game+0xf4>
			}
			last_drop_time = get_clock_ticks();
		}
	}
	// If we get here the game is over. 
}
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	1f 91       	pop	r17
     cfa:	ff 90       	pop	r15
     cfc:	ef 90       	pop	r14
     cfe:	df 90       	pop	r13
     d00:	cf 90       	pop	r12
     d02:	af 90       	pop	r10
     d04:	9f 90       	pop	r9
     d06:	8f 90       	pop	r8
     d08:	7f 90       	pop	r7
     d0a:	6f 90       	pop	r6
     d0c:	5f 90       	pop	r5
     d0e:	4f 90       	pop	r4
     d10:	08 95       	ret

00000d12 <handle_game_over>:

void handle_game_over() {
	move_cursor(10,14);
     d12:	6e e0       	ldi	r22, 0x0E	; 14
     d14:	8a e0       	ldi	r24, 0x0A	; 10
     d16:	0e 94 07 09 	call	0x120e	; 0x120e <move_cursor>
	// Print a message to the terminal. 
	printf_P(PSTR("GAME OVER"));
     d1a:	8a e9       	ldi	r24, 0x9A	; 154
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	9f 93       	push	r25
     d20:	8f 93       	push	r24
     d22:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <printf_P>
	move_cursor(10,15);
     d26:	6f e0       	ldi	r22, 0x0F	; 15
     d28:	8a e0       	ldi	r24, 0x0A	; 10
     d2a:	0e 94 07 09 	call	0x120e	; 0x120e <move_cursor>
	printf_P(PSTR("Press a button to start again"));
     d2e:	8c e7       	ldi	r24, 0x7C	; 124
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	9f 93       	push	r25
     d34:	8f 93       	push	r24
     d36:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <printf_P>
	while(button_pushed() == -1) {
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	0f 90       	pop	r0
     d40:	0f 90       	pop	r0
     d42:	0e 94 8c 01 	call	0x318	; 0x318 <button_pushed>
     d46:	8f 3f       	cpi	r24, 0xFF	; 255
     d48:	e1 f3       	breq	.-8      	; 0xd42 <handle_game_over+0x30>
		; // wait until a button has been pushed
	}
	
     d4a:	08 95       	ret

00000d4c <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
     d4c:	0e 94 30 05 	call	0xa60	; 0xa60 <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
     d50:	0e 94 3f 05 	call	0xa7e	; 0xa7e <splash_screen>
	
	while(1) {
		new_game();
     d54:	0e 94 c1 05 	call	0xb82	; 0xb82 <new_game>
		play_game();
     d58:	0e 94 cc 05 	call	0xb98	; 0xb98 <play_game>
		handle_game_over();
     d5c:	0e 94 89 06 	call	0xd12	; 0xd12 <handle_game_over>
	}
     d60:	f9 cf       	rjmp	.-14     	; 0xd54 <main+0x8>

00000d62 <init_score>:
// modules should call the functions below to modify/access the
// variable.
static uint32_t score;

void init_score(void) {
	score = 0;
     d62:	10 92 8e 01 	sts	0x018E, r1
     d66:	10 92 8f 01 	sts	0x018F, r1
     d6a:	10 92 90 01 	sts	0x0190, r1
     d6e:	10 92 91 01 	sts	0x0191, r1
     d72:	08 95       	ret

00000d74 <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
     d74:	60 93 1f 01 	sts	0x011F, r22
	display_string = string_to_display;
     d78:	90 93 96 01 	sts	0x0196, r25
     d7c:	80 93 95 01 	sts	0x0195, r24
	next_col_ptr = 0;
     d80:	10 92 98 01 	sts	0x0198, r1
     d84:	10 92 97 01 	sts	0x0197, r1
	next_char_to_display = 0;
     d88:	10 92 94 01 	sts	0x0194, r1
     d8c:	10 92 93 01 	sts	0x0193, r1
     d90:	08 95       	ret

00000d92 <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
     d92:	0f 93       	push	r16
     d94:	1f 93       	push	r17
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
     d9e:	28 97       	sbiw	r28, 0x08	; 8
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
     daa:	e0 91 97 01 	lds	r30, 0x0197
     dae:	f0 91 98 01 	lds	r31, 0x0198
     db2:	30 97       	sbiw	r30, 0x00	; 0
     db4:	81 f0       	breq	.+32     	; 0xdd6 <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
     db6:	14 91       	lpm	r17, Z

		if(col_data & 1) {
     db8:	10 ff       	sbrs	r17, 0
     dba:	06 c0       	rjmp	.+12     	; 0xdc8 <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
     dbc:	10 92 98 01 	sts	0x0198, r1
     dc0:	10 92 97 01 	sts	0x0197, r1
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     dc4:	00 e0       	ldi	r16, 0x00	; 0
     dc6:	6b c0       	rjmp	.+214    	; 0xe9e <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
     dc8:	31 96       	adiw	r30, 0x01	; 1
     dca:	f0 93 98 01 	sts	0x0198, r31
     dce:	e0 93 97 01 	sts	0x0197, r30
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     dd2:	00 e0       	ldi	r16, 0x00	; 0
     dd4:	64 c0       	rjmp	.+200    	; 0xe9e <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
     dd6:	e0 91 93 01 	lds	r30, 0x0193
     dda:	f0 91 94 01 	lds	r31, 0x0194
     dde:	30 97       	sbiw	r30, 0x00	; 0
     de0:	09 f4       	brne	.+2      	; 0xde4 <scroll_display+0x52>
     de2:	49 c0       	rjmp	.+146    	; 0xe76 <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
     de4:	cf 01       	movw	r24, r30
     de6:	01 96       	adiw	r24, 0x01	; 1
     de8:	90 93 94 01 	sts	0x0194, r25
     dec:	80 93 93 01 	sts	0x0193, r24
     df0:	e0 81       	ld	r30, Z
		if(next_char == 0) {
     df2:	e1 11       	cpse	r30, r1
     df4:	0a c0       	rjmp	.+20     	; 0xe0a <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
     df6:	10 92 94 01 	sts	0x0194, r1
     dfa:	10 92 93 01 	sts	0x0193, r1
			shift_countdown = 16;
     dfe:	80 e1       	ldi	r24, 0x10	; 16
     e00:	80 93 92 01 	sts	0x0192, r24
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     e04:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     e06:	10 e0       	ldi	r17, 0x00	; 0
     e08:	4a c0       	rjmp	.+148    	; 0xe9e <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
     e0a:	8f e9       	ldi	r24, 0x9F	; 159
     e0c:	8e 0f       	add	r24, r30
     e0e:	8a 31       	cpi	r24, 0x1A	; 26
     e10:	70 f4       	brcc	.+28     	; 0xe2e <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	ee 0f       	add	r30, r30
     e16:	ff 1f       	adc	r31, r31
     e18:	e5 5d       	subi	r30, 0xD5	; 213
     e1a:	ff 4f       	sbci	r31, 0xFF	; 255
     e1c:	85 91       	lpm	r24, Z+
     e1e:	94 91       	lpm	r25, Z
     e20:	90 93 98 01 	sts	0x0198, r25
     e24:	80 93 97 01 	sts	0x0197, r24
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     e28:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     e2a:	10 e0       	ldi	r17, 0x00	; 0
     e2c:	38 c0       	rjmp	.+112    	; 0xe9e <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
     e2e:	8f eb       	ldi	r24, 0xBF	; 191
     e30:	8e 0f       	add	r24, r30
     e32:	8a 31       	cpi	r24, 0x1A	; 26
     e34:	70 f4       	brcc	.+28     	; 0xe52 <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	ee 0f       	add	r30, r30
     e3a:	ff 1f       	adc	r31, r31
     e3c:	e5 59       	subi	r30, 0x95	; 149
     e3e:	ff 4f       	sbci	r31, 0xFF	; 255
     e40:	85 91       	lpm	r24, Z+
     e42:	94 91       	lpm	r25, Z
     e44:	90 93 98 01 	sts	0x0198, r25
     e48:	80 93 97 01 	sts	0x0197, r24
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     e4c:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     e4e:	10 e0       	ldi	r17, 0x00	; 0
     e50:	26 c0       	rjmp	.+76     	; 0xe9e <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
     e52:	80 ed       	ldi	r24, 0xD0	; 208
     e54:	8e 0f       	add	r24, r30
     e56:	8a 30       	cpi	r24, 0x0A	; 10
     e58:	00 f5       	brcc	.+64     	; 0xe9a <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	ee 0f       	add	r30, r30
     e5e:	ff 1f       	adc	r31, r31
     e60:	e7 58       	subi	r30, 0x87	; 135
     e62:	ff 4f       	sbci	r31, 0xFF	; 255
     e64:	85 91       	lpm	r24, Z+
     e66:	94 91       	lpm	r25, Z
     e68:	90 93 98 01 	sts	0x0198, r25
     e6c:	80 93 97 01 	sts	0x0197, r24
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     e70:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     e72:	10 e0       	ldi	r17, 0x00	; 0
     e74:	14 c0       	rjmp	.+40     	; 0xe9e <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
     e76:	80 91 95 01 	lds	r24, 0x0195
     e7a:	90 91 96 01 	lds	r25, 0x0196
     e7e:	01 e0       	ldi	r16, 0x01	; 1
     e80:	00 97       	sbiw	r24, 0x00	; 0
     e82:	09 f0       	breq	.+2      	; 0xe86 <scroll_display+0xf4>
     e84:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
     e86:	90 93 94 01 	sts	0x0194, r25
     e8a:	80 93 93 01 	sts	0x0193, r24
		display_string = 0;
     e8e:	10 92 96 01 	sts	0x0196, r1
     e92:	10 92 95 01 	sts	0x0195, r1
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     e96:	10 e0       	ldi	r17, 0x00	; 0
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     e9a:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     e9c:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
     e9e:	0e 94 12 05 	call	0xa24	; 0xa24 <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
     ea2:	20 91 1f 01 	lds	r18, 0x011F
     ea6:	fe 01       	movw	r30, r28
     ea8:	38 96       	adiw	r30, 0x08	; 8
     eaa:	ce 01       	movw	r24, r28
     eac:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
     eae:	11 23       	and	r17, r17
     eb0:	14 f4       	brge	.+4      	; 0xeb6 <scroll_display+0x124>
			column_colour_data[i] = colour;
     eb2:	20 83       	st	Z, r18
     eb4:	01 c0       	rjmp	.+2      	; 0xeb8 <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
     eb6:	10 82       	st	Z, r1
		}
		col_data <<= 1;
     eb8:	11 0f       	add	r17, r17
     eba:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
     ebc:	e8 17       	cp	r30, r24
     ebe:	f9 07       	cpc	r31, r25
     ec0:	b1 f7       	brne	.-20     	; 0xeae <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
     ec2:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
     ec4:	be 01       	movw	r22, r28
     ec6:	6f 5f       	subi	r22, 0xFF	; 255
     ec8:	7f 4f       	sbci	r23, 0xFF	; 255
     eca:	8f e0       	ldi	r24, 0x0F	; 15
     ecc:	0e 94 f7 04 	call	0x9ee	; 0x9ee <ledmatrix_update_column>
	if(shift_countdown > 0) {
     ed0:	80 91 92 01 	lds	r24, 0x0192
     ed4:	88 23       	and	r24, r24
     ed6:	89 f0       	breq	.+34     	; 0xefa <scroll_display+0x168>
		shift_countdown--;
     ed8:	81 50       	subi	r24, 0x01	; 1
     eda:	80 93 92 01 	sts	0x0192, r24
	}
	finished = finished && (shift_countdown == 0);
     ede:	00 23       	and	r16, r16
     ee0:	11 f0       	breq	.+4      	; 0xee6 <scroll_display+0x154>
     ee2:	88 23       	and	r24, r24
     ee4:	11 f0       	breq	.+4      	; 0xeea <scroll_display+0x158>
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	03 c0       	rjmp	.+6      	; 0xef0 <scroll_display+0x15e>
     eea:	91 e0       	ldi	r25, 0x01	; 1
     eec:	01 c0       	rjmp	.+2      	; 0xef0 <scroll_display+0x15e>
     eee:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	99 23       	and	r25, r25
     ef4:	29 f0       	breq	.+10     	; 0xf00 <scroll_display+0x16e>
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	03 c0       	rjmp	.+6      	; 0xf00 <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
     efa:	01 11       	cpse	r16, r1
     efc:	f8 cf       	rjmp	.-16     	; 0xeee <scroll_display+0x15c>
     efe:	f3 cf       	rjmp	.-26     	; 0xee6 <scroll_display+0x154>
	return !finished;
}
     f00:	28 96       	adiw	r28, 0x08	; 8
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	f8 94       	cli
     f06:	de bf       	out	0x3e, r29	; 62
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	cd bf       	out	0x3d, r28	; 61
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	1f 91       	pop	r17
     f12:	0f 91       	pop	r16
     f14:	08 95       	ret

00000f16 <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
     f16:	cf 93       	push	r28
     f18:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
     f1a:	8a 30       	cpi	r24, 0x0A	; 10
     f1c:	19 f4       	brne	.+6      	; 0xf24 <uart_put_char+0xe>
		uart_put_char('\r', stream);
     f1e:	8d e0       	ldi	r24, 0x0D	; 13
     f20:	0e 94 8b 07 	call	0xf16	; 0xf16 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
     f24:	2f b7       	in	r18, 0x3f	; 63
     f26:	20 78       	andi	r18, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <uart_put_char+0x18>
		if(!interrupts_enabled) {
     f2a:	22 23       	and	r18, r18
     f2c:	29 f1       	breq	.+74     	; 0xf78 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     f2e:	90 91 38 02 	lds	r25, 0x0238
     f32:	9f 3f       	cpi	r25, 0xFF	; 255
     f34:	d1 f3       	breq	.-12     	; 0xf2a <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
     f36:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
     f38:	e0 91 37 02 	lds	r30, 0x0237
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	8e 0f       	add	r24, r30
     f40:	80 93 37 02 	sts	0x0237, r24
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	e7 5c       	subi	r30, 0xC7	; 199
     f48:	fd 4f       	sbci	r31, 0xFD	; 253
     f4a:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
     f4c:	80 91 38 02 	lds	r24, 0x0238
     f50:	8f 5f       	subi	r24, 0xFF	; 255
     f52:	80 93 38 02 	sts	0x0238, r24
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
     f56:	80 91 37 02 	lds	r24, 0x0237
     f5a:	8f 3f       	cpi	r24, 0xFF	; 255
     f5c:	11 f4       	brne	.+4      	; 0xf62 <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
     f5e:	10 92 37 02 	sts	0x0237, r1
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) */
	UCSR0B |= (1 << UDRIE0);
     f62:	e1 ec       	ldi	r30, 0xC1	; 193
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	80 62       	ori	r24, 0x20	; 32
     f6a:	80 83       	st	Z, r24
	if(interrupts_enabled) {
     f6c:	22 23       	and	r18, r18
     f6e:	39 f0       	breq	.+14     	; 0xf7e <uart_put_char+0x68>
		sei();
     f70:	78 94       	sei
	}
	return 0;
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	05 c0       	rjmp	.+10     	; 0xf82 <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <uart_put_char+0x6c>
	 * disabled) */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	90 e0       	ldi	r25, 0x00	; 0
}
     f82:	cf 91       	pop	r28
     f84:	08 95       	ret

00000f86 <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
     f86:	80 91 4a 03 	lds	r24, 0x034A
     f8a:	88 23       	and	r24, r24
     f8c:	e1 f3       	breq	.-8      	; 0xf86 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
     f8e:	2f b7       	in	r18, 0x3f	; 63
     f90:	20 78       	andi	r18, 0x80	; 128
	cli();
     f92:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
     f94:	80 91 38 03 	lds	r24, 0x0338
     f98:	30 91 4a 03 	lds	r19, 0x034A
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	83 1b       	sub	r24, r19
     fa0:	91 09       	sbc	r25, r1
     fa2:	5a f4       	brpl	.+22     	; 0xfba <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
     fa4:	e0 91 38 03 	lds	r30, 0x0338
     fa8:	80 91 4a 03 	lds	r24, 0x034A
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	e8 1b       	sub	r30, r24
     fb0:	f1 09       	sbc	r31, r1
     fb2:	e7 5b       	subi	r30, 0xB7	; 183
     fb4:	fc 4f       	sbci	r31, 0xFC	; 252
     fb6:	80 81       	ld	r24, Z
     fb8:	0a c0       	rjmp	.+20     	; 0xfce <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
     fba:	e0 91 38 03 	lds	r30, 0x0338
     fbe:	80 91 4a 03 	lds	r24, 0x034A
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	e8 1b       	sub	r30, r24
     fc6:	f1 09       	sbc	r31, r1
     fc8:	e7 5c       	subi	r30, 0xC7	; 199
     fca:	fc 4f       	sbci	r31, 0xFC	; 252
     fcc:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
     fce:	90 91 4a 03 	lds	r25, 0x034A
     fd2:	91 50       	subi	r25, 0x01	; 1
     fd4:	90 93 4a 03 	sts	0x034A, r25
	if(interrupts_enabled) {
     fd8:	22 23       	and	r18, r18
     fda:	09 f0       	breq	.+2      	; 0xfde <uart_get_char+0x58>
		sei();
     fdc:	78 94       	sei
	}	
	return c;
}
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	08 95       	ret

00000fe2 <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
     fe2:	10 92 37 02 	sts	0x0237, r1
	bytes_in_out_buffer = 0;
     fe6:	10 92 38 02 	sts	0x0238, r1
	input_insert_pos = 0;
     fea:	10 92 38 03 	sts	0x0338, r1
	bytes_in_input_buffer = 0;
     fee:	10 92 4a 03 	sts	0x034A, r1
	input_overrun = 0;
     ff2:	10 92 49 03 	sts	0x0349, r1
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
     ff6:	40 93 99 01 	sts	0x0199, r20
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
     ffa:	dc 01       	movw	r26, r24
     ffc:	cb 01       	movw	r24, r22
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	aa 1f       	adc	r26, r26
    1004:	bb 1f       	adc	r27, r27
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	aa 1f       	adc	r26, r26
    100c:	bb 1f       	adc	r27, r27
    100e:	9c 01       	movw	r18, r24
    1010:	ad 01       	movw	r20, r26
    1012:	22 0f       	add	r18, r18
    1014:	33 1f       	adc	r19, r19
    1016:	44 1f       	adc	r20, r20
    1018:	55 1f       	adc	r21, r21
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	72 e1       	ldi	r23, 0x12	; 18
    101e:	8a e7       	ldi	r24, 0x7A	; 122
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	0e 94 8a 09 	call	0x1314	; 0x1314 <__divmodsi4>
    1026:	ba 01       	movw	r22, r20
    1028:	a9 01       	movw	r20, r18
    102a:	4f 5f       	subi	r20, 0xFF	; 255
    102c:	5f 4f       	sbci	r21, 0xFF	; 255
    102e:	6f 4f       	sbci	r22, 0xFF	; 255
    1030:	7f 4f       	sbci	r23, 0xFF	; 255
    1032:	db 01       	movw	r26, r22
    1034:	ca 01       	movw	r24, r20
    1036:	1a f4       	brpl	.+6      	; 0x103e <init_serial_stdio+0x5c>
    1038:	01 96       	adiw	r24, 0x01	; 1
    103a:	a1 1d       	adc	r26, r1
    103c:	b1 1d       	adc	r27, r1
    103e:	b5 95       	asr	r27
    1040:	a7 95       	ror	r26
    1042:	97 95       	ror	r25
    1044:	87 95       	ror	r24
    1046:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    1048:	90 93 c5 00 	sts	0x00C5, r25
    104c:	80 93 c4 00 	sts	0x00C4, r24
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1050:	e1 ec       	ldi	r30, 0xC1	; 193
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	88 e1       	ldi	r24, 0x18	; 24
    1056:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    1058:	80 81       	ld	r24, Z
    105a:	80 68       	ori	r24, 0x80	; 128
    105c:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    105e:	eb e4       	ldi	r30, 0x4B	; 75
    1060:	f3 e0       	ldi	r31, 0x03	; 3
    1062:	80 e2       	ldi	r24, 0x20	; 32
    1064:	91 e0       	ldi	r25, 0x01	; 1
    1066:	93 83       	std	Z+3, r25	; 0x03
    1068:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    106a:	91 83       	std	Z+1, r25	; 0x01
    106c:	80 83       	st	Z, r24
    106e:	08 95       	ret

00001070 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    1070:	90 91 4a 03 	lds	r25, 0x034A
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	91 11       	cpse	r25, r1
    1078:	01 c0       	rjmp	.+2      	; 0x107c <serial_input_available+0xc>
    107a:	80 e0       	ldi	r24, 0x00	; 0
}
    107c:	08 95       	ret

0000107e <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    107e:	10 92 38 03 	sts	0x0338, r1
	bytes_in_input_buffer = 0;
    1082:	10 92 4a 03 	sts	0x034A, r1
    1086:	08 95       	ret

00001088 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    1088:	1f 92       	push	r1
    108a:	0f 92       	push	r0
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	0f 92       	push	r0
    1090:	11 24       	eor	r1, r1
    1092:	2f 93       	push	r18
    1094:	8f 93       	push	r24
    1096:	9f 93       	push	r25
    1098:	ef 93       	push	r30
    109a:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    109c:	80 91 38 02 	lds	r24, 0x0238
    10a0:	88 23       	and	r24, r24
    10a2:	29 f1       	breq	.+74     	; 0x10ee <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    10a4:	80 91 37 02 	lds	r24, 0x0237
    10a8:	20 91 38 02 	lds	r18, 0x0238
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	82 1b       	sub	r24, r18
    10b0:	91 09       	sbc	r25, r1
    10b2:	5a f4       	brpl	.+22     	; 0x10ca <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    10b4:	e0 91 37 02 	lds	r30, 0x0237
    10b8:	80 91 38 02 	lds	r24, 0x0238
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	e8 1b       	sub	r30, r24
    10c0:	f1 09       	sbc	r31, r1
    10c2:	e8 5c       	subi	r30, 0xC8	; 200
    10c4:	fc 4f       	sbci	r31, 0xFC	; 252
    10c6:	90 81       	ld	r25, Z
    10c8:	0a c0       	rjmp	.+20     	; 0x10de <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    10ca:	e0 91 37 02 	lds	r30, 0x0237
    10ce:	80 91 38 02 	lds	r24, 0x0238
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	e8 1b       	sub	r30, r24
    10d6:	f1 09       	sbc	r31, r1
    10d8:	e7 5c       	subi	r30, 0xC7	; 199
    10da:	fd 4f       	sbci	r31, 0xFD	; 253
    10dc:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    10de:	80 91 38 02 	lds	r24, 0x0238
    10e2:	81 50       	subi	r24, 0x01	; 1
    10e4:	80 93 38 02 	sts	0x0238, r24
		
		/* Output the character via the UART */
		UDR0 = c;
    10e8:	90 93 c6 00 	sts	0x00C6, r25
    10ec:	05 c0       	rjmp	.+10     	; 0x10f8 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    10ee:	e1 ec       	ldi	r30, 0xC1	; 193
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	8f 7d       	andi	r24, 0xDF	; 223
    10f6:	80 83       	st	Z, r24
	}
}
    10f8:	ff 91       	pop	r31
    10fa:	ef 91       	pop	r30
    10fc:	9f 91       	pop	r25
    10fe:	8f 91       	pop	r24
    1100:	2f 91       	pop	r18
    1102:	0f 90       	pop	r0
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	0f 90       	pop	r0
    1108:	1f 90       	pop	r1
    110a:	18 95       	reti

0000110c <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    110c:	1f 92       	push	r1
    110e:	0f 92       	push	r0
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	0f 92       	push	r0
    1114:	11 24       	eor	r1, r1
    1116:	2f 93       	push	r18
    1118:	3f 93       	push	r19
    111a:	4f 93       	push	r20
    111c:	5f 93       	push	r21
    111e:	6f 93       	push	r22
    1120:	7f 93       	push	r23
    1122:	8f 93       	push	r24
    1124:	9f 93       	push	r25
    1126:	af 93       	push	r26
    1128:	bf 93       	push	r27
    112a:	cf 93       	push	r28
    112c:	ef 93       	push	r30
    112e:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    1130:	c0 91 c6 00 	lds	r28, 0x00C6
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    1134:	80 91 99 01 	lds	r24, 0x0199
    1138:	88 23       	and	r24, r24
    113a:	49 f0       	breq	.+18     	; 0x114e <__vector_20+0x42>
    113c:	80 91 38 02 	lds	r24, 0x0238
    1140:	8f 3f       	cpi	r24, 0xFF	; 255
    1142:	29 f0       	breq	.+10     	; 0x114e <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    1144:	60 e0       	ldi	r22, 0x00	; 0
    1146:	70 e0       	ldi	r23, 0x00	; 0
    1148:	8c 2f       	mov	r24, r28
    114a:	0e 94 8b 07 	call	0xf16	; 0xf16 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    114e:	80 91 4a 03 	lds	r24, 0x034A
    1152:	80 31       	cpi	r24, 0x10	; 16
    1154:	20 f0       	brcs	.+8      	; 0x115e <__vector_20+0x52>
		input_overrun = 1;
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	80 93 49 03 	sts	0x0349, r24
    115c:	18 c0       	rjmp	.+48     	; 0x118e <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    115e:	cd 30       	cpi	r28, 0x0D	; 13
    1160:	09 f4       	brne	.+2      	; 0x1164 <__vector_20+0x58>
			c = '\n';
    1162:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    1164:	e0 91 38 03 	lds	r30, 0x0338
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	8e 0f       	add	r24, r30
    116c:	80 93 38 03 	sts	0x0338, r24
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	e7 5c       	subi	r30, 0xC7	; 199
    1174:	fc 4f       	sbci	r31, 0xFC	; 252
    1176:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    1178:	80 91 4a 03 	lds	r24, 0x034A
    117c:	8f 5f       	subi	r24, 0xFF	; 255
    117e:	80 93 4a 03 	sts	0x034A, r24
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    1182:	80 91 38 03 	lds	r24, 0x0338
    1186:	80 31       	cpi	r24, 0x10	; 16
    1188:	11 f4       	brne	.+4      	; 0x118e <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    118a:	10 92 38 03 	sts	0x0338, r1
		}
	}
}
    118e:	ff 91       	pop	r31
    1190:	ef 91       	pop	r30
    1192:	cf 91       	pop	r28
    1194:	bf 91       	pop	r27
    1196:	af 91       	pop	r26
    1198:	9f 91       	pop	r25
    119a:	8f 91       	pop	r24
    119c:	7f 91       	pop	r23
    119e:	6f 91       	pop	r22
    11a0:	5f 91       	pop	r21
    11a2:	4f 91       	pop	r20
    11a4:	3f 91       	pop	r19
    11a6:	2f 91       	pop	r18
    11a8:	0f 90       	pop	r0
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	0f 90       	pop	r0
    11ae:	1f 90       	pop	r1
    11b0:	18 95       	reti

000011b2 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    11b2:	94 b1       	in	r25, 0x04	; 4
    11b4:	90 6b       	ori	r25, 0xB0	; 176
    11b6:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    11b8:	2c 9a       	sbi	0x05, 4	; 5
	// from datasheet names for these registers/bits.)
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    11ba:	90 e5       	ldi	r25, 0x50	; 80
    11bc:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    11be:	88 30       	cpi	r24, 0x08	; 8
    11c0:	21 f0       	breq	.+8      	; 0x11ca <spi_setup_master+0x18>
    11c2:	80 32       	cpi	r24, 0x20	; 32
    11c4:	11 f0       	breq	.+4      	; 0x11ca <spi_setup_master+0x18>
    11c6:	82 30       	cpi	r24, 0x02	; 2
    11c8:	19 f4       	brne	.+6      	; 0x11d0 <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    11ca:	91 e0       	ldi	r25, 0x01	; 1
    11cc:	9d bd       	out	0x2d, r25	; 45
			break;
    11ce:	01 c0       	rjmp	.+2      	; 0x11d2 <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    11d0:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    11d2:	80 32       	cpi	r24, 0x20	; 32
    11d4:	69 f0       	breq	.+26     	; 0x11f0 <spi_setup_master+0x3e>
    11d6:	28 f4       	brcc	.+10     	; 0x11e2 <spi_setup_master+0x30>
    11d8:	88 30       	cpi	r24, 0x08	; 8
    11da:	71 f0       	breq	.+28     	; 0x11f8 <spi_setup_master+0x46>
    11dc:	80 31       	cpi	r24, 0x10	; 16
    11de:	61 f0       	breq	.+24     	; 0x11f8 <spi_setup_master+0x46>
    11e0:	0e c0       	rjmp	.+28     	; 0x11fe <spi_setup_master+0x4c>
    11e2:	80 34       	cpi	r24, 0x40	; 64
    11e4:	29 f0       	breq	.+10     	; 0x11f0 <spi_setup_master+0x3e>
    11e6:	80 38       	cpi	r24, 0x80	; 128
    11e8:	51 f4       	brne	.+20     	; 0x11fe <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    11ea:	8c b5       	in	r24, 0x2c	; 44
    11ec:	81 60       	ori	r24, 0x01	; 1
    11ee:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    11f0:	8c b5       	in	r24, 0x2c	; 44
    11f2:	82 60       	ori	r24, 0x02	; 2
    11f4:	8c bd       	out	0x2c, r24	; 44
			break;
    11f6:	03 c0       	rjmp	.+6      	; 0x11fe <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    11f8:	8c b5       	in	r24, 0x2c	; 44
    11fa:	81 60       	ori	r24, 0x01	; 1
    11fc:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    11fe:	2c 98       	cbi	0x05, 4	; 5
    1200:	08 95       	ret

00001202 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR (SPIF bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR followed by a read of SPDR
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    1202:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    1204:	0d b4       	in	r0, 0x2d	; 45
    1206:	07 fe       	sbrs	r0, 7
    1208:	fd cf       	rjmp	.-6      	; 0x1204 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    120a:	8e b5       	in	r24, 0x2e	; 46
    120c:	08 95       	ret

0000120e <move_cursor>:
void clear_terminal(void) {
	printf_P(PSTR("\x1b[2J"));
}

void clear_to_end_of_line(void) {
	printf_P(PSTR("\x1b[K"));
    120e:	28 2f       	mov	r18, r24
    1210:	08 2e       	mov	r0, r24
    1212:	00 0c       	add	r0, r0
    1214:	33 0b       	sbc	r19, r19
    1216:	3f 93       	push	r19
    1218:	8f 93       	push	r24
    121a:	86 2f       	mov	r24, r22
    121c:	06 2e       	mov	r0, r22
    121e:	00 0c       	add	r0, r0
    1220:	99 0b       	sbc	r25, r25
    1222:	9f 93       	push	r25
    1224:	6f 93       	push	r22
    1226:	89 ec       	ldi	r24, 0xC9	; 201
    1228:	91 e0       	ldi	r25, 0x01	; 1
    122a:	9f 93       	push	r25
    122c:	8f 93       	push	r24
    122e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <printf_P>
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	08 95       	ret

00001240 <clear_terminal>:
    1240:	84 ec       	ldi	r24, 0xC4	; 196
    1242:	91 e0       	ldi	r25, 0x01	; 1
    1244:	9f 93       	push	r25
    1246:	8f 93       	push	r24
    1248:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <printf_P>
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	08 95       	ret

00001252 <set_display_attribute>:
}

void set_display_attribute(DisplayParameter parameter) {
	printf_P(PSTR("\x1b[%dm"), parameter);
    1252:	1f 92       	push	r1
    1254:	8f 93       	push	r24
    1256:	8e eb       	ldi	r24, 0xBE	; 190
    1258:	91 e0       	ldi	r25, 0x01	; 1
    125a:	9f 93       	push	r25
    125c:	8f 93       	push	r24
    125e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <printf_P>
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	08 95       	ret

0000126c <hide_cursor>:
}

void hide_cursor() {
	printf_P(PSTR("\x1b[?25l"));
    126c:	87 eb       	ldi	r24, 0xB7	; 183
    126e:	91 e0       	ldi	r25, 0x01	; 1
    1270:	9f 93       	push	r25
    1272:	8f 93       	push	r24
    1274:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <printf_P>
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	08 95       	ret

0000127e <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clock_ticks = 0L;
    127e:	10 92 9a 01 	sts	0x019A, r1
    1282:	10 92 9b 01 	sts	0x019B, r1
    1286:	10 92 9c 01 	sts	0x019C, r1
    128a:	10 92 9d 01 	sts	0x019D, r1
	
	/* Clear the timer */
	TCNT0 = 0;
    128e:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    1290:	8c e7       	ldi	r24, 0x7C	; 124
    1292:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    1294:	82 e0       	ldi	r24, 0x02	; 2
    1296:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    1298:	83 e0       	ldi	r24, 0x03	; 3
    129a:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    129c:	ee e6       	ldi	r30, 0x6E	; 110
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	82 60       	ori	r24, 0x02	; 2
    12a4:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    12a6:	85 b3       	in	r24, 0x15	; 21
    12a8:	82 70       	andi	r24, 0x02	; 2
    12aa:	85 bb       	out	0x15, r24	; 21
    12ac:	08 95       	ret

000012ae <get_clock_ticks>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_on = bit_is_set(SREG, SREG_I);
    12ae:	2f b7       	in	r18, 0x3f	; 63
	cli();
    12b0:	f8 94       	cli
	return_value = clock_ticks;
    12b2:	60 91 9a 01 	lds	r22, 0x019A
    12b6:	70 91 9b 01 	lds	r23, 0x019B
    12ba:	80 91 9c 01 	lds	r24, 0x019C
    12be:	90 91 9d 01 	lds	r25, 0x019D
	if(interrupts_were_on) {
    12c2:	22 23       	and	r18, r18
    12c4:	0c f4       	brge	.+2      	; 0x12c8 <get_clock_ticks+0x1a>
		sei();
    12c6:	78 94       	sei
	}
	return return_value;
}
    12c8:	08 95       	ret

000012ca <__vector_16>:

/* Interrupt handler which fires when timer/counter 0 reaches 
 * the defined output compare value (every millisecond)
 */
ISR(TIMER0_COMPA_vect) {
    12ca:	1f 92       	push	r1
    12cc:	0f 92       	push	r0
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	0f 92       	push	r0
    12d2:	11 24       	eor	r1, r1
    12d4:	8f 93       	push	r24
    12d6:	9f 93       	push	r25
    12d8:	af 93       	push	r26
    12da:	bf 93       	push	r27
	/* Increment our clock tick count */
	clock_ticks++;
    12dc:	80 91 9a 01 	lds	r24, 0x019A
    12e0:	90 91 9b 01 	lds	r25, 0x019B
    12e4:	a0 91 9c 01 	lds	r26, 0x019C
    12e8:	b0 91 9d 01 	lds	r27, 0x019D
    12ec:	01 96       	adiw	r24, 0x01	; 1
    12ee:	a1 1d       	adc	r26, r1
    12f0:	b1 1d       	adc	r27, r1
    12f2:	80 93 9a 01 	sts	0x019A, r24
    12f6:	90 93 9b 01 	sts	0x019B, r25
    12fa:	a0 93 9c 01 	sts	0x019C, r26
    12fe:	b0 93 9d 01 	sts	0x019D, r27
}
    1302:	bf 91       	pop	r27
    1304:	af 91       	pop	r26
    1306:	9f 91       	pop	r25
    1308:	8f 91       	pop	r24
    130a:	0f 90       	pop	r0
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	0f 90       	pop	r0
    1310:	1f 90       	pop	r1
    1312:	18 95       	reti

00001314 <__divmodsi4>:
    1314:	05 2e       	mov	r0, r21
    1316:	97 fb       	bst	r25, 7
    1318:	1e f4       	brtc	.+6      	; 0x1320 <__divmodsi4+0xc>
    131a:	00 94       	com	r0
    131c:	0e 94 a1 09 	call	0x1342	; 0x1342 <__negsi2>
    1320:	57 fd       	sbrc	r21, 7
    1322:	07 d0       	rcall	.+14     	; 0x1332 <__divmodsi4_neg2>
    1324:	0e 94 a9 09 	call	0x1352	; 0x1352 <__udivmodsi4>
    1328:	07 fc       	sbrc	r0, 7
    132a:	03 d0       	rcall	.+6      	; 0x1332 <__divmodsi4_neg2>
    132c:	4e f4       	brtc	.+18     	; 0x1340 <__divmodsi4_exit>
    132e:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <__negsi2>

00001332 <__divmodsi4_neg2>:
    1332:	50 95       	com	r21
    1334:	40 95       	com	r20
    1336:	30 95       	com	r19
    1338:	21 95       	neg	r18
    133a:	3f 4f       	sbci	r19, 0xFF	; 255
    133c:	4f 4f       	sbci	r20, 0xFF	; 255
    133e:	5f 4f       	sbci	r21, 0xFF	; 255

00001340 <__divmodsi4_exit>:
    1340:	08 95       	ret

00001342 <__negsi2>:
    1342:	90 95       	com	r25
    1344:	80 95       	com	r24
    1346:	70 95       	com	r23
    1348:	61 95       	neg	r22
    134a:	7f 4f       	sbci	r23, 0xFF	; 255
    134c:	8f 4f       	sbci	r24, 0xFF	; 255
    134e:	9f 4f       	sbci	r25, 0xFF	; 255
    1350:	08 95       	ret

00001352 <__udivmodsi4>:
    1352:	a1 e2       	ldi	r26, 0x21	; 33
    1354:	1a 2e       	mov	r1, r26
    1356:	aa 1b       	sub	r26, r26
    1358:	bb 1b       	sub	r27, r27
    135a:	fd 01       	movw	r30, r26
    135c:	0d c0       	rjmp	.+26     	; 0x1378 <__udivmodsi4_ep>

0000135e <__udivmodsi4_loop>:
    135e:	aa 1f       	adc	r26, r26
    1360:	bb 1f       	adc	r27, r27
    1362:	ee 1f       	adc	r30, r30
    1364:	ff 1f       	adc	r31, r31
    1366:	a2 17       	cp	r26, r18
    1368:	b3 07       	cpc	r27, r19
    136a:	e4 07       	cpc	r30, r20
    136c:	f5 07       	cpc	r31, r21
    136e:	20 f0       	brcs	.+8      	; 0x1378 <__udivmodsi4_ep>
    1370:	a2 1b       	sub	r26, r18
    1372:	b3 0b       	sbc	r27, r19
    1374:	e4 0b       	sbc	r30, r20
    1376:	f5 0b       	sbc	r31, r21

00001378 <__udivmodsi4_ep>:
    1378:	66 1f       	adc	r22, r22
    137a:	77 1f       	adc	r23, r23
    137c:	88 1f       	adc	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	1a 94       	dec	r1
    1382:	69 f7       	brne	.-38     	; 0x135e <__udivmodsi4_loop>
    1384:	60 95       	com	r22
    1386:	70 95       	com	r23
    1388:	80 95       	com	r24
    138a:	90 95       	com	r25
    138c:	9b 01       	movw	r18, r22
    138e:	ac 01       	movw	r20, r24
    1390:	bd 01       	movw	r22, r26
    1392:	cf 01       	movw	r24, r30
    1394:	08 95       	ret

00001396 <do_random>:
    1396:	8f 92       	push	r8
    1398:	9f 92       	push	r9
    139a:	af 92       	push	r10
    139c:	bf 92       	push	r11
    139e:	cf 92       	push	r12
    13a0:	df 92       	push	r13
    13a2:	ef 92       	push	r14
    13a4:	ff 92       	push	r15
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	ec 01       	movw	r28, r24
    13ac:	68 81       	ld	r22, Y
    13ae:	79 81       	ldd	r23, Y+1	; 0x01
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	9b 81       	ldd	r25, Y+3	; 0x03
    13b4:	61 15       	cp	r22, r1
    13b6:	71 05       	cpc	r23, r1
    13b8:	81 05       	cpc	r24, r1
    13ba:	91 05       	cpc	r25, r1
    13bc:	21 f4       	brne	.+8      	; 0x13c6 <do_random+0x30>
    13be:	64 e2       	ldi	r22, 0x24	; 36
    13c0:	79 ed       	ldi	r23, 0xD9	; 217
    13c2:	8b e5       	ldi	r24, 0x5B	; 91
    13c4:	97 e0       	ldi	r25, 0x07	; 7
    13c6:	2d e1       	ldi	r18, 0x1D	; 29
    13c8:	33 ef       	ldi	r19, 0xF3	; 243
    13ca:	41 e0       	ldi	r20, 0x01	; 1
    13cc:	50 e0       	ldi	r21, 0x00	; 0
    13ce:	0e 94 8a 09 	call	0x1314	; 0x1314 <__divmodsi4>
    13d2:	49 01       	movw	r8, r18
    13d4:	5a 01       	movw	r10, r20
    13d6:	9b 01       	movw	r18, r22
    13d8:	ac 01       	movw	r20, r24
    13da:	a7 ea       	ldi	r26, 0xA7	; 167
    13dc:	b1 e4       	ldi	r27, 0x41	; 65
    13de:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__muluhisi3>
    13e2:	6b 01       	movw	r12, r22
    13e4:	7c 01       	movw	r14, r24
    13e6:	ac ee       	ldi	r26, 0xEC	; 236
    13e8:	b4 ef       	ldi	r27, 0xF4	; 244
    13ea:	a5 01       	movw	r20, r10
    13ec:	94 01       	movw	r18, r8
    13ee:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <__mulohisi3>
    13f2:	dc 01       	movw	r26, r24
    13f4:	cb 01       	movw	r24, r22
    13f6:	8c 0d       	add	r24, r12
    13f8:	9d 1d       	adc	r25, r13
    13fa:	ae 1d       	adc	r26, r14
    13fc:	bf 1d       	adc	r27, r15
    13fe:	b7 ff       	sbrs	r27, 7
    1400:	03 c0       	rjmp	.+6      	; 0x1408 <do_random+0x72>
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	a1 09       	sbc	r26, r1
    1406:	b0 48       	sbci	r27, 0x80	; 128
    1408:	88 83       	st	Y, r24
    140a:	99 83       	std	Y+1, r25	; 0x01
    140c:	aa 83       	std	Y+2, r26	; 0x02
    140e:	bb 83       	std	Y+3, r27	; 0x03
    1410:	bc 01       	movw	r22, r24
    1412:	cd 01       	movw	r24, r26
    1414:	9f 77       	andi	r25, 0x7F	; 127
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	ff 90       	pop	r15
    141c:	ef 90       	pop	r14
    141e:	df 90       	pop	r13
    1420:	cf 90       	pop	r12
    1422:	bf 90       	pop	r11
    1424:	af 90       	pop	r10
    1426:	9f 90       	pop	r9
    1428:	8f 90       	pop	r8
    142a:	08 95       	ret

0000142c <random_r>:
    142c:	0e 94 cb 09 	call	0x1396	; 0x1396 <do_random>
    1430:	08 95       	ret

00001432 <random>:
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	91 e0       	ldi	r25, 0x01	; 1
    1436:	0e 94 cb 09 	call	0x1396	; 0x1396 <do_random>
    143a:	08 95       	ret

0000143c <srandom>:
    143c:	60 93 00 01 	sts	0x0100, r22
    1440:	70 93 01 01 	sts	0x0101, r23
    1444:	80 93 02 01 	sts	0x0102, r24
    1448:	90 93 03 01 	sts	0x0103, r25
    144c:	08 95       	ret

0000144e <fgetc>:
    144e:	cf 93       	push	r28
    1450:	df 93       	push	r29
    1452:	ec 01       	movw	r28, r24
    1454:	2b 81       	ldd	r18, Y+3	; 0x03
    1456:	20 ff       	sbrs	r18, 0
    1458:	33 c0       	rjmp	.+102    	; 0x14c0 <fgetc+0x72>
    145a:	26 ff       	sbrs	r18, 6
    145c:	0a c0       	rjmp	.+20     	; 0x1472 <fgetc+0x24>
    145e:	2f 7b       	andi	r18, 0xBF	; 191
    1460:	2b 83       	std	Y+3, r18	; 0x03
    1462:	8e 81       	ldd	r24, Y+6	; 0x06
    1464:	9f 81       	ldd	r25, Y+7	; 0x07
    1466:	01 96       	adiw	r24, 0x01	; 1
    1468:	9f 83       	std	Y+7, r25	; 0x07
    146a:	8e 83       	std	Y+6, r24	; 0x06
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	29 c0       	rjmp	.+82     	; 0x14c4 <fgetc+0x76>
    1472:	22 ff       	sbrs	r18, 2
    1474:	0f c0       	rjmp	.+30     	; 0x1494 <fgetc+0x46>
    1476:	e8 81       	ld	r30, Y
    1478:	f9 81       	ldd	r31, Y+1	; 0x01
    147a:	80 81       	ld	r24, Z
    147c:	08 2e       	mov	r0, r24
    147e:	00 0c       	add	r0, r0
    1480:	99 0b       	sbc	r25, r25
    1482:	00 97       	sbiw	r24, 0x00	; 0
    1484:	19 f4       	brne	.+6      	; 0x148c <fgetc+0x3e>
    1486:	20 62       	ori	r18, 0x20	; 32
    1488:	2b 83       	std	Y+3, r18	; 0x03
    148a:	1a c0       	rjmp	.+52     	; 0x14c0 <fgetc+0x72>
    148c:	31 96       	adiw	r30, 0x01	; 1
    148e:	f9 83       	std	Y+1, r31	; 0x01
    1490:	e8 83       	st	Y, r30
    1492:	0e c0       	rjmp	.+28     	; 0x14b0 <fgetc+0x62>
    1494:	ea 85       	ldd	r30, Y+10	; 0x0a
    1496:	fb 85       	ldd	r31, Y+11	; 0x0b
    1498:	09 95       	icall
    149a:	97 ff       	sbrs	r25, 7
    149c:	09 c0       	rjmp	.+18     	; 0x14b0 <fgetc+0x62>
    149e:	2b 81       	ldd	r18, Y+3	; 0x03
    14a0:	01 96       	adiw	r24, 0x01	; 1
    14a2:	11 f0       	breq	.+4      	; 0x14a8 <fgetc+0x5a>
    14a4:	80 e2       	ldi	r24, 0x20	; 32
    14a6:	01 c0       	rjmp	.+2      	; 0x14aa <fgetc+0x5c>
    14a8:	80 e1       	ldi	r24, 0x10	; 16
    14aa:	82 2b       	or	r24, r18
    14ac:	8b 83       	std	Y+3, r24	; 0x03
    14ae:	08 c0       	rjmp	.+16     	; 0x14c0 <fgetc+0x72>
    14b0:	2e 81       	ldd	r18, Y+6	; 0x06
    14b2:	3f 81       	ldd	r19, Y+7	; 0x07
    14b4:	2f 5f       	subi	r18, 0xFF	; 255
    14b6:	3f 4f       	sbci	r19, 0xFF	; 255
    14b8:	3f 83       	std	Y+7, r19	; 0x07
    14ba:	2e 83       	std	Y+6, r18	; 0x06
    14bc:	99 27       	eor	r25, r25
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <fgetc+0x76>
    14c0:	8f ef       	ldi	r24, 0xFF	; 255
    14c2:	9f ef       	ldi	r25, 0xFF	; 255
    14c4:	df 91       	pop	r29
    14c6:	cf 91       	pop	r28
    14c8:	08 95       	ret

000014ca <printf>:
    14ca:	a0 e0       	ldi	r26, 0x00	; 0
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	eb e6       	ldi	r30, 0x6B	; 107
    14d0:	fa e0       	ldi	r31, 0x0A	; 10
    14d2:	0c 94 42 0d 	jmp	0x1a84	; 0x1a84 <__prologue_saves__+0x20>
    14d6:	ae 01       	movw	r20, r28
    14d8:	4b 5f       	subi	r20, 0xFB	; 251
    14da:	5f 4f       	sbci	r21, 0xFF	; 255
    14dc:	fa 01       	movw	r30, r20
    14de:	61 91       	ld	r22, Z+
    14e0:	71 91       	ld	r23, Z+
    14e2:	af 01       	movw	r20, r30
    14e4:	80 91 4d 03 	lds	r24, 0x034D
    14e8:	90 91 4e 03 	lds	r25, 0x034E
    14ec:	0e 94 a1 0a 	call	0x1542	; 0x1542 <vfprintf>
    14f0:	e2 e0       	ldi	r30, 0x02	; 2
    14f2:	0c 94 5e 0d 	jmp	0x1abc	; 0x1abc <__epilogue_restores__+0x20>

000014f6 <printf_P>:
    14f6:	a0 e0       	ldi	r26, 0x00	; 0
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e1 e8       	ldi	r30, 0x81	; 129
    14fc:	fa e0       	ldi	r31, 0x0A	; 10
    14fe:	0c 94 40 0d 	jmp	0x1a80	; 0x1a80 <__prologue_saves__+0x1c>
    1502:	ae 01       	movw	r20, r28
    1504:	49 5f       	subi	r20, 0xF9	; 249
    1506:	5f 4f       	sbci	r21, 0xFF	; 255
    1508:	da 01       	movw	r26, r20
    150a:	6d 91       	ld	r22, X+
    150c:	7d 91       	ld	r23, X+
    150e:	ad 01       	movw	r20, r26
    1510:	0b e4       	ldi	r16, 0x4B	; 75
    1512:	13 e0       	ldi	r17, 0x03	; 3
    1514:	f8 01       	movw	r30, r16
    1516:	82 81       	ldd	r24, Z+2	; 0x02
    1518:	93 81       	ldd	r25, Z+3	; 0x03
    151a:	dc 01       	movw	r26, r24
    151c:	13 96       	adiw	r26, 0x03	; 3
    151e:	2c 91       	ld	r18, X
    1520:	13 97       	sbiw	r26, 0x03	; 3
    1522:	28 60       	ori	r18, 0x08	; 8
    1524:	13 96       	adiw	r26, 0x03	; 3
    1526:	2c 93       	st	X, r18
    1528:	0e 94 a1 0a 	call	0x1542	; 0x1542 <vfprintf>
    152c:	d8 01       	movw	r26, r16
    152e:	12 96       	adiw	r26, 0x02	; 2
    1530:	ed 91       	ld	r30, X+
    1532:	fc 91       	ld	r31, X
    1534:	13 97       	sbiw	r26, 0x03	; 3
    1536:	23 81       	ldd	r18, Z+3	; 0x03
    1538:	27 7f       	andi	r18, 0xF7	; 247
    153a:	23 83       	std	Z+3, r18	; 0x03
    153c:	e4 e0       	ldi	r30, 0x04	; 4
    153e:	0c 94 5c 0d 	jmp	0x1ab8	; 0x1ab8 <__epilogue_restores__+0x1c>

00001542 <vfprintf>:
    1542:	ac e0       	ldi	r26, 0x0C	; 12
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e7 ea       	ldi	r30, 0xA7	; 167
    1548:	fa e0       	ldi	r31, 0x0A	; 10
    154a:	0c 94 32 0d 	jmp	0x1a64	; 0x1a64 <__prologue_saves__>
    154e:	7c 01       	movw	r14, r24
    1550:	6b 01       	movw	r12, r22
    1552:	8a 01       	movw	r16, r20
    1554:	fc 01       	movw	r30, r24
    1556:	17 82       	std	Z+7, r1	; 0x07
    1558:	16 82       	std	Z+6, r1	; 0x06
    155a:	83 81       	ldd	r24, Z+3	; 0x03
    155c:	81 ff       	sbrs	r24, 1
    155e:	bd c1       	rjmp	.+890    	; 0x18da <vfprintf+0x398>
    1560:	ce 01       	movw	r24, r28
    1562:	01 96       	adiw	r24, 0x01	; 1
    1564:	4c 01       	movw	r8, r24
    1566:	f7 01       	movw	r30, r14
    1568:	93 81       	ldd	r25, Z+3	; 0x03
    156a:	f6 01       	movw	r30, r12
    156c:	93 fd       	sbrc	r25, 3
    156e:	85 91       	lpm	r24, Z+
    1570:	93 ff       	sbrs	r25, 3
    1572:	81 91       	ld	r24, Z+
    1574:	6f 01       	movw	r12, r30
    1576:	88 23       	and	r24, r24
    1578:	09 f4       	brne	.+2      	; 0x157c <vfprintf+0x3a>
    157a:	ab c1       	rjmp	.+854    	; 0x18d2 <vfprintf+0x390>
    157c:	85 32       	cpi	r24, 0x25	; 37
    157e:	39 f4       	brne	.+14     	; 0x158e <vfprintf+0x4c>
    1580:	93 fd       	sbrc	r25, 3
    1582:	85 91       	lpm	r24, Z+
    1584:	93 ff       	sbrs	r25, 3
    1586:	81 91       	ld	r24, Z+
    1588:	6f 01       	movw	r12, r30
    158a:	85 32       	cpi	r24, 0x25	; 37
    158c:	29 f4       	brne	.+10     	; 0x1598 <vfprintf+0x56>
    158e:	b7 01       	movw	r22, r14
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	0e 94 89 0c 	call	0x1912	; 0x1912 <fputc>
    1596:	e7 cf       	rjmp	.-50     	; 0x1566 <vfprintf+0x24>
    1598:	51 2c       	mov	r5, r1
    159a:	31 2c       	mov	r3, r1
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	20 32       	cpi	r18, 0x20	; 32
    15a0:	a0 f4       	brcc	.+40     	; 0x15ca <vfprintf+0x88>
    15a2:	8b 32       	cpi	r24, 0x2B	; 43
    15a4:	69 f0       	breq	.+26     	; 0x15c0 <vfprintf+0x7e>
    15a6:	30 f4       	brcc	.+12     	; 0x15b4 <vfprintf+0x72>
    15a8:	80 32       	cpi	r24, 0x20	; 32
    15aa:	59 f0       	breq	.+22     	; 0x15c2 <vfprintf+0x80>
    15ac:	83 32       	cpi	r24, 0x23	; 35
    15ae:	69 f4       	brne	.+26     	; 0x15ca <vfprintf+0x88>
    15b0:	20 61       	ori	r18, 0x10	; 16
    15b2:	2c c0       	rjmp	.+88     	; 0x160c <vfprintf+0xca>
    15b4:	8d 32       	cpi	r24, 0x2D	; 45
    15b6:	39 f0       	breq	.+14     	; 0x15c6 <vfprintf+0x84>
    15b8:	80 33       	cpi	r24, 0x30	; 48
    15ba:	39 f4       	brne	.+14     	; 0x15ca <vfprintf+0x88>
    15bc:	21 60       	ori	r18, 0x01	; 1
    15be:	26 c0       	rjmp	.+76     	; 0x160c <vfprintf+0xca>
    15c0:	22 60       	ori	r18, 0x02	; 2
    15c2:	24 60       	ori	r18, 0x04	; 4
    15c4:	23 c0       	rjmp	.+70     	; 0x160c <vfprintf+0xca>
    15c6:	28 60       	ori	r18, 0x08	; 8
    15c8:	21 c0       	rjmp	.+66     	; 0x160c <vfprintf+0xca>
    15ca:	27 fd       	sbrc	r18, 7
    15cc:	27 c0       	rjmp	.+78     	; 0x161c <vfprintf+0xda>
    15ce:	30 ed       	ldi	r19, 0xD0	; 208
    15d0:	38 0f       	add	r19, r24
    15d2:	3a 30       	cpi	r19, 0x0A	; 10
    15d4:	78 f4       	brcc	.+30     	; 0x15f4 <vfprintf+0xb2>
    15d6:	26 ff       	sbrs	r18, 6
    15d8:	06 c0       	rjmp	.+12     	; 0x15e6 <vfprintf+0xa4>
    15da:	fa e0       	ldi	r31, 0x0A	; 10
    15dc:	5f 9e       	mul	r5, r31
    15de:	30 0d       	add	r19, r0
    15e0:	11 24       	eor	r1, r1
    15e2:	53 2e       	mov	r5, r19
    15e4:	13 c0       	rjmp	.+38     	; 0x160c <vfprintf+0xca>
    15e6:	8a e0       	ldi	r24, 0x0A	; 10
    15e8:	38 9e       	mul	r3, r24
    15ea:	30 0d       	add	r19, r0
    15ec:	11 24       	eor	r1, r1
    15ee:	33 2e       	mov	r3, r19
    15f0:	20 62       	ori	r18, 0x20	; 32
    15f2:	0c c0       	rjmp	.+24     	; 0x160c <vfprintf+0xca>
    15f4:	8e 32       	cpi	r24, 0x2E	; 46
    15f6:	21 f4       	brne	.+8      	; 0x1600 <vfprintf+0xbe>
    15f8:	26 fd       	sbrc	r18, 6
    15fa:	6b c1       	rjmp	.+726    	; 0x18d2 <vfprintf+0x390>
    15fc:	20 64       	ori	r18, 0x40	; 64
    15fe:	06 c0       	rjmp	.+12     	; 0x160c <vfprintf+0xca>
    1600:	8c 36       	cpi	r24, 0x6C	; 108
    1602:	11 f4       	brne	.+4      	; 0x1608 <vfprintf+0xc6>
    1604:	20 68       	ori	r18, 0x80	; 128
    1606:	02 c0       	rjmp	.+4      	; 0x160c <vfprintf+0xca>
    1608:	88 36       	cpi	r24, 0x68	; 104
    160a:	41 f4       	brne	.+16     	; 0x161c <vfprintf+0xda>
    160c:	f6 01       	movw	r30, r12
    160e:	93 fd       	sbrc	r25, 3
    1610:	85 91       	lpm	r24, Z+
    1612:	93 ff       	sbrs	r25, 3
    1614:	81 91       	ld	r24, Z+
    1616:	6f 01       	movw	r12, r30
    1618:	81 11       	cpse	r24, r1
    161a:	c1 cf       	rjmp	.-126    	; 0x159e <vfprintf+0x5c>
    161c:	98 2f       	mov	r25, r24
    161e:	9f 7d       	andi	r25, 0xDF	; 223
    1620:	95 54       	subi	r25, 0x45	; 69
    1622:	93 30       	cpi	r25, 0x03	; 3
    1624:	28 f4       	brcc	.+10     	; 0x1630 <vfprintf+0xee>
    1626:	0c 5f       	subi	r16, 0xFC	; 252
    1628:	1f 4f       	sbci	r17, 0xFF	; 255
    162a:	ff e3       	ldi	r31, 0x3F	; 63
    162c:	f9 83       	std	Y+1, r31	; 0x01
    162e:	0d c0       	rjmp	.+26     	; 0x164a <vfprintf+0x108>
    1630:	83 36       	cpi	r24, 0x63	; 99
    1632:	31 f0       	breq	.+12     	; 0x1640 <vfprintf+0xfe>
    1634:	83 37       	cpi	r24, 0x73	; 115
    1636:	71 f0       	breq	.+28     	; 0x1654 <vfprintf+0x112>
    1638:	83 35       	cpi	r24, 0x53	; 83
    163a:	09 f0       	breq	.+2      	; 0x163e <vfprintf+0xfc>
    163c:	5b c0       	rjmp	.+182    	; 0x16f4 <vfprintf+0x1b2>
    163e:	22 c0       	rjmp	.+68     	; 0x1684 <vfprintf+0x142>
    1640:	f8 01       	movw	r30, r16
    1642:	80 81       	ld	r24, Z
    1644:	89 83       	std	Y+1, r24	; 0x01
    1646:	0e 5f       	subi	r16, 0xFE	; 254
    1648:	1f 4f       	sbci	r17, 0xFF	; 255
    164a:	44 24       	eor	r4, r4
    164c:	43 94       	inc	r4
    164e:	51 2c       	mov	r5, r1
    1650:	54 01       	movw	r10, r8
    1652:	15 c0       	rjmp	.+42     	; 0x167e <vfprintf+0x13c>
    1654:	38 01       	movw	r6, r16
    1656:	f2 e0       	ldi	r31, 0x02	; 2
    1658:	6f 0e       	add	r6, r31
    165a:	71 1c       	adc	r7, r1
    165c:	f8 01       	movw	r30, r16
    165e:	a0 80       	ld	r10, Z
    1660:	b1 80       	ldd	r11, Z+1	; 0x01
    1662:	26 ff       	sbrs	r18, 6
    1664:	03 c0       	rjmp	.+6      	; 0x166c <vfprintf+0x12a>
    1666:	65 2d       	mov	r22, r5
    1668:	70 e0       	ldi	r23, 0x00	; 0
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <vfprintf+0x12e>
    166c:	6f ef       	ldi	r22, 0xFF	; 255
    166e:	7f ef       	ldi	r23, 0xFF	; 255
    1670:	c5 01       	movw	r24, r10
    1672:	2c 87       	std	Y+12, r18	; 0x0c
    1674:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <strnlen>
    1678:	2c 01       	movw	r4, r24
    167a:	83 01       	movw	r16, r6
    167c:	2c 85       	ldd	r18, Y+12	; 0x0c
    167e:	2f 77       	andi	r18, 0x7F	; 127
    1680:	22 2e       	mov	r2, r18
    1682:	17 c0       	rjmp	.+46     	; 0x16b2 <vfprintf+0x170>
    1684:	38 01       	movw	r6, r16
    1686:	f2 e0       	ldi	r31, 0x02	; 2
    1688:	6f 0e       	add	r6, r31
    168a:	71 1c       	adc	r7, r1
    168c:	f8 01       	movw	r30, r16
    168e:	a0 80       	ld	r10, Z
    1690:	b1 80       	ldd	r11, Z+1	; 0x01
    1692:	26 ff       	sbrs	r18, 6
    1694:	03 c0       	rjmp	.+6      	; 0x169c <vfprintf+0x15a>
    1696:	65 2d       	mov	r22, r5
    1698:	70 e0       	ldi	r23, 0x00	; 0
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <vfprintf+0x15e>
    169c:	6f ef       	ldi	r22, 0xFF	; 255
    169e:	7f ef       	ldi	r23, 0xFF	; 255
    16a0:	c5 01       	movw	r24, r10
    16a2:	2c 87       	std	Y+12, r18	; 0x0c
    16a4:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <strnlen_P>
    16a8:	2c 01       	movw	r4, r24
    16aa:	2c 85       	ldd	r18, Y+12	; 0x0c
    16ac:	20 68       	ori	r18, 0x80	; 128
    16ae:	22 2e       	mov	r2, r18
    16b0:	83 01       	movw	r16, r6
    16b2:	23 fc       	sbrc	r2, 3
    16b4:	1b c0       	rjmp	.+54     	; 0x16ec <vfprintf+0x1aa>
    16b6:	83 2d       	mov	r24, r3
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	48 16       	cp	r4, r24
    16bc:	59 06       	cpc	r5, r25
    16be:	b0 f4       	brcc	.+44     	; 0x16ec <vfprintf+0x1aa>
    16c0:	b7 01       	movw	r22, r14
    16c2:	80 e2       	ldi	r24, 0x20	; 32
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	0e 94 89 0c 	call	0x1912	; 0x1912 <fputc>
    16ca:	3a 94       	dec	r3
    16cc:	f4 cf       	rjmp	.-24     	; 0x16b6 <vfprintf+0x174>
    16ce:	f5 01       	movw	r30, r10
    16d0:	27 fc       	sbrc	r2, 7
    16d2:	85 91       	lpm	r24, Z+
    16d4:	27 fe       	sbrs	r2, 7
    16d6:	81 91       	ld	r24, Z+
    16d8:	5f 01       	movw	r10, r30
    16da:	b7 01       	movw	r22, r14
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	0e 94 89 0c 	call	0x1912	; 0x1912 <fputc>
    16e2:	31 10       	cpse	r3, r1
    16e4:	3a 94       	dec	r3
    16e6:	f1 e0       	ldi	r31, 0x01	; 1
    16e8:	4f 1a       	sub	r4, r31
    16ea:	51 08       	sbc	r5, r1
    16ec:	41 14       	cp	r4, r1
    16ee:	51 04       	cpc	r5, r1
    16f0:	71 f7       	brne	.-36     	; 0x16ce <vfprintf+0x18c>
    16f2:	e5 c0       	rjmp	.+458    	; 0x18be <vfprintf+0x37c>
    16f4:	84 36       	cpi	r24, 0x64	; 100
    16f6:	11 f0       	breq	.+4      	; 0x16fc <vfprintf+0x1ba>
    16f8:	89 36       	cpi	r24, 0x69	; 105
    16fa:	39 f5       	brne	.+78     	; 0x174a <vfprintf+0x208>
    16fc:	f8 01       	movw	r30, r16
    16fe:	27 ff       	sbrs	r18, 7
    1700:	07 c0       	rjmp	.+14     	; 0x1710 <vfprintf+0x1ce>
    1702:	60 81       	ld	r22, Z
    1704:	71 81       	ldd	r23, Z+1	; 0x01
    1706:	82 81       	ldd	r24, Z+2	; 0x02
    1708:	93 81       	ldd	r25, Z+3	; 0x03
    170a:	0c 5f       	subi	r16, 0xFC	; 252
    170c:	1f 4f       	sbci	r17, 0xFF	; 255
    170e:	08 c0       	rjmp	.+16     	; 0x1720 <vfprintf+0x1de>
    1710:	60 81       	ld	r22, Z
    1712:	71 81       	ldd	r23, Z+1	; 0x01
    1714:	07 2e       	mov	r0, r23
    1716:	00 0c       	add	r0, r0
    1718:	88 0b       	sbc	r24, r24
    171a:	99 0b       	sbc	r25, r25
    171c:	0e 5f       	subi	r16, 0xFE	; 254
    171e:	1f 4f       	sbci	r17, 0xFF	; 255
    1720:	2f 76       	andi	r18, 0x6F	; 111
    1722:	72 2e       	mov	r7, r18
    1724:	97 ff       	sbrs	r25, 7
    1726:	09 c0       	rjmp	.+18     	; 0x173a <vfprintf+0x1f8>
    1728:	90 95       	com	r25
    172a:	80 95       	com	r24
    172c:	70 95       	com	r23
    172e:	61 95       	neg	r22
    1730:	7f 4f       	sbci	r23, 0xFF	; 255
    1732:	8f 4f       	sbci	r24, 0xFF	; 255
    1734:	9f 4f       	sbci	r25, 0xFF	; 255
    1736:	20 68       	ori	r18, 0x80	; 128
    1738:	72 2e       	mov	r7, r18
    173a:	2a e0       	ldi	r18, 0x0A	; 10
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	a4 01       	movw	r20, r8
    1740:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__ultoa_invert>
    1744:	a8 2e       	mov	r10, r24
    1746:	a8 18       	sub	r10, r8
    1748:	44 c0       	rjmp	.+136    	; 0x17d2 <vfprintf+0x290>
    174a:	85 37       	cpi	r24, 0x75	; 117
    174c:	29 f4       	brne	.+10     	; 0x1758 <vfprintf+0x216>
    174e:	2f 7e       	andi	r18, 0xEF	; 239
    1750:	b2 2e       	mov	r11, r18
    1752:	2a e0       	ldi	r18, 0x0A	; 10
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	25 c0       	rjmp	.+74     	; 0x17a2 <vfprintf+0x260>
    1758:	f2 2f       	mov	r31, r18
    175a:	f9 7f       	andi	r31, 0xF9	; 249
    175c:	bf 2e       	mov	r11, r31
    175e:	8f 36       	cpi	r24, 0x6F	; 111
    1760:	c1 f0       	breq	.+48     	; 0x1792 <vfprintf+0x250>
    1762:	18 f4       	brcc	.+6      	; 0x176a <vfprintf+0x228>
    1764:	88 35       	cpi	r24, 0x58	; 88
    1766:	79 f0       	breq	.+30     	; 0x1786 <vfprintf+0x244>
    1768:	b4 c0       	rjmp	.+360    	; 0x18d2 <vfprintf+0x390>
    176a:	80 37       	cpi	r24, 0x70	; 112
    176c:	19 f0       	breq	.+6      	; 0x1774 <vfprintf+0x232>
    176e:	88 37       	cpi	r24, 0x78	; 120
    1770:	21 f0       	breq	.+8      	; 0x177a <vfprintf+0x238>
    1772:	af c0       	rjmp	.+350    	; 0x18d2 <vfprintf+0x390>
    1774:	2f 2f       	mov	r18, r31
    1776:	20 61       	ori	r18, 0x10	; 16
    1778:	b2 2e       	mov	r11, r18
    177a:	b4 fe       	sbrs	r11, 4
    177c:	0d c0       	rjmp	.+26     	; 0x1798 <vfprintf+0x256>
    177e:	8b 2d       	mov	r24, r11
    1780:	84 60       	ori	r24, 0x04	; 4
    1782:	b8 2e       	mov	r11, r24
    1784:	09 c0       	rjmp	.+18     	; 0x1798 <vfprintf+0x256>
    1786:	24 ff       	sbrs	r18, 4
    1788:	0a c0       	rjmp	.+20     	; 0x179e <vfprintf+0x25c>
    178a:	9f 2f       	mov	r25, r31
    178c:	96 60       	ori	r25, 0x06	; 6
    178e:	b9 2e       	mov	r11, r25
    1790:	06 c0       	rjmp	.+12     	; 0x179e <vfprintf+0x25c>
    1792:	28 e0       	ldi	r18, 0x08	; 8
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	05 c0       	rjmp	.+10     	; 0x17a2 <vfprintf+0x260>
    1798:	20 e1       	ldi	r18, 0x10	; 16
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <vfprintf+0x260>
    179e:	20 e1       	ldi	r18, 0x10	; 16
    17a0:	32 e0       	ldi	r19, 0x02	; 2
    17a2:	f8 01       	movw	r30, r16
    17a4:	b7 fe       	sbrs	r11, 7
    17a6:	07 c0       	rjmp	.+14     	; 0x17b6 <vfprintf+0x274>
    17a8:	60 81       	ld	r22, Z
    17aa:	71 81       	ldd	r23, Z+1	; 0x01
    17ac:	82 81       	ldd	r24, Z+2	; 0x02
    17ae:	93 81       	ldd	r25, Z+3	; 0x03
    17b0:	0c 5f       	subi	r16, 0xFC	; 252
    17b2:	1f 4f       	sbci	r17, 0xFF	; 255
    17b4:	06 c0       	rjmp	.+12     	; 0x17c2 <vfprintf+0x280>
    17b6:	60 81       	ld	r22, Z
    17b8:	71 81       	ldd	r23, Z+1	; 0x01
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	0e 5f       	subi	r16, 0xFE	; 254
    17c0:	1f 4f       	sbci	r17, 0xFF	; 255
    17c2:	a4 01       	movw	r20, r8
    17c4:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__ultoa_invert>
    17c8:	a8 2e       	mov	r10, r24
    17ca:	a8 18       	sub	r10, r8
    17cc:	fb 2d       	mov	r31, r11
    17ce:	ff 77       	andi	r31, 0x7F	; 127
    17d0:	7f 2e       	mov	r7, r31
    17d2:	76 fe       	sbrs	r7, 6
    17d4:	0b c0       	rjmp	.+22     	; 0x17ec <vfprintf+0x2aa>
    17d6:	37 2d       	mov	r19, r7
    17d8:	3e 7f       	andi	r19, 0xFE	; 254
    17da:	a5 14       	cp	r10, r5
    17dc:	50 f4       	brcc	.+20     	; 0x17f2 <vfprintf+0x2b0>
    17de:	74 fe       	sbrs	r7, 4
    17e0:	0a c0       	rjmp	.+20     	; 0x17f6 <vfprintf+0x2b4>
    17e2:	72 fc       	sbrc	r7, 2
    17e4:	08 c0       	rjmp	.+16     	; 0x17f6 <vfprintf+0x2b4>
    17e6:	37 2d       	mov	r19, r7
    17e8:	3e 7e       	andi	r19, 0xEE	; 238
    17ea:	05 c0       	rjmp	.+10     	; 0x17f6 <vfprintf+0x2b4>
    17ec:	ba 2c       	mov	r11, r10
    17ee:	37 2d       	mov	r19, r7
    17f0:	03 c0       	rjmp	.+6      	; 0x17f8 <vfprintf+0x2b6>
    17f2:	ba 2c       	mov	r11, r10
    17f4:	01 c0       	rjmp	.+2      	; 0x17f8 <vfprintf+0x2b6>
    17f6:	b5 2c       	mov	r11, r5
    17f8:	34 ff       	sbrs	r19, 4
    17fa:	0d c0       	rjmp	.+26     	; 0x1816 <vfprintf+0x2d4>
    17fc:	fe 01       	movw	r30, r28
    17fe:	ea 0d       	add	r30, r10
    1800:	f1 1d       	adc	r31, r1
    1802:	80 81       	ld	r24, Z
    1804:	80 33       	cpi	r24, 0x30	; 48
    1806:	11 f4       	brne	.+4      	; 0x180c <vfprintf+0x2ca>
    1808:	39 7e       	andi	r19, 0xE9	; 233
    180a:	09 c0       	rjmp	.+18     	; 0x181e <vfprintf+0x2dc>
    180c:	32 ff       	sbrs	r19, 2
    180e:	06 c0       	rjmp	.+12     	; 0x181c <vfprintf+0x2da>
    1810:	b3 94       	inc	r11
    1812:	b3 94       	inc	r11
    1814:	04 c0       	rjmp	.+8      	; 0x181e <vfprintf+0x2dc>
    1816:	83 2f       	mov	r24, r19
    1818:	86 78       	andi	r24, 0x86	; 134
    181a:	09 f0       	breq	.+2      	; 0x181e <vfprintf+0x2dc>
    181c:	b3 94       	inc	r11
    181e:	33 fd       	sbrc	r19, 3
    1820:	13 c0       	rjmp	.+38     	; 0x1848 <vfprintf+0x306>
    1822:	30 ff       	sbrs	r19, 0
    1824:	06 c0       	rjmp	.+12     	; 0x1832 <vfprintf+0x2f0>
    1826:	5a 2c       	mov	r5, r10
    1828:	b3 14       	cp	r11, r3
    182a:	18 f4       	brcc	.+6      	; 0x1832 <vfprintf+0x2f0>
    182c:	53 0c       	add	r5, r3
    182e:	5b 18       	sub	r5, r11
    1830:	b3 2c       	mov	r11, r3
    1832:	b3 14       	cp	r11, r3
    1834:	68 f4       	brcc	.+26     	; 0x1850 <vfprintf+0x30e>
    1836:	b7 01       	movw	r22, r14
    1838:	80 e2       	ldi	r24, 0x20	; 32
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	3c 87       	std	Y+12, r19	; 0x0c
    183e:	0e 94 89 0c 	call	0x1912	; 0x1912 <fputc>
    1842:	b3 94       	inc	r11
    1844:	3c 85       	ldd	r19, Y+12	; 0x0c
    1846:	f5 cf       	rjmp	.-22     	; 0x1832 <vfprintf+0x2f0>
    1848:	b3 14       	cp	r11, r3
    184a:	10 f4       	brcc	.+4      	; 0x1850 <vfprintf+0x30e>
    184c:	3b 18       	sub	r3, r11
    184e:	01 c0       	rjmp	.+2      	; 0x1852 <vfprintf+0x310>
    1850:	31 2c       	mov	r3, r1
    1852:	34 ff       	sbrs	r19, 4
    1854:	12 c0       	rjmp	.+36     	; 0x187a <vfprintf+0x338>
    1856:	b7 01       	movw	r22, r14
    1858:	80 e3       	ldi	r24, 0x30	; 48
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	3c 87       	std	Y+12, r19	; 0x0c
    185e:	0e 94 89 0c 	call	0x1912	; 0x1912 <fputc>
    1862:	3c 85       	ldd	r19, Y+12	; 0x0c
    1864:	32 ff       	sbrs	r19, 2
    1866:	17 c0       	rjmp	.+46     	; 0x1896 <vfprintf+0x354>
    1868:	31 fd       	sbrc	r19, 1
    186a:	03 c0       	rjmp	.+6      	; 0x1872 <vfprintf+0x330>
    186c:	88 e7       	ldi	r24, 0x78	; 120
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <vfprintf+0x334>
    1872:	88 e5       	ldi	r24, 0x58	; 88
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	b7 01       	movw	r22, r14
    1878:	0c c0       	rjmp	.+24     	; 0x1892 <vfprintf+0x350>
    187a:	83 2f       	mov	r24, r19
    187c:	86 78       	andi	r24, 0x86	; 134
    187e:	59 f0       	breq	.+22     	; 0x1896 <vfprintf+0x354>
    1880:	31 ff       	sbrs	r19, 1
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <vfprintf+0x346>
    1884:	8b e2       	ldi	r24, 0x2B	; 43
    1886:	01 c0       	rjmp	.+2      	; 0x188a <vfprintf+0x348>
    1888:	80 e2       	ldi	r24, 0x20	; 32
    188a:	37 fd       	sbrc	r19, 7
    188c:	8d e2       	ldi	r24, 0x2D	; 45
    188e:	b7 01       	movw	r22, r14
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	0e 94 89 0c 	call	0x1912	; 0x1912 <fputc>
    1896:	a5 14       	cp	r10, r5
    1898:	38 f4       	brcc	.+14     	; 0x18a8 <vfprintf+0x366>
    189a:	b7 01       	movw	r22, r14
    189c:	80 e3       	ldi	r24, 0x30	; 48
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	0e 94 89 0c 	call	0x1912	; 0x1912 <fputc>
    18a4:	5a 94       	dec	r5
    18a6:	f7 cf       	rjmp	.-18     	; 0x1896 <vfprintf+0x354>
    18a8:	aa 94       	dec	r10
    18aa:	f4 01       	movw	r30, r8
    18ac:	ea 0d       	add	r30, r10
    18ae:	f1 1d       	adc	r31, r1
    18b0:	80 81       	ld	r24, Z
    18b2:	b7 01       	movw	r22, r14
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	0e 94 89 0c 	call	0x1912	; 0x1912 <fputc>
    18ba:	a1 10       	cpse	r10, r1
    18bc:	f5 cf       	rjmp	.-22     	; 0x18a8 <vfprintf+0x366>
    18be:	33 20       	and	r3, r3
    18c0:	09 f4       	brne	.+2      	; 0x18c4 <vfprintf+0x382>
    18c2:	51 ce       	rjmp	.-862    	; 0x1566 <vfprintf+0x24>
    18c4:	b7 01       	movw	r22, r14
    18c6:	80 e2       	ldi	r24, 0x20	; 32
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	0e 94 89 0c 	call	0x1912	; 0x1912 <fputc>
    18ce:	3a 94       	dec	r3
    18d0:	f6 cf       	rjmp	.-20     	; 0x18be <vfprintf+0x37c>
    18d2:	f7 01       	movw	r30, r14
    18d4:	86 81       	ldd	r24, Z+6	; 0x06
    18d6:	97 81       	ldd	r25, Z+7	; 0x07
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <vfprintf+0x39c>
    18da:	8f ef       	ldi	r24, 0xFF	; 255
    18dc:	9f ef       	ldi	r25, 0xFF	; 255
    18de:	2c 96       	adiw	r28, 0x0c	; 12
    18e0:	e2 e1       	ldi	r30, 0x12	; 18
    18e2:	0c 94 4e 0d 	jmp	0x1a9c	; 0x1a9c <__epilogue_restores__>

000018e6 <strnlen_P>:
    18e6:	fc 01       	movw	r30, r24
    18e8:	05 90       	lpm	r0, Z+
    18ea:	61 50       	subi	r22, 0x01	; 1
    18ec:	70 40       	sbci	r23, 0x00	; 0
    18ee:	01 10       	cpse	r0, r1
    18f0:	d8 f7       	brcc	.-10     	; 0x18e8 <strnlen_P+0x2>
    18f2:	80 95       	com	r24
    18f4:	90 95       	com	r25
    18f6:	8e 0f       	add	r24, r30
    18f8:	9f 1f       	adc	r25, r31
    18fa:	08 95       	ret

000018fc <strnlen>:
    18fc:	fc 01       	movw	r30, r24
    18fe:	61 50       	subi	r22, 0x01	; 1
    1900:	70 40       	sbci	r23, 0x00	; 0
    1902:	01 90       	ld	r0, Z+
    1904:	01 10       	cpse	r0, r1
    1906:	d8 f7       	brcc	.-10     	; 0x18fe <strnlen+0x2>
    1908:	80 95       	com	r24
    190a:	90 95       	com	r25
    190c:	8e 0f       	add	r24, r30
    190e:	9f 1f       	adc	r25, r31
    1910:	08 95       	ret

00001912 <fputc>:
    1912:	0f 93       	push	r16
    1914:	1f 93       	push	r17
    1916:	cf 93       	push	r28
    1918:	df 93       	push	r29
    191a:	fb 01       	movw	r30, r22
    191c:	23 81       	ldd	r18, Z+3	; 0x03
    191e:	21 fd       	sbrc	r18, 1
    1920:	03 c0       	rjmp	.+6      	; 0x1928 <fputc+0x16>
    1922:	8f ef       	ldi	r24, 0xFF	; 255
    1924:	9f ef       	ldi	r25, 0xFF	; 255
    1926:	28 c0       	rjmp	.+80     	; 0x1978 <fputc+0x66>
    1928:	22 ff       	sbrs	r18, 2
    192a:	16 c0       	rjmp	.+44     	; 0x1958 <fputc+0x46>
    192c:	46 81       	ldd	r20, Z+6	; 0x06
    192e:	57 81       	ldd	r21, Z+7	; 0x07
    1930:	24 81       	ldd	r18, Z+4	; 0x04
    1932:	35 81       	ldd	r19, Z+5	; 0x05
    1934:	42 17       	cp	r20, r18
    1936:	53 07       	cpc	r21, r19
    1938:	44 f4       	brge	.+16     	; 0x194a <fputc+0x38>
    193a:	a0 81       	ld	r26, Z
    193c:	b1 81       	ldd	r27, Z+1	; 0x01
    193e:	9d 01       	movw	r18, r26
    1940:	2f 5f       	subi	r18, 0xFF	; 255
    1942:	3f 4f       	sbci	r19, 0xFF	; 255
    1944:	31 83       	std	Z+1, r19	; 0x01
    1946:	20 83       	st	Z, r18
    1948:	8c 93       	st	X, r24
    194a:	26 81       	ldd	r18, Z+6	; 0x06
    194c:	37 81       	ldd	r19, Z+7	; 0x07
    194e:	2f 5f       	subi	r18, 0xFF	; 255
    1950:	3f 4f       	sbci	r19, 0xFF	; 255
    1952:	37 83       	std	Z+7, r19	; 0x07
    1954:	26 83       	std	Z+6, r18	; 0x06
    1956:	10 c0       	rjmp	.+32     	; 0x1978 <fputc+0x66>
    1958:	eb 01       	movw	r28, r22
    195a:	09 2f       	mov	r16, r25
    195c:	18 2f       	mov	r17, r24
    195e:	00 84       	ldd	r0, Z+8	; 0x08
    1960:	f1 85       	ldd	r31, Z+9	; 0x09
    1962:	e0 2d       	mov	r30, r0
    1964:	09 95       	icall
    1966:	89 2b       	or	r24, r25
    1968:	e1 f6       	brne	.-72     	; 0x1922 <fputc+0x10>
    196a:	8e 81       	ldd	r24, Y+6	; 0x06
    196c:	9f 81       	ldd	r25, Y+7	; 0x07
    196e:	01 96       	adiw	r24, 0x01	; 1
    1970:	9f 83       	std	Y+7, r25	; 0x07
    1972:	8e 83       	std	Y+6, r24	; 0x06
    1974:	81 2f       	mov	r24, r17
    1976:	90 2f       	mov	r25, r16
    1978:	df 91       	pop	r29
    197a:	cf 91       	pop	r28
    197c:	1f 91       	pop	r17
    197e:	0f 91       	pop	r16
    1980:	08 95       	ret

00001982 <__ultoa_invert>:
    1982:	fa 01       	movw	r30, r20
    1984:	aa 27       	eor	r26, r26
    1986:	28 30       	cpi	r18, 0x08	; 8
    1988:	51 f1       	breq	.+84     	; 0x19de <__ultoa_invert+0x5c>
    198a:	20 31       	cpi	r18, 0x10	; 16
    198c:	81 f1       	breq	.+96     	; 0x19ee <__ultoa_invert+0x6c>
    198e:	e8 94       	clt
    1990:	6f 93       	push	r22
    1992:	6e 7f       	andi	r22, 0xFE	; 254
    1994:	6e 5f       	subi	r22, 0xFE	; 254
    1996:	7f 4f       	sbci	r23, 0xFF	; 255
    1998:	8f 4f       	sbci	r24, 0xFF	; 255
    199a:	9f 4f       	sbci	r25, 0xFF	; 255
    199c:	af 4f       	sbci	r26, 0xFF	; 255
    199e:	b1 e0       	ldi	r27, 0x01	; 1
    19a0:	3e d0       	rcall	.+124    	; 0x1a1e <__ultoa_invert+0x9c>
    19a2:	b4 e0       	ldi	r27, 0x04	; 4
    19a4:	3c d0       	rcall	.+120    	; 0x1a1e <__ultoa_invert+0x9c>
    19a6:	67 0f       	add	r22, r23
    19a8:	78 1f       	adc	r23, r24
    19aa:	89 1f       	adc	r24, r25
    19ac:	9a 1f       	adc	r25, r26
    19ae:	a1 1d       	adc	r26, r1
    19b0:	68 0f       	add	r22, r24
    19b2:	79 1f       	adc	r23, r25
    19b4:	8a 1f       	adc	r24, r26
    19b6:	91 1d       	adc	r25, r1
    19b8:	a1 1d       	adc	r26, r1
    19ba:	6a 0f       	add	r22, r26
    19bc:	71 1d       	adc	r23, r1
    19be:	81 1d       	adc	r24, r1
    19c0:	91 1d       	adc	r25, r1
    19c2:	a1 1d       	adc	r26, r1
    19c4:	20 d0       	rcall	.+64     	; 0x1a06 <__ultoa_invert+0x84>
    19c6:	09 f4       	brne	.+2      	; 0x19ca <__ultoa_invert+0x48>
    19c8:	68 94       	set
    19ca:	3f 91       	pop	r19
    19cc:	2a e0       	ldi	r18, 0x0A	; 10
    19ce:	26 9f       	mul	r18, r22
    19d0:	11 24       	eor	r1, r1
    19d2:	30 19       	sub	r19, r0
    19d4:	30 5d       	subi	r19, 0xD0	; 208
    19d6:	31 93       	st	Z+, r19
    19d8:	de f6       	brtc	.-74     	; 0x1990 <__ultoa_invert+0xe>
    19da:	cf 01       	movw	r24, r30
    19dc:	08 95       	ret
    19de:	46 2f       	mov	r20, r22
    19e0:	47 70       	andi	r20, 0x07	; 7
    19e2:	40 5d       	subi	r20, 0xD0	; 208
    19e4:	41 93       	st	Z+, r20
    19e6:	b3 e0       	ldi	r27, 0x03	; 3
    19e8:	0f d0       	rcall	.+30     	; 0x1a08 <__ultoa_invert+0x86>
    19ea:	c9 f7       	brne	.-14     	; 0x19de <__ultoa_invert+0x5c>
    19ec:	f6 cf       	rjmp	.-20     	; 0x19da <__ultoa_invert+0x58>
    19ee:	46 2f       	mov	r20, r22
    19f0:	4f 70       	andi	r20, 0x0F	; 15
    19f2:	40 5d       	subi	r20, 0xD0	; 208
    19f4:	4a 33       	cpi	r20, 0x3A	; 58
    19f6:	18 f0       	brcs	.+6      	; 0x19fe <__ultoa_invert+0x7c>
    19f8:	49 5d       	subi	r20, 0xD9	; 217
    19fa:	31 fd       	sbrc	r19, 1
    19fc:	40 52       	subi	r20, 0x20	; 32
    19fe:	41 93       	st	Z+, r20
    1a00:	02 d0       	rcall	.+4      	; 0x1a06 <__ultoa_invert+0x84>
    1a02:	a9 f7       	brne	.-22     	; 0x19ee <__ultoa_invert+0x6c>
    1a04:	ea cf       	rjmp	.-44     	; 0x19da <__ultoa_invert+0x58>
    1a06:	b4 e0       	ldi	r27, 0x04	; 4
    1a08:	a6 95       	lsr	r26
    1a0a:	97 95       	ror	r25
    1a0c:	87 95       	ror	r24
    1a0e:	77 95       	ror	r23
    1a10:	67 95       	ror	r22
    1a12:	ba 95       	dec	r27
    1a14:	c9 f7       	brne	.-14     	; 0x1a08 <__ultoa_invert+0x86>
    1a16:	00 97       	sbiw	r24, 0x00	; 0
    1a18:	61 05       	cpc	r22, r1
    1a1a:	71 05       	cpc	r23, r1
    1a1c:	08 95       	ret
    1a1e:	9b 01       	movw	r18, r22
    1a20:	ac 01       	movw	r20, r24
    1a22:	0a 2e       	mov	r0, r26
    1a24:	06 94       	lsr	r0
    1a26:	57 95       	ror	r21
    1a28:	47 95       	ror	r20
    1a2a:	37 95       	ror	r19
    1a2c:	27 95       	ror	r18
    1a2e:	ba 95       	dec	r27
    1a30:	c9 f7       	brne	.-14     	; 0x1a24 <__ultoa_invert+0xa2>
    1a32:	62 0f       	add	r22, r18
    1a34:	73 1f       	adc	r23, r19
    1a36:	84 1f       	adc	r24, r20
    1a38:	95 1f       	adc	r25, r21
    1a3a:	a0 1d       	adc	r26, r0
    1a3c:	08 95       	ret

00001a3e <__muluhisi3>:
    1a3e:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__umulhisi3>
    1a42:	a5 9f       	mul	r26, r21
    1a44:	90 0d       	add	r25, r0
    1a46:	b4 9f       	mul	r27, r20
    1a48:	90 0d       	add	r25, r0
    1a4a:	a4 9f       	mul	r26, r20
    1a4c:	80 0d       	add	r24, r0
    1a4e:	91 1d       	adc	r25, r1
    1a50:	11 24       	eor	r1, r1
    1a52:	08 95       	ret

00001a54 <__mulshisi3>:
    1a54:	b7 ff       	sbrs	r27, 7
    1a56:	0c 94 1f 0d 	jmp	0x1a3e	; 0x1a3e <__muluhisi3>

00001a5a <__mulohisi3>:
    1a5a:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <__muluhisi3>
    1a5e:	82 1b       	sub	r24, r18
    1a60:	93 0b       	sbc	r25, r19
    1a62:	08 95       	ret

00001a64 <__prologue_saves__>:
    1a64:	2f 92       	push	r2
    1a66:	3f 92       	push	r3
    1a68:	4f 92       	push	r4
    1a6a:	5f 92       	push	r5
    1a6c:	6f 92       	push	r6
    1a6e:	7f 92       	push	r7
    1a70:	8f 92       	push	r8
    1a72:	9f 92       	push	r9
    1a74:	af 92       	push	r10
    1a76:	bf 92       	push	r11
    1a78:	cf 92       	push	r12
    1a7a:	df 92       	push	r13
    1a7c:	ef 92       	push	r14
    1a7e:	ff 92       	push	r15
    1a80:	0f 93       	push	r16
    1a82:	1f 93       	push	r17
    1a84:	cf 93       	push	r28
    1a86:	df 93       	push	r29
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
    1a8c:	ca 1b       	sub	r28, r26
    1a8e:	db 0b       	sbc	r29, r27
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	f8 94       	cli
    1a94:	de bf       	out	0x3e, r29	; 62
    1a96:	0f be       	out	0x3f, r0	; 63
    1a98:	cd bf       	out	0x3d, r28	; 61
    1a9a:	09 94       	ijmp

00001a9c <__epilogue_restores__>:
    1a9c:	2a 88       	ldd	r2, Y+18	; 0x12
    1a9e:	39 88       	ldd	r3, Y+17	; 0x11
    1aa0:	48 88       	ldd	r4, Y+16	; 0x10
    1aa2:	5f 84       	ldd	r5, Y+15	; 0x0f
    1aa4:	6e 84       	ldd	r6, Y+14	; 0x0e
    1aa6:	7d 84       	ldd	r7, Y+13	; 0x0d
    1aa8:	8c 84       	ldd	r8, Y+12	; 0x0c
    1aaa:	9b 84       	ldd	r9, Y+11	; 0x0b
    1aac:	aa 84       	ldd	r10, Y+10	; 0x0a
    1aae:	b9 84       	ldd	r11, Y+9	; 0x09
    1ab0:	c8 84       	ldd	r12, Y+8	; 0x08
    1ab2:	df 80       	ldd	r13, Y+7	; 0x07
    1ab4:	ee 80       	ldd	r14, Y+6	; 0x06
    1ab6:	fd 80       	ldd	r15, Y+5	; 0x05
    1ab8:	0c 81       	ldd	r16, Y+4	; 0x04
    1aba:	1b 81       	ldd	r17, Y+3	; 0x03
    1abc:	aa 81       	ldd	r26, Y+2	; 0x02
    1abe:	b9 81       	ldd	r27, Y+1	; 0x01
    1ac0:	ce 0f       	add	r28, r30
    1ac2:	d1 1d       	adc	r29, r1
    1ac4:	0f b6       	in	r0, 0x3f	; 63
    1ac6:	f8 94       	cli
    1ac8:	de bf       	out	0x3e, r29	; 62
    1aca:	0f be       	out	0x3f, r0	; 63
    1acc:	cd bf       	out	0x3d, r28	; 61
    1ace:	ed 01       	movw	r28, r26
    1ad0:	08 95       	ret

00001ad2 <__umulhisi3>:
    1ad2:	a2 9f       	mul	r26, r18
    1ad4:	b0 01       	movw	r22, r0
    1ad6:	b3 9f       	mul	r27, r19
    1ad8:	c0 01       	movw	r24, r0
    1ada:	a3 9f       	mul	r26, r19
    1adc:	70 0d       	add	r23, r0
    1ade:	81 1d       	adc	r24, r1
    1ae0:	11 24       	eor	r1, r1
    1ae2:	91 1d       	adc	r25, r1
    1ae4:	b2 9f       	mul	r27, r18
    1ae6:	70 0d       	add	r23, r0
    1ae8:	81 1d       	adc	r24, r1
    1aea:	11 24       	eor	r1, r1
    1aec:	91 1d       	adc	r25, r1
    1aee:	08 95       	ret

00001af0 <_exit>:
    1af0:	f8 94       	cli

00001af2 <__stop_program>:
    1af2:	ff cf       	rjmp	.-2      	; 0x1af2 <__stop_program>
